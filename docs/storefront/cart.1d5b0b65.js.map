{"version":3,"sources":["cart/CartForm.ts","cart/CartPageController.ts","cart/services/CartPageApiService.ts","cart/cart.ts"],"names":[],"mappings":"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","file":"cart.1d5b0b65.js","sourceRoot":"../../storefront/scripts/src","sourcesContent":["import { sleep } from '~../../../libs/utils/async';\nimport { selectors } from '~common/constants/selectors';\nimport { PreorderSpinner } from '~common/PreorderSpinner';\nimport {\n    ButtonSettings,\n} from '~common/types';\nimport { PreorderButton } from '~product-details/PreorderButton';\nimport { isVisible, logWithPrefix } from '~utils/common/common';\nimport { SubmitEvent } from './types';\n\n\ninterface ThemesButtons {\n    items: Map<string, { ref: HTMLElement | null; style: string | null; selector: string; }>;\n    visible: boolean;\n    styleElement: HTMLElement | null;\n}\n\n\nexport class CartForm {\n    elements!: HTMLFormElement[];\n    variantsSelectElement: HTMLSelectElement | null = null;\n    selectors: any;\n    displayOriginValue = 'block';\n    themesButtons: ThemesButtons = { items: new Map(), visible: false, styleElement: null };\n    themesButtonsWidth: string | null = null;\n    preorderButton!: PreorderButton;\n    settings: ButtonSettings | null = null;\n    // spinner: PreorderSpinner;\n\n    constructor() {\n        this.setFormElements();  \n\n\n        this.addListners();\n\n        // this.variantsSelectElement = this.element?.querySelector<HTMLSelectElement>(\n        //     selectors.product.variantsSelect.join(\",\")\n        // ) ?? null;\n\n        if (this.elements.length) {\n            // this.displayOriginValue = window.getComputedStyle(\n            //     this.element\n            // ).display;\n        }\n\n        // this.preorderButton = new PreorderButton();\n        // this.setThemesButtons();\n\n        // this.spinner = new PreorderSpinner();\n        // this.element?.append(this.spinner.element);\n\n    }\n    \n    private setFormElements() {\n      const elements = document.querySelectorAll<HTMLFormElement>(\n          selectors.cart.form.join(\" , \")\n      )?.values() ?? [];\n      this.elements = [...elements];\n    }\n\n    addListners() {\n        this.onChange((e) => {\n            console.log('onChange', e);\n        });\n\n\n        // this.element?.addEventListener('focusin', () => {\n        //     if (!this.themesButtons.visible) {\n        //         this.hideThemesButtons();\n        //     }\n        // }, true)\n\n        // this.onSelectProductVariant((e) => {\n\n        // })\n\n        // this.selectors = new window.Shopify.OptionSelectors(selectors.product.variantsSelectId, {\n        //     product,\n        //     onVariantSelected: this.onSelectProductVariant.bind(this),\n        //     enableHistoryState: true\n        // });\n\n        {\n            // const qwer = window.Shopify.OptionSelectors.prototype.updateSelectors;\n            // window.Shopify.OptionSelectors.prototype.updateSelectors = function (...args: any[]) {\n            //     debugger;\n            //     const optionSelectors = this;\n            //     qwer.apply(optionSelectors, args);\n            //     const id = optionSelectors.product.getVariant(optionSelectors.selectedValues());\n            //     console.log('Shopify.OptionSelectors.prototype.updateSelectors', id, optionSelectors);\n            // }\n        }\n    }\n\n    onClick(cb: (e: MouseEvent) => void) {\n        this.elements?.forEach(e => e.addEventListener('click', cb));\n    }\n\n    onChange(cb: (e: Event) => void) {\n        this.elements?.forEach(e => e.addEventListener('change', cb));\n    }\n    onSubmit(cb: (e: Event) => void) {\n        this.elements?.forEach(e => e.addEventListener('submit', cb));\n    }\n\n    onVariantChange(cb: (e: Event) => void) {\n        this.elements?.forEach(e => e.addEventListener('change', e => cb(e)));\n    }\n\n    // onSelectProductVariant(cb: (e: Event) => void) {\n    //     this.variantsSelectElement?.addEventListener('change', cb);\n    // }\n\n\n    // setThemesButtons() {\n    //     if (this.element !== null) {\n    //         selectors.product.button.forEach((selector) => {\n    //             const element = this.element?.querySelector<HTMLButtonElement>(\n    //                 selector\n    //             );\n    //             // if (element) {\n    //             selector = `${selectors.product.form && ''} ${selector}`;\n    //             if (!this.themesButtons.items.has(selector)) {\n    //                 this.themesButtons.items.set(selector, {\n    //                     ref: element ?? null,\n    //                     style: element ? window.getComputedStyle(element).display : null,\n    //                     selector: `${selectors.product.form && ''} ${selector}`\n    //                 });\n    //             }\n    //             // }\n    //         });\n    //     }\n    // }\n\n    get isExist() {\n        return Boolean(this.elements?.length);\n    }\n    \n    isFormVisibile(selector: string) {\n        this.setFormElements();\n        const result = this.elements.reduce((acc, el) => {\n          return acc || (el.matches(selector) && isVisible(el));\n        }, false);\n        \n        return result;\n    }\n\n    // appendPreorderButton() {\n    //     this.element?.append(this.preorderButton.element);\n    // }\n\n    displayPreorderButton() {\n        this.preorderButton.display();\n    }\n\n    showThemesButtons() {\n        this.themesButtons.items.forEach((element) => {\n            // applyStyle(element.style, element.ref);\n            if (element?.ref && element.style) {\n                // elementToHide!.ref!.style!.display = 'none';\n                element.ref.style.display = element.style;\n            }\n        });\n        // this.removeThemesButtonsStyle();\n        this.themesButtons.visible = true;\n    }\n\n    // hideThemesButtons() {\n    //     // const styles = [...this.themesButtons.items].map(({ selector }) => {\n    //     //     return { selector, rules: 'display: none !important;' };\n    //     // });\n    //     // this.createThemesButtonsStyle(styles);\n    //     this.setThemesButtons();\n\n    //     this.themesButtons.items.forEach((elementToHide) => {\n    //         // elementToHide.ref.setAttribute('style', 'display: none');\n    //         if (elementToHide?.ref) {\n    //             elementToHide!.ref!.style!.display = 'none';\n    //             if (this.themesButtonsWidth === null) {\n    //                 this.themesButtonsWidth = window.getComputedStyle(elementToHide.ref).width;\n    //             }\n    //         }\n    //     });\n\n    //     if (this.themesButtonsWidth) {\n    //         this.preorderButton.element.style.width = this.themesButtonsWidth;\n    //     }\n\n    //     this.themesButtons.visible = false;\n    // }\n\n    // async showSpinner() {\n    //     await sleep();\n    //     this.hideThemesButtons();\n    //     this.preorderButton.hide();\n\n    //     // this.spinner = new PreorderSpinner();\n    //     // this.element?.append(this.spinner.element);\n    //     this.spinner.display(this.themesButtonsWidth);\n    // }\n\n    // hideSpinner() {\n    //     // this.spinner?.element.parentElement?.removeChild(this.spinner?.element);\n    //     this.hideThemesButtons();\n    //     this.spinner.hide();\n    // }\n\n    // setPreorderButtonSettings(settings: ButtonSettings) {\n    //     this.settings = settings;\n    //     this.preorderButton.setSettings(settings.design_settings);\n    //     this.preorderButton.setText(settings.text);\n    //     this.preorderButton.setMessage(settings.message);\n    // }\n\n    // triggerVariantChangeSync() {\n    //     this.element?.querySelector('select')?.dispatchEvent(new Event('change', { 'bubbles': true }));\n    // }\n\n    getSelectedVariantId() {\n        return this.variantsSelectElement?.value;\n    }\n\n    // removeThemesButtonsStyle() {\n    //     this.themesButtons.styleElement?.parentNode?.removeChild(this.themesButtons.styleElement);\n    //     this.themesButtons.styleElement = null;\n    // }\n\n    // createThemesButtonsStyle(items: { selector: string; rules: string; }[]) {\n    //     if (this.themesButtons.styleElement) {\n    //         return;\n    //     }\n    //     const style = document.createElement('style');\n    //     items.forEach(({ selector, rules }) => {\n    //         style.innerHTML += `${selector} { ${rules} }`;\n    //     });\n\n    //     style.innerHTML += ` div.${this.preorderButton.mainCssClass} button[type=\"submit\"] { display: ${this.preorderButton.mainDisplayStyle} !important;}`;\n\n    //     this.element?.appendChild(style);\n    //     this.themesButtons.styleElement = style;\n    // }\n\n\n\n}\n","import { PreorderSettings, PreorderStatus } from '~common/types';\nimport { Variant } from '~product-details/ShopifyOptionSelectors';\nimport { tryParseJsonString, LocationApi, LogFn } from '~utils/common/common';\nimport { PreorderError } from '~utils/common/errors';\nimport { CartForm } from './CartForm';\nimport {\n    VariantApiJson,\n    CartPageApiService,\n    CartSettings,\n} from './services/CartPageApiService';\nimport { CartData, SubmitEvent } from './types';\nimport * as utils from '~utils/common/common';\nimport { PreorderButton } from '~product-details/PreorderButton';\nimport { number } from 'yup';\n\n// declare global {\n//  const ShopifyConst: { shop: string, OptionSelectors: any };\n// }\ntype CustomProps = { \n  url: string,\n  method: string,\n  headers: {[key: string]: string},\n};\ntype PatchedXMLHttpRequest = XMLHttpRequest & { __meta_params: CustomProps };\ntype CartDataItems = { [key: string]: CartData[\"items\"][0]};\ntype VariantPreorderDataMap = { [key: string]: VariantApiJson };\ntype InputToHandle = {\n  id: string;\n  value: string;\n};\n\ntype CartUpdate = {\n  [id: string]: string;  \n};\n\ntype CartUpdatePayload = CartUpdate | {\n  updates: CartUpdate\n} | {\n  updates: number[]\n};\n\ntype ProcessBodyReturnType = { newBody: BodyInit | null, isChanged: boolean, variantPreorderData: VariantApiJson | null };\n\ninterface GetChangeCartDataReturnType {\n  variantInCart: {\n      id: number;\n      quantity: number;\n  } | undefined;\n  newVariantQuantity: number;\n  preventWhenExceedPreorder?: boolean;\n  currentVariantQuantity: number | null;\n  newChangeParams: {\n      line?: string;\n      id?: string;\n  };\n}\n\ntype GetChangeCartDataHandler = (bodyJson: {[key in 'quantity' | 'id' | 'line']: string}, body: BodyInit, cartData: CartData) => Promise<GetChangeCartDataReturnType>;\nexport class CartPageController {\n    cartForm!: CartForm;\n    product: VariantApiJson | null = null;\n    settings: PreorderSettings | null = null;\n    // shopifyOptionSelectors!: ShopifyOptionSelectors;\n\n    private isFormProcessed = false;\n    private isRequestProcessed = false;\n    private selectedVariant: Variant | null = null;\n    private urlHandlers = new Map<RegExp, GetChangeCartDataHandler>();\n\n    protected addUrlHandler(urlRegExp: RegExp, urlHandler: GetChangeCartDataHandler) {\n      this.urlHandlers.set(urlRegExp, urlHandler);\n    }\n    \n    constructor(\n        protected log: LogFn,\n        protected cartApiService: CartPageApiService,\n        protected cartSettings: CartSettings,\n    ) {\n        debugger;\n        const controller = this;\n        this.log = log.bind(null, CartPageController.name, ':: ');\n        this.cartForm = new CartForm();\n        const submitHandler = (event$: Event) => {\n          const eventInstance = event$;\n          const isCheckout = (event$ as unknown as { submitter: HTMLElement}).submitter.matches('[name=\"checkout\"]')\n          \n          // if (!this.isFormProcessed && !isCheckout && !(e.defaultPrevented && !PreorderButton.isElementPreorderButton((e as any).submitter))) {\n          // if (!this.isFormProcessed && !isCheckout && !e.defaultPrevented) {\n          if (!controller.isFormProcessed && !eventInstance.defaultPrevented) {\n            eventInstance.preventDefault();\n            controller.handleCartSubmit(event$.currentTarget as HTMLFormElement, event$ as SubmitEvent);\n          } else {\n            controller.isFormProcessed = false;\n          }\n        };\n        \n        this.cartForm.onSubmit(submitHandler);\n        document.addEventListener('submit', submitHandler);\n        \n        this.addUrlHandler(/\\/cart\\/change.js$/, CartPageController.getChangeCartData);\n        // this.addUrlHandler(/\\/cart$/, CartPageController.getChangeCartDataForPostRequest);\n    }\n\n   init() {    \n        if (this.cartForm.isExist) {\n            this.log('cart form is on the page');\n            this.patchCartChangeRequest();\n        }\n        //  else {\n        //     const error = 'cart form is not on the page';\n        //     this.log(error);\n        //     throw new PreorderError(error);\n        // }\n    }\n    \n   \n    \n    private handleInput = (\n      input: HTMLInputElement | HTMLSelectElement | InputToHandle |null,\n      id: string,\n      cartDataItems: CartDataItems, \n      variantPreorderDataMap: VariantPreorderDataMap, \n      alertMessage: string,\n      isUpdate = false\n      ) => {\n        let preventSubmit = false;\n        const inputValue = input ? Number(input.value) : 0;\n        const variantInCart = cartDataItems[id];\n        const variantInPreorder = variantPreorderDataMap[id];\n        if(!isNaN(inputValue) && variantInPreorder){\n          const variantInCartQuantity = variantInCart?.quantity ?? 0;\n          const cartValue = isUpdate ? inputValue : (variantInCartQuantity + (inputValue || 1));\n          \n          if(cartValue > variantInPreorder.allowed_qnty) {\n            let quantity = this.getAvailableVariantQuantity(variantInPreorder, variantInCartQuantity);\n            \n            alertMessage += this.getAlertMessage(quantity, variantInCart?.title) + \"\\r\\n\";\n            \n            if (isUpdate && input) {\n              input.value = String(variantInPreorder.allowed_qnty);\n            } else {\n              preventSubmit = true;\n            }\n          }\n        }\n      \n      return { preventSumbit: preventSubmit, alertMessage };\n    };\n    \n    protected getCartAndVariantPreorderData = async () => {\n      const cartData: CartData = await fetch('/cart.js').then(r => r.json());\n      const cartDataItems: CartDataItems = cartData.items.reduce((acc, item) => ({ ...acc, [String(item.id)]: item }), {});\n      const cartDataItemIds = Object.keys(cartDataItems);\n      const variantPreorderData = await this.cartApiService.loadVariantPreorderData(cartDataItemIds);\n      const variantPreorderDataMap: VariantPreorderDataMap =  variantPreorderData?.reduce((acc, preorderData, i) => ({\n        ...acc,\n        [preorderData.variant_id]: preorderData,\n      }), {}) ?? {};\n      \n      return {\n        cartDataItems,\n        cartDataItemIds,\n        variantPreorderData,\n        variantPreorderDataMap,\n      };\n    }\n    \n    protected async handleCartSubmit(formEl: HTMLFormElement | null, e: SubmitEvent) {\n      if (!formEl) {\n        return null;  \n      }\n      const controller = this;\n      let preventSumbit = false;\n      \n      const {\n        cartDataItems,\n        cartDataItemIds,\n        variantPreorderData,\n        variantPreorderDataMap,\n      } = await this.getCartAndVariantPreorderData();\n      \n      \n      let alertMessage = '';\n      const action = formEl.getAttribute(\"action\");\n      \n      // const handleInput = (input: HTMLInputElement | HTMLSelectElement | null, id: string, isUpdate = false) => {\n      //   let preventSumbit = false;\n      //   const inputValue = input ? Number(input.value) : 0;\n      //   const variantInCart = cartDataItems[id];\n      //   const variantInPreorder = variantPreorderDataMap[id];\n      //   if(!isNaN(inputValue) && variantInPreorder){\n      //     const variantInCartQuantity = variantInCart?.quantity ?? 0;\n      //     const cartValue = isUpdate ? inputValue : (variantInCartQuantity + (inputValue || 1));\n          \n      //     if(cartValue > variantInPreorder.allowed_qnty) {\n      //       let quantity = controller.getAvailableVariantQuantity(variantInPreorder, variantInCartQuantity);\n            \n      //       alertMessage += controller.getAlertMessage(quantity) + \"\\r\\n\";\n            \n      //       if (isUpdate && input) {\n      //         input.value = String(variantInPreorder.allowed_qnty);\n      //       } else {\n      //         preventSumbit = true;\n      //       }\n      //     }\n      //   }\n        \n      //   return preventSumbit;\n      // };\n      \n      \n      if (action === '/cart') {\n        const inputList = formEl.querySelectorAll<HTMLInputElement>('[name^=\"updates[\"]');\n        const isUpdate = true;\n        inputList.forEach((input, i) => {\n          const handleInputResult = controller.handleInput(input, cartDataItemIds[i], cartDataItems, variantPreorderDataMap, alertMessage, isUpdate);\n          alertMessage = handleInputResult.alertMessage;\n          preventSumbit = preventSumbit || handleInputResult.preventSumbit;\n        });\n      } else if(action === '/cart/add') {\n        const formData = new FormData(formEl);\n        const formValues = Object.fromEntries(formData.entries());\n        const input = formEl.querySelector<HTMLInputElement | HTMLSelectElement>('[name=\"quantity\"]');\n        const id = formValues.id as string;\n        \n        const handleInputResult = controller.handleInput(input, id,  cartDataItems, variantPreorderDataMap, alertMessage);\n        alertMessage = handleInputResult.alertMessage;\n        preventSumbit = handleInputResult.preventSumbit;\n      }\n      \n      if(alertMessage) {\n        alert(alertMessage);\n      }\n      // formEl.dispatchEvent(new Event(\"submit\", { 'bubbles': true }));\n      // (e as any).detail = { isProcessed: true };\n      // // e. = false;\n      // formEl.dispatchEvent(e);\n      \n      if (!preventSumbit) {\n        this.isFormProcessed = true;\n        if (e.submitter) {\n          e.submitter.click();\n        } else {\n          formEl.submit();\n        }\n      }\n    }\n   \n    private getAvailableVariantQuantity(variantPreorderData: VariantApiJson, variantInCartQuantity: number) {\n      let quantity = variantPreorderData.allowed_qnty;\n      if (utils.isProductPage()\n         && !this.cartForm.isFormVisibile('[action=\"/cart\"]')\n         && !this.cartForm.isFormVisibile('[action=\"/checkout\"]')) {\n        quantity = variantPreorderData.allowed_qnty - variantInCartQuantity;\n      }     \n      return quantity;\n    }\n    \n    protected async processUpdateRequestBody(body: BodyInit, headers?:  CustomProps[\"headers\"]): Promise<ReturnType<CartPageController[\"processBody\"]>> {\n      const isUpdate = true;\n      const isInputBodyString = typeof body === \"string\";\n      let alertMessage = '';\n      let newBody: BodyInit | null = body;\n      let variantPreorderData: VariantApiJson | null = null;\n      let isChanged = false;\n      \n      const {\n        cartDataItems,\n        cartDataItemIds,\n        variantPreorderDataMap,\n      } = await this.getCartAndVariantPreorderData();\n      \n      const bodyValue = this.getBodyValue(body, headers);\n      // body = bodyValue.body;\n      let bodyJson: CartUpdatePayload = bodyValue.bodyJson;\n      \n      const inputsToHandle: {id: string, value: string}[] = [];\n      if (bodyJson) {\n        if (Array.isArray(bodyJson.updates)) {\n          bodyJson.updates;\n        }\n        else if (bodyJson.hasOwnProperty('updates')) {\n          bodyJson.updates\n        } else {\n          const bodyJsonHash = bodyJson as CartUpdate;\n          Object.keys(bodyJson).forEach((key) => {\n            const value = bodyJsonHash[key];\n            const match = key.match(/updates\\[(\\d*)\\]/);\n            if (match) {\n              const id = match[1];\n              inputsToHandle.push({id, value});\n            }\n          });\n          \n          inputsToHandle.map((input, i) => {\n            const handleInputResult = this.handleInput(\n              input,\n              cartDataItemIds[i],\n              cartDataItems,\n              variantPreorderDataMap,\n              alertMessage,\n              isUpdate\n            );\n            alertMessage = handleInputResult.alertMessage;\n            bodyJsonHash[\"updates[\" + input.id + \"]\"] = input.value; \n          });\n          \n          if (isInputBodyString) {\n            newBody = new URLSearchParams(bodyJsonHash).toString();\n          }\n          \n          isChanged = true;\n        }\n      }\n      \n      if (alertMessage) {\n        alert(alertMessage);\n      }\n      \n      return { newBody, isChanged, variantPreorderData };\n    }\n    \n    protected getBodyValue(body: BodyInit, headers?:  CustomProps[\"headers\"]) {\n      let bodyJson = tryParseJsonString(body as string);\n      let isJsonString = false;\n      \n      if (bodyJson !== undefined) {\n        isJsonString = true;\n      }\n      \n      if(typeof body === \"string\") {\n          const contentType = headers?.[\"Content-Type\"] ?? '';\n          \n          if (contentType.includes(\"application/x-www-form-urlencoded\")) {\n            body = new URLSearchParams(body as string);\n          }\n      }\n      \n      if(body instanceof FormData || body instanceof URLSearchParams) {\n        bodyJson = Object.fromEntries(body.entries()) as { id: string};\n      }\n      \n      return { body, bodyJson, isJsonString };\n    }\n    \n    protected async processBody(body: BodyInit, url: string, headers?:  CustomProps[\"headers\"]): Promise<ProcessBodyReturnType> {\n      let newBody: BodyInit | null = body;\n      let variantPreorderData: VariantApiJson | null = null;\n      let isChanged = false;\n      const controller = this;\n      \n      if (/\\/cart\\/update.js$/.test(url)) {\n        return await this.processUpdateRequestBody(body, headers);\n      }\n      \n      for (const [urlRegExp, getChangeCartData] of this.urlHandlers.entries()) {\n        const isCartChangeRequest = urlRegExp.test(url);\n        \n        if(isCartChangeRequest) {\n          const cartData: CartData = await fetch('/cart.js').then(r => r.json());\n          let isJsonString = false;\n          // let bodyJson = tryParseJsonString(body as string);\n          \n          // if (bodyJson !== undefined) {\n          //   isJsonString = true;\n          // }\n          \n          // if(typeof body === \"string\") {\n          //    const contentType = headers?.[\"Content-Type\"] ?? '';\n             \n          //    if (contentType.includes(\"application/x-www-form-urlencoded\")) {\n          //       body = new URLSearchParams(body);\n          //    }\n          // }\n          \n          // if(body instanceof FormData || body instanceof URLSearchParams) {\n          //   bodyJson = Object.fromEntries(body.entries()) as { id: string};\n          // }\n          \n          const bodyValue = this.getBodyValue(body, headers);\n          body = bodyValue.body;\n          isJsonString = bodyValue.isJsonString;\n          let bodyJson = bodyValue.bodyJson;\n          \n          const {\n            variantInCart,\n            newVariantQuantity,\n            currentVariantQuantity,\n            newChangeParams,\n            preventWhenExceedPreorder,\n          } = await getChangeCartData(bodyJson, body, cartData);\n          \n          const variantInCartQuantity = variantInCart?.quantity ?? 0;\n            \n          // if (variantInCart) {\n            const variantPreorderDataResults = await this.cartApiService.loadVariantPreorderData([String(variantInCart?.id || bodyJson.id)]);\n            variantPreorderData = variantPreorderDataResults ? variantPreorderDataResults[0] : null;\n\n            if (variantPreorderData && currentVariantQuantity !== null) {\n              if (newVariantQuantity > variantPreorderData.allowed_qnty) {\n                let quantity = controller.getAvailableVariantQuantity(variantPreorderData, variantInCartQuantity);             \n                \n                const newBodyJson = {\n                  ...bodyJson,\n                  quantity,\n                  ...newChangeParams,\n                };\n\n                \n                if(preventWhenExceedPreorder) {\n                  newBody = null;\n                } else {\n                  newBody = isJsonString ? JSON.stringify(newBodyJson) : new URLSearchParams(newBodyJson).toString();\n                }\n                \n                const alertMessage = this.getAlertMessage(quantity);\n                alert(alertMessage);\n\n              }\n            }\n          // }\n          isChanged = true;\n        }\n      }\n       \n      \n      return { newBody, isChanged, variantPreorderData };\n    }\n    \n    getAlertMessage(quantity: number, variantTitle?: string) {\n      if (quantity === 0) {\n        return this.cartSettings.forbidding_addition_message_all_in_cart\n      } else if (variantTitle) {\n        return this.cartSettings.forbidding_addition_message_specific\n          .replace('${allowed_qnty}', String(quantity))\n          .replace('${variant_title}', String(variantTitle));\n      } else {\n        return this.cartSettings.forbidding_addition_message_general;\n      }\n      \n    }\n    \n    protected patchCartChangeRequest() {\n      const controller = this;\n      \n      (function (originalSend) {\n        XMLHttpRequest.prototype.send = async function (body: BodyInit) {\n          const xhr: PatchedXMLHttpRequest = this as any;\n          console.log('send start -> context: ', this); \n          xhr.addEventListener('loadend', () => {\n            debugger;\n            controller.isRequestProcessed = false;\n           });\n          \n          const { newBody, isChanged } = await controller.processBody(body, xhr.__meta_params?.url, xhr.__meta_params?.headers);\n          \n          if (!isChanged || newBody) {\n            \n            if(xhr.__meta_params?.method === \"GET\") {}\n            \n            controller.isRequestProcessed = true;\n            originalSend.call(xhr, newBody);\n          }\n          \n        };\n      })(XMLHttpRequest.prototype.send);\n    \n      (function (originalOpen) { \n          type ajaxT = typeof XMLHttpRequest;\n          type ArgsType = Parameters<(ajaxT)[\"prototype\"][\"open\"]>;\n          XMLHttpRequest.prototype.open = function () {\n            const args = arguments as unknown as ArgsType;\n            const xhr: PatchedXMLHttpRequest = this as any;\n            \n            xhr.__meta_params = xhr.__meta_params ?? {};\n            \n            xhr.__meta_params = {\n              ...xhr.__meta_params,\n              method: args[0],\n              url: args[1],\n            };\n            \n            \n            originalOpen.call(xhr, ...args);\n          };\n      })(XMLHttpRequest.prototype.open);\n      \n      (function (originalSetRequestHeader) { \n          type ajaxT = typeof XMLHttpRequest;\n          type ArgsType = Parameters<(ajaxT)[\"prototype\"][\"setRequestHeader\"]>;\n          XMLHttpRequest.prototype.setRequestHeader = function () {\n            const args = arguments as unknown as ArgsType;\n            const xhr: PatchedXMLHttpRequest = this as any;\n            \n            xhr.__meta_params = xhr.__meta_params ?? { headers: {} };\n            \n            xhr.__meta_params.headers = {\n              ...xhr.__meta_params.headers,\n               [args[0]]: args[1],\n            };\n            \n            \n            originalSetRequestHeader.call(xhr, ...args);\n          };\n      })(XMLHttpRequest.prototype.setRequestHeader);    \n      \n      \n      (function (originalFetch) {\n          type ArgsType = Parameters<typeof window.fetch>;\n          window.fetch = async function (...args: ArgsType) {\n            \n            const [ requestInfo, requestInit]  = args;\n            let url = requestInfo as string;\n            let body = requestInit?.body;\n            const headers = requestInit?.headers;\n            \n            if (requestInfo instanceof Request) {\n              url = requestInfo.url;\n            }\n            else if (typeof requestInfo !== 'string') {\n              url = String(requestInfo);\n            }\n            \n            if (body) {\n              \n              const { newBody, isChanged, variantPreorderData } = await controller.processBody(body, url, headers as Record<string, string>);\n              if (newBody !== body) {\n                requestInit!.body = newBody;\n              }\n              \n              if (requestInit!.body) {\n                controller.isRequestProcessed = true;\n                return originalFetch(...args).then(r => {\n                  controller.isRequestProcessed = false;\n                  return r;\n                });\n               } else {\n                \n                 return Promise.reject({\n                   json: () => Promise.resolve({\n                      \"status\": 422,\n                      \"message\": \"Cart Error\",\n                      // \"description\": \"You can't add more to the cart.\"\n                   })\n                 })\n               }\n            }\n            \n            return originalFetch(...args);\n          };\n      })(window.fetch);\n      \n    }\n\n    // fallbackForCatchError = ((error: any) => {\n    //     this.cartForm.hideSpinner();\n    //     console.error('LOAD ERROR', error);\n    //     this.cartForm.showThemesButtons();\n    // }).bind(this);\n\n    async loadVariantData(id: number) {\n      const variantData = await this.cartApiService.loadVariantPreorderData([String(id)]);\n\n      return variantData;\n    }\n    \n    static async getChangeCartData(changeParams: { quantity: string, line?: string, id?: string }, body: BodyInit, cartData: CartData): Promise<GetChangeCartDataReturnType> {\n      const newVariantQuantity = Number(changeParams.quantity);\n\n      console.log('cartData', cartData);\n      let variantInCart;\n      const newChangeParams: {line?: string, id?: string } = {};\n\n      if (changeParams.line) {\n        const variantIndex = Number(changeParams.line) - 1;\n        variantInCart = cartData.items[variantIndex];\n        newChangeParams.line = changeParams.line;\n      } else if (changeParams.id) {\n        variantInCart = cartData.items.find((item) => item.id === Number(changeParams.id));\n        newChangeParams.id = changeParams.id;\n      }\n\n      const currentVariantQuantity = variantInCart?.quantity ?? 0;\n\n      return { variantInCart, newVariantQuantity, currentVariantQuantity, newChangeParams };\n    }\n    \n    static async getUpdateCartData(changeParams: { quantity: string, line?: string, id?: string }, body: BodyInit, cartData: CartData): Promise<GetChangeCartDataReturnType> {\n      const newVariantQuantity = Number(changeParams.quantity);\n\n      console.log('cartData', cartData);\n      let variantInCart;\n      const newChangeParams: {line?: string, id?: string } = {};\n\n      if (changeParams.line) {\n        const variantIndex = Number(changeParams.line) - 1;\n        variantInCart = cartData.items[variantIndex];\n        newChangeParams.line = changeParams.line;\n      } else if (changeParams.id) {\n        variantInCart = cartData.items.find((item) => item.id === Number(changeParams.id));\n        newChangeParams.id = changeParams.id;\n      }\n\n      const currentVariantQuantity = variantInCart?.quantity ?? 0;\n\n      return { variantInCart, newVariantQuantity, currentVariantQuantity, newChangeParams };\n    }\n    \n    // static async getChangeCartDataForPostRequest(changeParams: { updates: string[], update: string}, body: BodyInit, cartData: CartData): Promise<GetChangeCartDataReturnType> {\n    //     const variantIndex = Number(changeParams.line) - 1;\n    //     const newVariantQuantity = Number(changeParams.quantity);\n        \n    //     console.log('cartData', cartData);\n        \n    //     const variant = cartData.items[variantIndex];\n    //     const currentVariantQuantity = variant?.quantity ?? 0;\n    //     changeParams.updates.forEach((value, i) => {\n          \n    //     });\n        \n    //     return { variantInCart: variant, newVariantQuantity, currentVariantQuantity, newChangeParams: { line: changeParams.line, } };\n    // }\n\n    // async loadSettings(selectedVariant?: Variant) {\n    //     this.cartForm.showSpinner();\n\n    //     if (selectedVariant) {\n    //         this.selectedVariant = selectedVariant;\n    //     }\n\n    //     await this.getSettings(this.selectedVariant?.id);\n\n    //     this.cartForm.hideSpinner();\n\n    //     if (\n    //         this.settings?.variant.preorder_status === PreorderStatus.Activated\n    //     ) {\n    //         this.cartForm.appendPreorderButton();\n    //         this.cartForm.displayPreorderButton();\n    //     } else {\n    //         this.cartForm.showThemesButtons();\n    //     }\n    // }\n\n    // async getSettings(variant_id?: number) {\n    //     if (this.product === null && !variant_id) {\n    //         return await Promise.resolve(null);\n    //     }\n\n    //     const settings = await this.cartApiService.loadSettings(\n    //         window.Shopify.shop,\n    //         String(variant_id!)\n    //     );\n\n    //     this.cartForm.setPreorderButtonSettings({\n    //         text: settings?.button.text ?? '',\n    //         message: settings?.button.message ?? '',\n    //         design_settings: settings?.button.design_settings.current.preorder!,\n    //     });\n\n    //     this.cartForm.preorderButton.setAavailabilityDate(\n    //         settings?.variant.availability_date\n    //     );\n\n    //     this.settings = {\n    //         ...this.settings,\n    //         variant: settings?.variant!,\n    //     };\n    // }\n}\n\nexport class ProductPageCartController extends CartPageController {\n  \n  constructor(\n      log: LogFn,\n      cartApiService: CartPageApiService,\n      cartSettings: CartSettings,\n  ) {\n    super(log, cartApiService, cartSettings);\n    this.log = log.bind(null, ProductPageCartController.name, ':: ');\n    this.addUrlHandler(/\\/cart\\/add.js$/, ProductPageCartController.getAddCartData);\n  }\n  \n  init() {    \n    super.patchCartChangeRequest();\n  }\n  \n  static async getAddCartData(addParams: { quantity: string, id: string}, body: BodyInit, cartData: CartData): Promise<GetChangeCartDataReturnType>  {\n    \n    \n    console.log('getChangeCartData ::cartData', cartData);\n    const variantInCart = cartData.items.find((item) => item.id === Number(addParams.id));\n    const currentVariantQuantity = (variantInCart?.quantity ?? 0);\n    let newVariantQuantity = Number(addParams.quantity ?? 1) + (variantInCart?.quantity ?? 0);\n    \n    // if(body instanceof FormData && variantInCart) {\n    //   newVariantQuantity = variantInCart.quantity + 1;\n    // }\n    \n    return { variantInCart, newVariantQuantity, currentVariantQuantity, newChangeParams: { id: addParams.id, }, preventWhenExceedPreorder: true };\n  }\n  \n  \n}\n","import { link } from 'fs';\nimport pRetry, { FailedAttemptError } from 'p-retry';\nimport { sleep } from '~../../../libs/utils/async';\nimport { PreorderApi, PreorderSettingsJson } from '~common/types';\nimport { IS_MOCK } from '~index';\nimport {\n    isPreviewProductsPage,\n    isProductDetailsFromCollectionPage,\n    isProductDetailsFromFrontpagePage,\n    isProductDetailsPage,\n    LogFn,\n} from '~utils/common/common';\nimport { fetchJson } from '~utils/common/fetch';\n\nexport class VariantApiJson {\n  variant_id: string = '';\n  allowed_qnty: number = 0;\n}\n\nexport class CartSettings {\n  forbidding_addition_message_general: string = 'Limit Exceeded. Please Reduce Quantity to Continue';\n  forbidding_addition_message_specific: string = 'You cannot add ${variant_title} more  than ${allowed_qnty} items';\n  forbidding_addition_message_all_in_cart: string = 'All items in cart already';\n}\n\nexport class CartPageApiService {\n    constructor(protected log: LogFn, protected preorderApi: PreorderApi, protected shopId: string ) {\n        this.log = log.bind(null, CartPageApiService.name, ':: ');\n    }\n \n    async loadVariantPreorderData(variant_ids: string[]): Promise<VariantApiJson[] | null> {\n      try {\n        const variants = variant_ids.map(variant_id => `variants[]=${variant_id}`).join(\"&\");\n        \n        const variantData = await fetchJson<VariantApiJson[]>(\n          `${this.preorderApi.url}/storefront/cart/limited-variants?shop=${encodeURIComponent(this.shopId)}&${variants}`,\n            {\n                retries: 3,\n            }\n        );\n        this.log('loadVariantData:: variantData', variantData);\n        \n        return variantData?.length ? variantData : null;\n      } catch (e) {\n        this.log('loadVariantData:: ERROR', e);\n        return Promise.resolve(null)\n      }\n    }\n    \n    async getCartSettings(): Promise<CartSettings | null> {\n      try {\n        const settingsData = await fetchJson<CartSettings>(\n          `${this.preorderApi.url}/storefront/cart/settings?shop=${encodeURIComponent(this.shopId)}`,\n            {\n                retries: 3,\n            }\n        );\n        this.log('getCartSettings:: settingsData', settingsData);\n        \n        return settingsData;\n      } catch (e) {\n        this.log('getCartSettings:: ERROR', e);\n        return Promise.resolve(null)\n      }\n    }\n    \n    async changeCart(params: { quantity: string, line: string}): Promise<VariantApiJson | null> {\n\n      try {\n        const cartData = await fetchJson<VariantApiJson>(\n          `/cart/change.js?${new URLSearchParams(params)}`,\n            {\n                retries: 3,\n            }\n        );\n        this.log('changeCart:: cartData', cartData);\n        \n        return  {\n          variant_id: '',\n          allowed_qnty: 2\n        };//variantData;\n      } catch (e) {\n        this.log('changeCart:: ERROR', e);\n        return Promise.resolve(null)\n      }\n    }\n\n    async loadSettings(shop_id: string, variant_id: string) {\n        const options: pRetry.Options = {\n            onFailedAttempt: async (error: FailedAttemptError) => {\n                await Promise.resolve(\n                    this.log('AjaxApi:: settings error', error)\n                );\n            },\n            retries: 3,\n        };\n\n        const settings = await fetchJson<PreorderSettingsJson>(\n            `${this.preorderApi.url\n            }/storefront/products/settings?shop=${encodeURIComponent(\n                shop_id\n            )}&variant_id=${variant_id}`,\n            options\n        );\n\n        this.log('loadSettings:: settings', settings);\n        return settings;\n    }\n}\n\nexport class MockCartPageApiService extends CartPageApiService {\n    constructor(log: LogFn, preorderApi: PreorderApi, shopId: string) {\n        super(log, preorderApi, shopId);\n        this.log = log.bind(null, CartPageApiService.name, ':: ');\n    }\n\n    async loadSettings(shop_id: string, variant_id: string) {\n        const options: pRetry.Options = {\n            onFailedAttempt: async (error: FailedAttemptError) => {\n                await Promise.resolve(\n                    this.log('AjaxApi:: settings error', error)\n                );\n            },\n            retries: 3,\n        };\n\n        await sleep(800);\n\n        const data = {\n\n        } as PreorderSettingsJson;\n\n        data.button.message = ` variant ID :: ${variant_id}`;\n        const settings = await Promise.resolve(data);\n\n        this.log(\n            'loadSettings:: params --> ',\n            'shop_id: ',\n            shop_id,\n            ', variant_id: ',\n            variant_id,\n            ', response --> settings::',\n            settings\n        );\n        return settings;\n    }\n}\n","declare const Shopify: any;\nimport { logWithPrefix } from '../utils/common/common';\nimport { PreorderApi } from '~common/types';\nimport { IS_MOCK } from '~index';\nimport { CartPageController, ProductPageCartController } from './CartPageController';\nimport { CartPageApiService, CartSettings, MockCartPageApiService } from './services/CartPageApiService';\nimport { CartData } from './types';\n\nexport async function init(preorderApi: PreorderApi, isProductPage?: boolean) {\n    const logInit = logWithPrefix('product.init():: ');\n    logInit('cart.ts::Shopify object', Shopify);\n\n    const cartPageApiServiceClass = !IS_MOCK\n        ? CartPageApiService\n        : MockCartPageApiService;\n    const cartControllerClass = !isProductPage\n        ? CartPageController\n        : ProductPageCartController;\n    const shopId = window.Shopify.shop;\n    \n    const cartPageApiService = new cartPageApiServiceClass(\n        logWithPrefix(),\n        preorderApi,\n        shopId,\n    );\n    \n    const cartSettings = await cartPageApiService.getCartSettings()\n\n    const controller = new cartControllerClass(\n        logWithPrefix(),\n        cartPageApiService,\n        cartSettings ??  new CartSettings(),\n    );\n    controller.init();\n}\n"]}