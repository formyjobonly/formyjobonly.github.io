{"version":3,"sources":["redux/selectors/products.ts","components/Profiles/ModalCreateProfile/messages.ts","components/Profiles/ModalCreateProfile/ModalCreateProfile.tsx","components/Products/ModalProductSettings/ModalProductSettings.tsx","components/Profiles/ProfilesList/ProfileItemContent/ProfileItemContent.tsx","components/Profiles/ProfilesList/messages.ts","components/Profiles/ProfilesList/FilterControl/FilterControl.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","components/Profiles/ProfileItem/ProfileItem.tsx","components/Profiles/ProfilesList/ProfilesList.tsx"],"names":["selectProducts","state","products","productsSelector","createSelector","productsById","sub","variantsById","Object","keys","map","id","variantsItems","variants","product","different","differentProfile","result","reduce","acc","variant","isDefaultVariant","enabled","profile_id","selectedProducts","isLoadingSelector","loading","settingsModalSelector","settingsModal","assignProfileModalSelector","assignProfileModal","isSettingsModalOpenStateSelector","settings","error","open","pageInfoSelector","pageInfo","sortSelector","sort","filtersSelector","filters","availiability","status","query","useItemSelector","isVariant","itemSelector","useMemo","find","itemSelectorCreator","useSelector","useUnfoldedSelector","unfoldedSelector","unfoldedProductsIds","ids","includes","unfoldedSelectorCreator","useSelectedVariantSelectorCreator","productId","selectedSelector","variantsIds","selectedVariants","filter","variantId","selectedVariantSelectorCreator","PREFIX","aloneMessages","defineMessages","createProfileTitle","defaultMessage","updateProfileTitle","copyOfProfileTitle","newProfileTitle","ModalCreateProfile","props","dispatch","useDispatch","fmt","useFormat","profileModal","profileModalSelector","appSettings","appSettingsSelector","handleProfileActivator","useCallback","openProfileModal","handleSaveProfile","updateProfile","duplicate","data","createProfileActivator","React","onClick","activator","createTitle","updateTitle","title","name","profileModalData","inventory_limit","Number","ModalProductSettings","onSubmit","forSettings","priceShopify","preorderStatusFromList","footer","useState","active","setActive","useEffect","setSettings","msg","formatDictionary","messages","useProductSettingsForm","resetForm","handleOnSubmit","anyError","form","handleClose","openSettingsModal","handleModalActivation","onClose","withError","primaryAction","content","saveAction","onAction","disabled","secondaryActions","cancelAction","Section","vertical","Item","ProfileItemContent","item","noActions","price_type","is_default","price","price_change_value","handleDelete","deleteProfile","priceChangeText","getPriceString","currencySymbolSelector","value","prefix","postfix","PriceType","Same","Math","abs","Amount","Percent","String","SpecificValue","useGetPriceChangeText","getPriceChangeText","inventoryLimitText","getInventoryLimitText","handleUpdateProfileActivator","fetchProfile","updateProfileActivator","e","stopPropagation","icon","EditMajor","duplicateProfileActivator","DuplicateMinor","className","variation","DeleteMajor","sortByName","resourceNameSingular","resourceNamePlural","filterPriceChange","filterPriceChangeSame","filterPriceChangeSpecific","filterPriceChangeIncrease","filterPriceChangeDecrease","isEmpty","Array","isArray","length","FilterControl","arr","filtersValues","handleFilterChange","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","params","filterValue","fetch","Filter","Query","fetchProfilesWithQuery","fetchProfiles","handleFilterAvailabilityRemove","Availiability","handleFilterStatusRemove","Status","handleQueryValue","handleQueryValueRemove","handleClearAll","priceChangeChoices","label","PriceSettingsMode","Value","Increase","Decrease","disambiguateLabel","key","choice","c","getLabel","appliedFilters","push","onRemove","Filters","noop","ProfileItem","ResourceItem","accessibilityLabel","ProfilesList","handleSortChange","selected","setSort","JSON","parse","profiles","profilesSelector","isLoading","selectedProfiles","sortValue","productsIds","selectProfiles","resetSettings","sortOptions","useRef","handleAddProfileActivator","getDefaultSettingsForProfile","Button","primary","alternateTool","Card","ResourceList","filterControl","current","stringify","onSortChange","resourceName","singular","plural","items","renderItem","emptyState","Stack","distribution","Spinner","size","color"],"mappings":"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","file":"static/js/9.53fe761c.chunk.js","sourcesContent":["import { Product, Variant } from '@api/types';\nimport { isDefaultVariant } from '@components/utils/functions';\nimport { RootState } from '@redux/reducers/rootReducer';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst selectProducts = (state: RootState) => state.products;\n\nexport const productsSelector = createSelector(\n    (state: RootState) => state.products.productsById,\n    (sub) => sub.products.variantsById,\n    (productsById, variantsById) => {\n        return Object.keys(productsById).map((id) => {\n            const { variants: variantsItems, ...product } = productsById[id];\n\n            let different = false;\n            let differentProfile = false;\n            const result = { ...product };\n            const variants = variantsItems.reduce((acc, id) => {\n                const variant = variantsById[id];\n                acc[id] = variant;\n                if (!isDefaultVariant(variant)) {\n                    different =\n                        different || variant.enabled !== product.enabled;\n                }\n\n                differentProfile =\n                    differentProfile ||\n                    variant.profile_id !== product.profile_id;\n\n                return acc;\n            }, {} as Record<string, Variant>);\n\n            return { variants, different, differentProfile, ...result };\n        }) as Product[];\n    }\n);\n\nexport const selectedProducts = createSelector(\n    selectProducts,\n    (sub) => sub.selectedProducts\n);\n\nexport const isLoadingSelector = createSelector(\n    selectProducts,\n    (sub) => sub.loading\n);\n\nexport const settingsModalSelector = createSelector(\n    selectProducts,\n    (sub) => sub.settingsModal\n);\n\nexport const assignProfileModalSelector = createSelector(\n    selectProducts,\n    (sub) => sub.assignProfileModal\n);\nexport const isSettingsModalLoadingSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.loading\n);\nexport const isSettingsModalErrorsSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.error\n);\nexport const isSettingsModalOpenStateSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.open\n);\n\nexport const pageInfoSelector = createSelector(\n    selectProducts,\n    (sub) => sub.pageInfo\n);\n\nexport const sortSelector = createSelector(selectProducts, (sub) => sub.sort);\n\nexport const filtersSelector = createSelector(\n    (state: RootState) => state.products.filters.availiability,\n    (state: RootState) => state.products.filters.status,\n    (state: RootState) => state.products.filters.query,\n    (availiability, status, query) => ({ availiability, status, query })\n);\n\nexport const itemSelectorCreator = (id: string, isVariant: boolean) =>\n    createSelector(\n        productsSelector,\n        (sub) => sub.products.variantsById,\n        (products, variantsById) => {\n            if (isVariant) {\n                return variantsById[id];\n            } else {\n                return products.find((product) => product.id === id)!;\n            }\n        }\n    );\n\nexport const useItemSelector = (id: string, isVariant: boolean) => {\n    const itemSelector = useMemo(() => itemSelectorCreator(id, isVariant), [\n        id,\n        isVariant,\n    ]);\n    const item = useSelector(itemSelector);\n\n    return item;\n};\n\nexport const unfoldedSelectorCreator = (id: string) =>\n    createSelector(\n        (state: RootState) => state.products.unfoldedProductsIds,\n        (ids) => ids.includes(id)\n    );\n\nexport const useUnfoldedSelector = (id: string) => {\n    const unfoldedSelector = useMemo(() => unfoldedSelectorCreator(id), [id]);\n    const unfolded = useSelector(unfoldedSelector);\n\n    return unfolded;\n};\n\nexport const selectedVariantSelectorCreator = (productId: string) =>\n    createSelector(\n        (state: RootState) => state.products.productsById,\n        (state: RootState) => state.products.selectedProducts.variantsIds,\n        (productsById, selectedVariants) => {\n            const productVariantsIds = productsById[productId].variants;\n            return productVariantsIds.filter((variantId) =>\n                selectedVariants.includes(variantId)\n            );\n        }\n    );\n\nexport const useSelectedVariantSelectorCreator = (productId: string) => {\n    const selectedSelector = useMemo(\n        () => selectedVariantSelectorCreator(productId),\n        [productId]\n    );\n    const selected = useSelector(selectedSelector);\n\n    return selected;\n};\n\n// export const selectedVariantSelectorCreator = (productId: string) =>\n//     createSelector(\n//         (state: RootState) => state.products.productsById,\n//         (state: RootState) => state.products.selectedProducts.variantsIds,\n//         (productsById, selectedVariants) => {\n//             const productVariantsIds = productsById[productId].variants;\n//             return productVariantsIds.filter((variantId) =>\n//                 selectedVariants.includes(variantId)\n//             );\n//         }\n//     );\n\n// export const useSelectorCreator = (productId: string) => {\n//     const selectedSelector = useMemo(\n//         () => selectedVariantSelectorCreator(productId),\n//         [productId]\n//     );\n//     const selected = useSelector(selectedSelector);\n\n//     return selected;\n// };\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.list.item';\n\nexport const aloneMessages = defineMessages({\n    createProfileTitle: {\n        id: `${PREFIX}.createProfileTitle`,\n        defaultMessage: 'Add Profile',\n    },\n    updateProfileTitle: {\n        id: `${PREFIX}.updateProfileTitle`,\n        defaultMessage: 'Profile {title} Settings',\n    },\n    copyOfProfileTitle: {\n        id: `${PREFIX}.copyOfProfileTitle`,\n        defaultMessage: 'Copy of ',\n    },\n    newProfileTitle: {\n        id: `${PREFIX}.newProfileTitle`,\n        defaultMessage: 'New Profile',\n    },\n});\n","/*eslint-disable*/\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { openSettingsModal } from '@redux/reducers/products';\nimport { ModalSettingsProps } from '@components/Products/ModalProductSettings/ModalProductSettingsParts';\nimport ModalProductSettings from '@components/Products/ModalProductSettings/ModalProductSettings';\nimport { profileModalSelector } from '@redux/selectors/profiles';\nimport { ProductSettingsDTO, Profile, ProfileDTO } from '@api/types';\nimport { openProfileModal, updateProfile } from '@redux/reducers/profiles';\nimport { aloneMessages } from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { appSettingsSelector } from '@redux/selectors/settings';\n\ntype Props = Pick<ModalSettingsProps, 'activator'> & {\n    item?: Profile;\n    duplicate?: boolean;\n};\n\nexport default function ModalCreateProfile(props: Props) {\n    const dispatch = useDispatch();\n    const { fmt } = useFormat();\n    const profileModal = useSelector(profileModalSelector);\n    const appSettings = useSelector(appSettingsSelector);\n\n    const handleProfileActivator = useCallback(() => {\n        dispatch(openProfileModal(true));\n    }, [dispatch]);\n\n    const handleSaveProfile = useCallback(\n        (settings: ProfileDTO) => {\n            // const { start_date, end_date, ...rest } = settings;\n            dispatch(\n                updateProfile({\n                    ...settings,\n                    id: props.duplicate ? '' : profileModal.data?.id ?? '',\n                })\n            );\n        },\n        [profileModal, props.duplicate]\n    );\n\n    const createProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = () => {\n                onClick!();\n                handleProfileActivator();\n            };\n            return <props.activator onClick={handler} />;\n        },\n        []\n    );\n\n    const createTitle = fmt(aloneMessages.createProfileTitle);\n\n    const updateTitle = fmt(aloneMessages.updateProfileTitle, {\n        title: profileModal.data ? `\"${profileModal.data?.name}\"` : '',\n    });\n\n    const title = profileModal.loading\n        ? updateTitle\n        : profileModal.data && !props.duplicate\n        ? updateTitle\n        : createTitle;\n\n    const profileModalData: typeof profileModal.data = profileModal.data\n        ? { ...profileModal.data! }\n        : {\n              ...appSettings,\n              name: fmt(aloneMessages.newProfileTitle),\n              inventory_limit: Number(appSettings?.inventory_limit ?? 0),\n          };\n    if (props.duplicate && profileModal.data && profileModal.data.name) {\n        profileModalData.name =\n            fmt(aloneMessages.copyOfProfileTitle) + profileModalData.name;\n    }\n\n    return (\n        <ModalProductSettings\n            activator={createProfileActivator}\n            onSubmit={handleSaveProfile}\n            {...profileModal}\n            settings={profileModalData}\n            title={title}\n        />\n    );\n}\n","/*eslint-disable*/\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal, Stack } from '@shopify/polaris';\nimport { useFormat } from '@contexts/LocaleContext';\nimport messages from './messages';\nimport './modal-product-settings.styles.scss';\nimport { isSettingsModalOpenStateSelector } from '@redux/selectors/products';\nimport {\n    FooterNode,\n    ModalSettingsProps,\n    TitleNode,\n} from './ModalProductSettingsParts';\nimport { openSettingsModal } from '@redux/reducers/products';\nimport useProductSettingsForm from './productSettingsFormHook';\n\nexport default function ModalProductSettings(props: ModalSettingsProps) {\n    const {\n        loading,\n        settings,\n        onSubmit,\n        forSettings,\n        title,\n        isVariant,\n        priceShopify,\n        preorderStatusFromList,\n        footer,\n        error,\n    } = props;\n\n    const [active, setActive] = useState(false);\n    const open = useSelector(isSettingsModalOpenStateSelector);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!open) {\n            setActive(false);\n        }\n    }, [open]);\n\n    useEffect(() => {\n        setSettings(settings);\n    }, [settings]);\n\n    const { formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n\n    const {\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        form,\n        setSettings,\n    } = useProductSettingsForm({\n        onSubmit,\n        settings,\n        error,\n        forSettings,\n        isVariant,\n        priceShopify,\n        preorderStatusFromList,\n    });\n\n    const handleClose = () => {\n        resetForm();\n        dispatch(openSettingsModal(false));\n        handleModalActivation();\n    };\n\n    const handleModalActivation = useCallback(() => setActive(!active), [\n        active,\n    ]);\n    const activator = <props.activator onClick={handleModalActivation} />;\n\n    return (\n        <Modal\n            activator={activator}\n            open={active}\n            loading={loading}\n            onClose={handleClose}\n            title={<TitleNode title={title} withError={anyError} />}\n            footer={footer}\n            primaryAction={{\n                content: msg.saveAction,\n                onAction: handleOnSubmit,\n                disabled: loading,\n            }}\n            secondaryActions={[\n                {\n                    content: msg.cancelAction,\n                    onAction: handleClose,\n                    disabled: loading,\n                },\n            ]}\n        >\n            <Modal.Section>\n                <Stack vertical>\n                    <Stack.Item>{form}</Stack.Item>\n                    <Stack.Item></Stack.Item>\n                </Stack>\n            </Modal.Section>\n        </Modal>\n    );\n}\n","import React, { SyntheticEvent, useCallback } from 'react';\nimport { TextStyle, Stack, Button, Badge } from '@shopify/polaris';\nimport { PriceType, Profile } from '@api/types';\nimport { DeleteMajor, DuplicateMinor, EditMajor } from '@shopify/polaris-icons';\nimport '@components/Products/ProductItemContent/products-item-content.styles.scss';\nimport ModalCreateProfile from '@components/Profiles/ModalCreateProfile/ModalCreateProfile';\nimport { ModalSettingsProps } from '@components/Products/ModalProductSettings/ModalProductSettingsParts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteProfile, fetchProfile } from '@redux/reducers/profiles';\nimport './profile-item-content.styles.scss';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { currencySymbolSelector } from '@redux/selectors/app';\n\ntype Props = {\n    item: Profile;\n    noActions?: true;\n};\n\nfunction useGetPriceChangeText() {\n    const { getPriceString } = useFormat();\n    const currencySymbol = useSelector(currencySymbolSelector);\n\n    function getPriceChangeText(\n        price_type: Profile['price_type'],\n        price: Profile['price_change_value']\n    ) {\n        let value = price && Number(price);\n        let prefix = 'Keep Same';\n        let postfix = '';\n\n        if (!value && price_type !== PriceType.Same && value !== 0) {\n            return 'Error';\n        }\n\n        if (value || value === 0) {\n            switch (true) {\n                case value < 0: {\n                    prefix = 'Decrease by';\n                    value = Math.abs(value);\n                    break;\n                }\n                case value > 0: {\n                    prefix = 'Increase by';\n                    break;\n                }\n            }\n\n            switch (price_type) {\n                case PriceType.Amount:\n                    postfix = getPriceString(value);\n                    break;\n                case PriceType.Percent:\n                    postfix = ' ' + String(value) + '%';\n                    break;\n                case PriceType.SpecificValue:\n                    prefix = `Set to ${getPriceString(value)}`;\n                    postfix = '';\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        return `${prefix} ${postfix}`;\n    }\n\n    return getPriceChangeText;\n}\n\nfunction getInventoryLimitText(inventory_limit: Profile['inventory_limit']) {\n    if (inventory_limit) {\n        return `Max ${inventory_limit}`;\n    }\n\n    return 'Unlimited';\n}\nfunction ProfileItemContent({ item, noActions }: Props) {\n    const {\n        id,\n        name,\n        inventory_limit,\n        price_type,\n        is_default,\n        price_change_value: price,\n    } = item;\n    const dispatch = useDispatch();\n\n    const handleDelete = useCallback(() => dispatch(deleteProfile(item)), [\n        item,\n    ]);\n\n    const count = 0;\n    const badgeStatus = count > 0 ? 'success' : 'attention';\n\n    const getPriceChangeText = useGetPriceChangeText();\n    const priceChangeText = getPriceChangeText(price_type, price);\n    const inventoryLimitText = getInventoryLimitText(inventory_limit);\n\n    const handleUpdateProfileActivator = useCallback(() => {\n        dispatch(fetchProfile(item.id));\n    }, [item, dispatch]);\n\n    const updateProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleUpdateProfileActivator();\n            };\n            return (\n                <Button\n                    //@ts-ignore\n                    onClick={handler}\n                    icon={EditMajor}\n                />\n            );\n        },\n        []\n    );\n\n    const duplicateProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleUpdateProfileActivator();\n            };\n            return (\n                <Button\n                    //@ts-ignore\n                    onClick={handler}\n                    icon={DuplicateMinor}\n                />\n            );\n        },\n        []\n    );\n\n    return (\n        <div className=\"flexContainer\">\n            {/* <div className=\"flexItem flexItem__id\">\n                <TextStyle variation={'strong'}>{id}</TextStyle>\n            </div> */}\n            {noActions ? null : (\n                <div className=\"flexItem flexItem__name flexWide\">\n                    <TextStyle variation={'strong'}>{name}</TextStyle>\n                </div>\n            )}\n            <div className=\"flexItem flexItem__count flexWide forNarrowBadge\">\n                <TextStyle variation={'strong'}>\n                    <div className=\"countBadge\">\n                        Assigned to{' '}\n                        <Badge status={badgeStatus}>\n                            {count === null ? '0' : String(count)}\n                        </Badge>{' '}\n                        products\n                    </div>\n                </TextStyle>\n            </div>\n            <div className=\"flexItem flexItem__priceChangeText flexWide flexSubdued\">\n                <TextStyle variation=\"subdued\">\n                    <span className=\"subdued\">\n                        <span>Price change:</span>\n                        <span>{priceChangeText}</span>\n                    </span>\n                </TextStyle>\n            </div>\n            <div className=\"flexItem flexItem__inventoryLimitText flexWide flexSubdued\">\n                <TextStyle variation=\"subdued\">\n                    <span className=\"subdued\">\n                        <span>Inventory limit:</span>\n                        <span>{inventoryLimitText}</span>\n                    </span>\n                </TextStyle>\n            </div>\n            {noActions ? null : (\n                <div className=\"flexItem flexItem__updateProfileActivator  flexWide flexAlignEnd\">\n                    <Stack>\n                        <ModalCreateProfile\n                            duplicate\n                            activator={duplicateProfileActivator}\n                        />\n                        {is_default ? null : (\n                            <ModalCreateProfile\n                                activator={updateProfileActivator}\n                            />\n                        )}\n                        {is_default ? null : (\n                            <Button\n                                //@ts-ignore\n                                onClick={handleDelete}\n                                icon={DeleteMajor}\n                            />\n                        )}\n                    </Stack>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ProfileItemContent;\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'profiles.list';\n\nconst messages = defineMessages({\n    sortByName: {\n        id: `${PREFIX}.sort.ByName`,\n        defaultMessage: 'Name A to Z',\n    },\n    resourceNameSingular: {\n        id: `${PREFIX}.resourceName.singular`,\n        defaultMessage: 'profile',\n    },\n    resourceNamePlural: {\n        id: `${PREFIX}.resourceName.plural`,\n        defaultMessage: 'profiles',\n    },\n\n    filterPriceChange: {\n        id: `${PREFIX}.filters.PriceChange`,\n        defaultMessage: 'Price change',\n    },\n    filterPriceChangeSame: {\n        id: `${PREFIX}.filters.PriceChangeSame`,\n        defaultMessage: 'Same',\n    },\n    filterPriceChangeSpecific: {\n        id: `${PREFIX}.filters.PriceChangeSpecific`,\n        defaultMessage: 'Specific',\n    },\n    filterPriceChangeIncrease: {\n        id: `${PREFIX}.filters.PriceChangeIncrease`,\n        defaultMessage: 'Increase',\n    },\n    filterPriceChangeDecrease: {\n        id: `${PREFIX}.filters.PriceChangeDecrease`,\n        defaultMessage: 'Decrease',\n    },\n});\n\nexport default messages;\n","/* eslint-disable */\nimport {\n    Button,\n    Filters,\n    ChoiceList,\n    AppliedFilterInterface,\n    ChoiceListProps,\n} from '@shopify/polaris';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport {\n    Filter,\n    FilterAvailiability,\n    FilterKey,\n    FilterStatus,\n    PriceSettingsMode,\n    Product,\n    Profile,\n} from '@api/types';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { filtersSelector } from '@redux/selectors/profiles';\nimport messages from '../messages';\nimport { fetchProfile, fetchProfilesWithQuery } from '@redux/reducers/profiles';\nimport { fetchProfiles } from '../../../../redux/reducers/profiles';\n\nfunction isEmpty(value: unknown) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    } else {\n        return value === '' || value == null;\n    }\n}\n\ntype Props = {\n    items?: Product[];\n    profiles?: Profile[];\n};\n\nconst FilterControl: FunctionComponent<Props> = () => {\n    const filtersValues = useSelector(filtersSelector);\n    const [] = useState('DATE_MODIFIED_DESC');\n    const handleFilterChange = useCallback(\n        (filter: FilterKey, value: string) => {\n            const params = { filterValue: { filter, value } };\n            const fetch =\n                filter === Filter.Query\n                    ? fetchProfilesWithQuery\n                    : fetchProfiles;\n            dispatch(fetch(params));\n        },\n        []\n    );\n\n    const dispatch = useDispatch();\n    const { formatDictionary } = useFormat();\n\n    const msg = formatDictionary(messages);\n    //useSelector(filtersSelector);\n\n    const handleFilterAvailabilityRemove = useCallback(\n        () => handleFilterChange(Filter.Availiability, ''),\n        []\n    );\n\n    const handleFilterStatusRemove = useCallback(\n        () => handleFilterChange(Filter.Status, ''),\n        []\n    );\n\n    const handleQueryValue = useCallback(\n        (value) => handleFilterChange(Filter.Query, value),\n        []\n    );\n\n    const handleQueryValueRemove = useCallback(\n        () => handleFilterChange(Filter.Query, ''),\n        []\n    );\n    const handleClearAll = useCallback(() => {\n        handleFilterAvailabilityRemove();\n        handleQueryValueRemove();\n    }, [handleQueryValueRemove, handleFilterAvailabilityRemove]);\n\n    type Choice = ChoiceListProps['choices'][number];\n\n    const priceChangeChoices: Choice[] = [\n        {\n            label: msg.filterPriceChangeSame,\n            value: PriceSettingsMode.Same,\n        },\n        {\n            label: msg.filterPriceChangeSpecific,\n            value: PriceSettingsMode.Value,\n        },\n        {\n            label: msg.filterPriceChangeIncrease,\n            value: PriceSettingsMode.Increase,\n        },\n        {\n            label: msg.filterPriceChangeDecrease,\n            value: PriceSettingsMode.Decrease,\n        },\n    ];\n\n    //Setup Filters\n    const filters = [\n        // {\n        //     key: 'status',\n        //     label: msg.filterStatus,\n        //     filter: (\n        //         <ChoiceList\n        //             title={msg.filterStatus}\n        //             titleHidden\n        //             choices={statusChoices}\n        //             selected={[filtersValues.status]}\n        //             onChange={(value) => handleFilterChange('status', value[0])}\n        //         />\n        //     ),\n        //     shortcut: true,\n        // },\n        // {\n        //     key: 'price_change',\n        //     label: msg.filterPriceChange,\n        //     filter: (\n        //         <ChoiceList\n        //             title={msg.filterPriceChange}\n        //             titleHidden\n        //             choices={priceChangeChoices}\n        //             selected={[filtersValues.availiability]}\n        //             onChange={(value) =>\n        //                 handleFilterChange('availiability', value[0])\n        //             }\n        //         />\n        //     ),\n        //     shortcut: true,\n        // },\n    ];\n\n    function disambiguateLabel(key: FilterKey, value: string) {\n        let getLabel = (choice: Choice[]) =>\n            choice.find((c) => c.value === value)?.label;\n        switch (key) {\n            case Filter.Status: {\n                return `${getLabel(priceChangeChoices)}`;\n            }\n            case Filter.Availiability: {\n                // return `${msg.filterAvailiability}: ${getLabel(\n                //     availabilityChoices\n                // )}`;\n            }\n            default:\n                return value;\n        }\n    }\n\n    const appliedFilters: AppliedFilterInterface[] = [];\n    if (!isEmpty(filtersValues.status)) {\n        appliedFilters.push({\n            key: Filter.Status,\n            label: disambiguateLabel(Filter.Status, filtersValues.status),\n            onRemove: handleFilterStatusRemove,\n        });\n    }\n    if (!isEmpty(filtersValues.availiability)) {\n        appliedFilters.push({\n            key: Filter.Availiability,\n            label: disambiguateLabel(\n                Filter.Availiability,\n                filtersValues.availiability\n            ),\n            onRemove: handleFilterAvailabilityRemove,\n        });\n    }\n\n    const filterControl = (\n        <Filters\n            queryValue={filtersValues.query}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={handleQueryValue}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n        >\n            {/* <div style={{ paddingLeft: '8px' }}>\n                <Button onClick={() => console.log('New filter saved')}>\n                    Save\n                </Button>\n            </div> */}\n        </Filters>\n    );\n\n    // return filterControl;\n    return null;\n};\n\nexport default FilterControl;\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React from 'react';\nimport { ResourceItem } from '@shopify/polaris';\nimport { Profile } from '@api/types';\nimport ProfileItemContent from '../ProfilesList/ProfileItemContent/ProfileItemContent';\n\nconst noop = () => {};\n\nfunction ProfileItem(item: Profile) {\n    //const [selectedVar, setSelectedVar] = useState([]);\n    const { id, name } = item;\n\n    return (\n        <ResourceItem\n            id={id}\n            onClick={noop}\n            accessibilityLabel={`View details for ${name!}`}\n        >\n            <ProfileItemContent item={item} />\n        </ResourceItem>\n    );\n}\n\nexport default ProfileItem;\n","import React, {\n    FunctionComponent,\n    SyntheticEvent,\n    useCallback,\n    useMemo,\n} from 'react';\nimport { Button, Card, ResourceList, Spinner, Stack } from '@shopify/polaris';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    isLoadingSelector,\n    profilesSelector,\n    selectedProfiles,\n    sortSelector,\n} from '@redux/selectors/profiles';\nimport { Profile, SortDir, SortField } from '@api/types';\nimport messages from './messages';\nimport ProductItem from '@components/Products/ProductItem/ProductItem';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { setSort } from '@redux/reducers/products';\nimport {\n    fetchProfiles,\n    getDefaultSettingsForProfile,\n    selectProfiles,\n} from '@redux/reducers/profiles';\nimport FilterControl from './FilterControl/FilterControl';\nimport ProfileItem from '../ProfileItem/ProfileItem';\nimport { ModalSettingsProps } from '@components/Products/ModalProductSettings/ModalProductSettingsParts';\nimport ModalCreateProfile from '../ModalCreateProfile/ModalCreateProfile';\nimport { resetSettings } from '@redux/reducers/settings';\n\nconst promotedBulkActions = [\n    {\n        content: 'Delete Profiles',\n        onAction: () => console.log('Todo: implement bulk edit'),\n    },\n];\n\ninterface Props {\n    items?: Profile[];\n}\n\nconst ProfilesList: FunctionComponent<Props> = () => {\n    const handleSortChange = useCallback((selected: string) => {\n        dispatch(setSort(JSON.parse(selected)));\n    }, []);\n\n    const dispatch = useDispatch();\n    const { formatDictionary } = useFormat();\n\n    const msg = formatDictionary(messages);\n\n    const profiles = useSelector(profilesSelector);\n\n    const selectedItems = useSelector(selectedProfiles);\n    const isLoading = useSelector(isLoadingSelector);\n    const sortValue = useSelector(sortSelector);\n\n    const setSelectedProds = useCallback((productsIds) => {\n        dispatch(selectProfiles(productsIds));\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(fetchProfiles());\n\n        return () => {\n            dispatch(resetSettings());\n        };\n    }, []);\n\n    const sortOptions = React.useRef([\n        // {\n        //     label: msg.sortByName,\n        //     value: JSON.stringify({ field: SortField.Title, dir: SortDir.Asc }),\n        // },\n    ]);\n\n    const handleAddProfileActivator = useCallback(() => {\n        dispatch(getDefaultSettingsForProfile());\n    }, [dispatch]);\n\n    const createProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleAddProfileActivator();\n            };\n\n            return (\n                <Button\n                    primary\n                    //@ts-ignore\n                    onClick={handler}\n                >\n                    Add Profile\n                </Button>\n            );\n        },\n        []\n    );\n\n    const alternateTool = useMemo(\n        () => <ModalCreateProfile activator={createProfileActivator} />,\n        [sortOptions, sortValue]\n    );\n\n    const content = (\n        <Card>\n            <Card.Section>\n                <ResourceList\n                    alternateTool={alternateTool}\n                    filterControl={profiles.length && <FilterControl />}\n                    // selectedItems={selectedItems}\n                    // onSelectionChange={setSelectedProds}\n                    // selectable={false}\n                    loading={isLoading}\n                    // promotedBulkActions={promotedBulkActions}\n                    sortOptions={sortOptions.current}\n                    sortValue={JSON.stringify(sortValue)}\n                    onSortChange={handleSortChange}\n                    resourceName={{\n                        singular: msg.resourceNameSingular,\n                        plural: msg.resourceNamePlural,\n                    }}\n                    items={profiles}\n                    renderItem={ProfileItem}\n                    // emptySearchState={alternateTool}\n                    emptyState={alternateTool}\n                />\n            </Card.Section>\n        </Card>\n    );\n    return (\n        <div className=\"profilesList__wrapper\">\n            {profiles ? (\n                content\n            ) : (\n                <Stack distribution=\"center\">\n                    <Spinner\n                        accessibilityLabel=\"Spinner example\"\n                        size=\"large\"\n                        color=\"teal\"\n                    />\n                </Stack>\n            )}\n        </div>\n    );\n};\n\nexport default ProfilesList;\n"],"sourceRoot":""}