{"version":3,"sources":["redux/selectors/products.ts","components/Profiles/ModalCreateProfile/messages.ts","components/Profiles/ModalCreateProfile/ModalCreateProfile.tsx","components/Products/ModalProductSettings/ModalProductSettings.tsx","components/Profiles/ProfilesList/ProfileItemContent/ProfileItemContent.tsx","components/Products/ProductsList/messages.ts","components/ui-kit/SwitchButton/SwitchButton.tsx","../node_modules/@shopify/polaris-icons/dist/icons/CircleDisableMinor.svg.mjs","../node_modules/@shopify/polaris-icons/dist/icons/SettingsMajor.svg.mjs","components/Products/PreorderStatusBadge/messages.ts","components/Products/PreorderStatusBadge/PreorderStatusBadge.tsx","components/Products/ProductItemContent/messages.ts","components/ui-kit/PopoverWithActions/PopoverWithActions.tsx","components/ui-kit/PopoverWithChoiceList/PopoverWithChoiceList.tsx","components/Products/AssignProfile/AssignProfile.tsx","components/Products/ProductItemContent/ProductItemContent.tsx","components/Products/ProductsList/CollapsebleVariants/CollapsebleVariants.tsx","components/Products/ProductItem/ProductItem.tsx","components/Products/ProductsList/FilterControl/FilterControl.tsx","components/Products/ModalAssignProfile/messages.ts","components/Products/ModalAssignProfile/ModalAssignProfile.tsx","components/Products/ProductsList/ProductsList.tsx"],"names":["selectProducts","state","products","productsSelector","createSelector","productsById","sub","variantsById","Object","keys","map","id","variantsItems","variants","product","different","differentProfile","result","reduce","acc","variant","isDefaultVariant","enabled","profile_id","selectedProducts","isLoadingSelector","loading","settingsModalSelector","settingsModal","assignProfileModalSelector","assignProfileModal","isSettingsModalOpenStateSelector","settings","error","open","pageInfoSelector","pageInfo","sortSelector","sort","filtersSelector","filters","availiability","status","query","useItemSelector","isVariant","itemSelector","useMemo","find","itemSelectorCreator","useSelector","useUnfoldedSelector","unfoldedSelector","unfoldedProductsIds","ids","includes","unfoldedSelectorCreator","useSelectedVariantSelectorCreator","productId","selectedSelector","variantsIds","selectedVariants","filter","variantId","selectedVariantSelectorCreator","PREFIX","aloneMessages","defineMessages","createProfileTitle","defaultMessage","updateProfileTitle","copyOfProfileTitle","newProfileTitle","ModalCreateProfile","props","dispatch","useDispatch","fmt","useFormat","profileModal","profileModalSelector","appSettings","appSettingsSelector","handleProfileActivator","useCallback","openProfileModal","handleSaveProfile","updateProfile","duplicate","data","createProfileActivator","React","onClick","activator","createTitle","updateTitle","title","name","profileModalData","inventory_limit","Number","ModalProductSettings","onSubmit","forSettings","priceShopify","preorderStatusFromList","footer","useState","active","setActive","useEffect","setSettings","msg","formatDictionary","messages","useProductSettingsForm","resetForm","handleOnSubmit","anyError","form","handleClose","openSettingsModal","handleModalActivation","onClose","withError","primaryAction","content","saveAction","onAction","disabled","secondaryActions","cancelAction","Section","vertical","Item","ProfileItemContent","item","noActions","price_type","is_default","price","price_change_value","handleDelete","deleteProfile","priceChangeText","getPriceString","currencySymbolSelector","value","prefix","postfix","PriceType","Same","Math","abs","Amount","Percent","String","SpecificValue","useGetPriceChangeText","getPriceChangeText","inventoryLimitText","getInventoryLimitText","handleUpdateProfileActivator","fetchProfile","updateProfileActivator","e","stopPropagation","icon","EditMajor","duplicateProfileActivator","DuplicateMinor","className","variation","DeleteMajor","sortByName","inventoryLeftAscending","resourceNameSingular","resourceNamePlural","filterStatus","filterStatusActivated","filterStatusScheduled","filterPreordered","filterAvailiability","filterAvailiabilityInStock","filterAvailiabilitySoldOut","bulkActionsAssignProfile","bulkActionsUnassignProfile","bulkActionsEnable","bulkActionsDisable","SwitchButton","onColor","onChange","checked","type","style","background","htmlFor","_ref","createElement","d","SvgCircleDisableMinor","assign","viewBox","fillRule","SvgSettingsMajor","activatingOn","PreorderStatusBadge","text","preorder_status","Status","Enabled","preorder_activating_start_date","time","format","parseISO","Activated","Badge","productTitle","variantTitle","PopoverWithActions","PopoverWithChoiceList","callback","valueField","labelField","disclosure","renderAfter","selection","buttonText","tooltipText","selected","setSelected","toggleActive","handlePopoverClose","handleSelection","items","values","options","label","length","selectedItem","tooltip","Tooltip","preferredPosition","Button","fullWidth","CustomPopover","Popover","ChoiceList","choices","AssignProfile","profiles","profilesSelector","activatorCallback","useRef","current","Activator","plain","createProfile","marginTop","handleProfileSelection","unassignProfile","assignProfile","Boolean","footerStyle","color","height","display","alignItems","justifyContent","ProductItemContent","variantsExist","images","defaultVariant","price_shopify","productSettings","unfolded","handlePropagation","handleCollapse","setUnfolded","statusDisabled","PreorderStatus","Disabled","handleToggle","setStatus","handleSaveSettings","product_id","handleSettingsActivator","undefined","fetchProductSettings","imageSrc","src","image","Icon","source","CircleDisableMinor","priceClasses","classNames","profileClasses","settingsActivator","primary","SettingsMajor","profileModalTitle","TextStyle","ariaExpanded","ariaControls","ChevronUpMinor","ChevronDownMinor","CollapsibleVariants","handleSelect","selectVariants","variantsContainerClasses","Collapsible","ResourceList","selectable","selectedItems","onSelectionChange","resourceName","singular","plural","renderItem","url","getProductUrl","ResourceItem","ProductItem","firstVariant","accessibilityLabel","isEmpty","Array","isArray","PopoverFilterControl","filtersValues","handleFilterChange","params","filterValue","fetch","Filter","Query","fetchProductsWithQuery","fetchProducts","availabilityChoices","FilterStatus","Scheduled","FilterAvailiability","InStock","SoldOut","Preordered","FilterControl","handleFilterAvailabilityRemove","Availiability","handleFilterStatusRemove","handleQueryValueRemove","handleClearAll","statusChoices","key","titleHidden","shortcut","disambiguateLabel","getLabel","choice","c","appliedFilters","push","onRemove","Filters","queryValue","onQueryChange","onQueryClear","onClearAll","assignProfileTitleToProduct","assignProfileTitle","ModalAssignProfile","closeAssignProfileModal","handleChange","_checked","newValue","Modal","Card","profile","Stack","spacing","RadioButton","marginLeft","ProductsList","handleSortChange","setSort","JSON","parse","selectedProds","isLoading","sortValue","promotedBulkActions","openAssignProfileModal","bulkEnable","usePromotedBulkActions","setSelectedProds","productsIds","handlePaging","direction","setPage","sortOptions","stringify","field","SortField","Title","dir","SortDir","Asc","Inventory","paging","distribution","ButtonGroup","segmented","hasPreviousPage","ArrowLeftMinor","PageDirection","Before","hasNextPage","ArrowRightMinor","After","marginRight","Select","labelInline","filterControl","all","onSortChange","Spinner","size"],"mappings":"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","file":"static/js/8.f11e6480.chunk.js","sourcesContent":["import { Product, Variant } from '@api/types';\nimport { isDefaultVariant } from '@components/utils/functions';\nimport { RootState } from '@redux/reducers/rootReducer';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst selectProducts = (state: RootState) => state.products;\n\nexport const productsSelector = createSelector(\n    (state: RootState) => state.products.productsById,\n    (sub) => sub.products.variantsById,\n    (productsById, variantsById) => {\n        return Object.keys(productsById).map((id) => {\n            const { variants: variantsItems, ...product } = productsById[id];\n\n            let different = false;\n            let differentProfile = false;\n            const result = { ...product };\n            const variants = variantsItems.reduce((acc, id) => {\n                const variant = variantsById[id];\n                acc[id] = variant;\n                if (!isDefaultVariant(variant)) {\n                    different =\n                        different || variant.enabled !== product.enabled;\n                }\n\n                differentProfile =\n                    differentProfile ||\n                    variant.profile_id !== product.profile_id;\n\n                return acc;\n            }, {} as Record<string, Variant>);\n\n            return { variants, different, differentProfile, ...result };\n        }) as Product[];\n    }\n);\n\nexport const selectedProducts = createSelector(\n    selectProducts,\n    (sub) => sub.selectedProducts\n);\n\nexport const isLoadingSelector = createSelector(\n    selectProducts,\n    (sub) => sub.loading\n);\n\nexport const settingsModalSelector = createSelector(\n    selectProducts,\n    (sub) => sub.settingsModal\n);\n\nexport const assignProfileModalSelector = createSelector(\n    selectProducts,\n    (sub) => sub.assignProfileModal\n);\nexport const isSettingsModalLoadingSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.loading\n);\nexport const isSettingsModalErrorsSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.error\n);\nexport const isSettingsModalOpenStateSelector = createSelector(\n    settingsModalSelector,\n    (settings) => settings.open\n);\n\nexport const pageInfoSelector = createSelector(\n    selectProducts,\n    (sub) => sub.pageInfo\n);\n\nexport const sortSelector = createSelector(selectProducts, (sub) => sub.sort);\n\nexport const filtersSelector = createSelector(\n    (state: RootState) => state.products.filters.availiability,\n    (state: RootState) => state.products.filters.status,\n    (state: RootState) => state.products.filters.query,\n    (availiability, status, query) => ({ availiability, status, query })\n);\n\nexport const itemSelectorCreator = (id: string, isVariant: boolean) =>\n    createSelector(\n        productsSelector,\n        (sub) => sub.products.variantsById,\n        (products, variantsById) => {\n            if (isVariant) {\n                return variantsById[id];\n            } else {\n                return products.find((product) => product.id === id)!;\n            }\n        }\n    );\n\nexport const useItemSelector = (id: string, isVariant: boolean) => {\n    const itemSelector = useMemo(() => itemSelectorCreator(id, isVariant), [\n        id,\n        isVariant,\n    ]);\n    const item = useSelector(itemSelector);\n\n    return item;\n};\n\nexport const unfoldedSelectorCreator = (id: string) =>\n    createSelector(\n        (state: RootState) => state.products.unfoldedProductsIds,\n        (ids) => ids.includes(id)\n    );\n\nexport const useUnfoldedSelector = (id: string) => {\n    const unfoldedSelector = useMemo(() => unfoldedSelectorCreator(id), [id]);\n    const unfolded = useSelector(unfoldedSelector);\n\n    return unfolded;\n};\n\nexport const selectedVariantSelectorCreator = (productId: string) =>\n    createSelector(\n        (state: RootState) => state.products.productsById,\n        (state: RootState) => state.products.selectedProducts.variantsIds,\n        (productsById, selectedVariants) => {\n            const productVariantsIds = productsById[productId].variants;\n            return productVariantsIds.filter((variantId) =>\n                selectedVariants.includes(variantId)\n            );\n        }\n    );\n\nexport const useSelectedVariantSelectorCreator = (productId: string) => {\n    const selectedSelector = useMemo(\n        () => selectedVariantSelectorCreator(productId),\n        [productId]\n    );\n    const selected = useSelector(selectedSelector);\n\n    return selected;\n};\n\n// export const selectedVariantSelectorCreator = (productId: string) =>\n//     createSelector(\n//         (state: RootState) => state.products.productsById,\n//         (state: RootState) => state.products.selectedProducts.variantsIds,\n//         (productsById, selectedVariants) => {\n//             const productVariantsIds = productsById[productId].variants;\n//             return productVariantsIds.filter((variantId) =>\n//                 selectedVariants.includes(variantId)\n//             );\n//         }\n//     );\n\n// export const useSelectorCreator = (productId: string) => {\n//     const selectedSelector = useMemo(\n//         () => selectedVariantSelectorCreator(productId),\n//         [productId]\n//     );\n//     const selected = useSelector(selectedSelector);\n\n//     return selected;\n// };\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.list.item';\n\nexport const aloneMessages = defineMessages({\n    createProfileTitle: {\n        id: `${PREFIX}.createProfileTitle`,\n        defaultMessage: 'Add Profile',\n    },\n    updateProfileTitle: {\n        id: `${PREFIX}.updateProfileTitle`,\n        defaultMessage: 'Profile {title} Settings',\n    },\n    copyOfProfileTitle: {\n        id: `${PREFIX}.copyOfProfileTitle`,\n        defaultMessage: 'Copy of ',\n    },\n    newProfileTitle: {\n        id: `${PREFIX}.newProfileTitle`,\n        defaultMessage: 'New Profile',\n    },\n});\n","/*eslint-disable*/\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { openSettingsModal } from '@redux/reducers/products';\nimport { ModalSettingsProps } from '@components/Products/ModalProductSettings/ModalProductSettingsParts';\nimport ModalProductSettings from '@components/Products/ModalProductSettings/ModalProductSettings';\nimport { profileModalSelector } from '@redux/selectors/profiles';\nimport { ProductSettingsDTO, Profile, ProfileDTO } from '@api/types';\nimport { openProfileModal, updateProfile } from '@redux/reducers/profiles';\nimport { aloneMessages } from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { appSettingsSelector } from '@redux/selectors/settings';\n\ntype Props = Pick<ModalSettingsProps, 'activator'> & {\n    item?: Profile;\n    duplicate?: boolean;\n};\n\nexport default function ModalCreateProfile(props: Props) {\n    const dispatch = useDispatch();\n    const { fmt } = useFormat();\n    const profileModal = useSelector(profileModalSelector);\n    const appSettings = useSelector(appSettingsSelector);\n\n    const handleProfileActivator = useCallback(() => {\n        dispatch(openProfileModal(true));\n    }, [dispatch]);\n\n    const handleSaveProfile = useCallback(\n        (settings: ProfileDTO) => {\n            // const { start_date, end_date, ...rest } = settings;\n            dispatch(\n                updateProfile({\n                    ...settings,\n                    id: props.duplicate ? '' : profileModal.data?.id ?? '',\n                })\n            );\n        },\n        [profileModal, props.duplicate]\n    );\n\n    const createProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = () => {\n                onClick!();\n                handleProfileActivator();\n            };\n            return <props.activator onClick={handler} />;\n        },\n        []\n    );\n\n    const createTitle = fmt(aloneMessages.createProfileTitle);\n\n    const updateTitle = fmt(aloneMessages.updateProfileTitle, {\n        title: profileModal.data ? `\"${profileModal.data?.name}\"` : '',\n    });\n\n    const title = profileModal.loading\n        ? updateTitle\n        : profileModal.data && !props.duplicate\n        ? updateTitle\n        : createTitle;\n\n    const profileModalData: typeof profileModal.data = profileModal.data\n        ? { ...profileModal.data! }\n        : {\n              ...appSettings,\n              name: fmt(aloneMessages.newProfileTitle),\n              inventory_limit: Number(appSettings?.inventory_limit ?? 0),\n          };\n    if (props.duplicate && profileModal.data && profileModal.data.name) {\n        profileModalData.name =\n            fmt(aloneMessages.copyOfProfileTitle) + profileModalData.name;\n    }\n\n    return (\n        <ModalProductSettings\n            activator={createProfileActivator}\n            onSubmit={handleSaveProfile}\n            {...profileModal}\n            settings={profileModalData}\n            title={title}\n        />\n    );\n}\n","/*eslint-disable*/\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Modal, Stack } from '@shopify/polaris';\nimport { useFormat } from '@contexts/LocaleContext';\nimport messages from './messages';\nimport './modal-product-settings.styles.scss';\nimport { isSettingsModalOpenStateSelector } from '@redux/selectors/products';\nimport {\n    FooterNode,\n    ModalSettingsProps,\n    TitleNode,\n} from './ModalProductSettingsParts';\nimport { openSettingsModal } from '@redux/reducers/products';\nimport useProductSettingsForm from './productSettingsFormHook';\n\nexport default function ModalProductSettings(props: ModalSettingsProps) {\n    const {\n        loading,\n        settings,\n        onSubmit,\n        forSettings,\n        title,\n        isVariant,\n        priceShopify,\n        preorderStatusFromList,\n        footer,\n        error,\n    } = props;\n\n    const [active, setActive] = useState(false);\n    const open = useSelector(isSettingsModalOpenStateSelector);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!open) {\n            setActive(false);\n        }\n    }, [open]);\n\n    useEffect(() => {\n        setSettings(settings);\n    }, [settings]);\n\n    const { formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n\n    const {\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        form,\n        setSettings,\n    } = useProductSettingsForm({\n        onSubmit,\n        settings,\n        error,\n        forSettings,\n        isVariant,\n        priceShopify,\n        preorderStatusFromList,\n    });\n\n    const handleClose = () => {\n        resetForm();\n        dispatch(openSettingsModal(false));\n        handleModalActivation();\n    };\n\n    const handleModalActivation = useCallback(() => setActive(!active), [\n        active,\n    ]);\n    const activator = <props.activator onClick={handleModalActivation} />;\n\n    return (\n        <Modal\n            activator={activator}\n            open={active}\n            loading={loading}\n            onClose={handleClose}\n            title={<TitleNode title={title} withError={anyError} />}\n            footer={footer}\n            primaryAction={{\n                content: msg.saveAction,\n                onAction: handleOnSubmit,\n                disabled: loading,\n            }}\n            secondaryActions={[\n                {\n                    content: msg.cancelAction,\n                    onAction: handleClose,\n                    disabled: loading,\n                },\n            ]}\n        >\n            <Modal.Section>\n                <Stack vertical>\n                    <Stack.Item>{form}</Stack.Item>\n                    <Stack.Item></Stack.Item>\n                </Stack>\n            </Modal.Section>\n        </Modal>\n    );\n}\n","import React, { SyntheticEvent, useCallback } from 'react';\nimport { TextStyle, Stack, Button, Badge } from '@shopify/polaris';\nimport { PriceType, Profile } from '@api/types';\nimport { DeleteMajor, DuplicateMinor, EditMajor } from '@shopify/polaris-icons';\nimport '@components/Products/ProductItemContent/products-item-content.styles.scss';\nimport ModalCreateProfile from '@components/Profiles/ModalCreateProfile/ModalCreateProfile';\nimport { ModalSettingsProps } from '@components/Products/ModalProductSettings/ModalProductSettingsParts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteProfile, fetchProfile } from '@redux/reducers/profiles';\nimport './profile-item-content.styles.scss';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { currencySymbolSelector } from '@redux/selectors/app';\n\ntype Props = {\n    item: Profile;\n    noActions?: true;\n};\n\nfunction useGetPriceChangeText() {\n    const { getPriceString } = useFormat();\n    const currencySymbol = useSelector(currencySymbolSelector);\n\n    function getPriceChangeText(\n        price_type: Profile['price_type'],\n        price: Profile['price_change_value']\n    ) {\n        let value = price && Number(price);\n        let prefix = 'Keep Same';\n        let postfix = '';\n\n        if (!value && price_type !== PriceType.Same && value !== 0) {\n            return 'Error';\n        }\n\n        if (value || value === 0) {\n            switch (true) {\n                case value < 0: {\n                    prefix = 'Decrease by';\n                    value = Math.abs(value);\n                    break;\n                }\n                case value > 0: {\n                    prefix = 'Increase by';\n                    break;\n                }\n            }\n\n            switch (price_type) {\n                case PriceType.Amount:\n                    postfix = getPriceString(value);\n                    break;\n                case PriceType.Percent:\n                    postfix = ' ' + String(value) + '%';\n                    break;\n                case PriceType.SpecificValue:\n                    prefix = `Set to ${getPriceString(value)}`;\n                    postfix = '';\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        return `${prefix} ${postfix}`;\n    }\n\n    return getPriceChangeText;\n}\n\nfunction getInventoryLimitText(inventory_limit: Profile['inventory_limit']) {\n    if (inventory_limit) {\n        return `Max ${inventory_limit}`;\n    }\n\n    return 'Unlimited';\n}\nfunction ProfileItemContent({ item, noActions }: Props) {\n    const {\n        id,\n        name,\n        inventory_limit,\n        price_type,\n        is_default,\n        price_change_value: price,\n    } = item;\n    const dispatch = useDispatch();\n\n    const handleDelete = useCallback(() => dispatch(deleteProfile(item)), [\n        item,\n    ]);\n\n    const count = 0;\n    const badgeStatus = count > 0 ? 'success' : 'attention';\n\n    const getPriceChangeText = useGetPriceChangeText();\n    const priceChangeText = getPriceChangeText(price_type, price);\n    const inventoryLimitText = getInventoryLimitText(inventory_limit);\n\n    const handleUpdateProfileActivator = useCallback(() => {\n        dispatch(fetchProfile(item.id));\n    }, [item, dispatch]);\n\n    const updateProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleUpdateProfileActivator();\n            };\n            return (\n                <Button\n                    //@ts-ignore\n                    onClick={handler}\n                    icon={EditMajor}\n                />\n            );\n        },\n        []\n    );\n\n    const duplicateProfileActivator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleUpdateProfileActivator();\n            };\n            return (\n                <Button\n                    //@ts-ignore\n                    onClick={handler}\n                    icon={DuplicateMinor}\n                />\n            );\n        },\n        []\n    );\n\n    return (\n        <div className=\"flexContainer\">\n            {/* <div className=\"flexItem flexItem__id\">\n                <TextStyle variation={'strong'}>{id}</TextStyle>\n            </div> */}\n            {noActions ? null : (\n                <div className=\"flexItem flexItem__name flexWide\">\n                    <TextStyle variation={'strong'}>{name}</TextStyle>\n                </div>\n            )}\n            <div className=\"flexItem flexItem__count flexWide forNarrowBadge\">\n                <TextStyle variation={'strong'}>\n                    <div className=\"countBadge\">\n                        Assigned to{' '}\n                        <Badge status={badgeStatus}>\n                            {count === null ? '0' : String(count)}\n                        </Badge>{' '}\n                        products\n                    </div>\n                </TextStyle>\n            </div>\n            <div className=\"flexItem flexItem__priceChangeText flexWide flexSubdued\">\n                <TextStyle variation=\"subdued\">\n                    <span className=\"subdued\">\n                        <span>Price change:</span>\n                        <span>{priceChangeText}</span>\n                    </span>\n                </TextStyle>\n            </div>\n            <div className=\"flexItem flexItem__inventoryLimitText flexWide flexSubdued\">\n                <TextStyle variation=\"subdued\">\n                    <span className=\"subdued\">\n                        <span>Inventory limit:</span>\n                        <span>{inventoryLimitText}</span>\n                    </span>\n                </TextStyle>\n            </div>\n            {noActions ? null : (\n                <div className=\"flexItem flexItem__updateProfileActivator  flexWide flexAlignEnd\">\n                    <Stack>\n                        <ModalCreateProfile\n                            duplicate\n                            activator={duplicateProfileActivator}\n                        />\n                        {is_default ? null : (\n                            <ModalCreateProfile\n                                activator={updateProfileActivator}\n                            />\n                        )}\n                        {is_default ? null : (\n                            <Button\n                                //@ts-ignore\n                                onClick={handleDelete}\n                                icon={DeleteMajor}\n                            />\n                        )}\n                    </Stack>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ProfileItemContent;\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.list';\n\nconst messages = defineMessages({\n    sortByName: {\n        id: `${PREFIX}.sort.ByName`,\n        defaultMessage: 'Name A to Z',\n    },\n    inventoryLeftAscending: {\n        id: `${PREFIX}.sort.ByInventoryLeftAscending`,\n        defaultMessage: 'Inventory Left ascending',\n    },\n    resourceNameSingular: {\n        id: `${PREFIX}.resourceName.singular`,\n        defaultMessage: 'product',\n    },\n    resourceNamePlural: {\n        id: `${PREFIX}.resourceName.plural`,\n        defaultMessage: 'products',\n    },\n\n    filterStatus: {\n        id: `${PREFIX}.filters.Status`,\n        defaultMessage: 'Pre-order Status',\n    },\n    filterStatusActivated: {\n        id: `${PREFIX}.filters.StatusActivated`,\n        defaultMessage: 'Pre-order Activated',\n    },\n    filterStatusScheduled: {\n        id: `${PREFIX}.filters.StatusScheduled`,\n        defaultMessage: 'Pre-order Scheduled',\n    },\n    filterPreordered: {\n        id: `${PREFIX}.filters.Preordered`,\n        defaultMessage: 'Currently Active Pre-Order Product',\n    },\n    filterAvailiability: {\n        id: `${PREFIX}.filters.Availiability`,\n        defaultMessage: 'Availiability',\n    },\n    filterAvailiabilityInStock: {\n        id: `${PREFIX}.filters.AvailiabilityInStock`,\n        defaultMessage: 'In Stock',\n    },\n    filterAvailiabilitySoldOut: {\n        id: `${PREFIX}.filters.AvailiabilitySoldOut`,\n        defaultMessage: 'Sold Out',\n    },\n    bulkActionsAssignProfile: {\n        id: `${PREFIX}.bulkActions.AssignProfile`,\n        defaultMessage: 'Assign Profile',\n    },\n    bulkActionsUnassignProfile: {\n        id: `${PREFIX}.bulkActions.AssignProfile`,\n        defaultMessage: 'Unassign Profile',\n    },\n    bulkActionsEnable: {\n        id: `${PREFIX}.bulkActions.Enable`,\n        defaultMessage: 'Enable Pre-Order',\n    },\n    bulkActionsDisable: {\n        id: `${PREFIX}.bulkActions.Disable`,\n        defaultMessage: 'Disable Pre-Order',\n    },\n});\n// type t = typeof messages;\n// type m = typeof messages['sortByName'];\n// const msg = {} as t;\n// for (const key in messages as { [K in keyof t]: t[K] }) {\n//     if (Object.prototype.hasOwnProperty.call(messages, key)) {\n//         msg[key] = messages[key] as m;\n//     }\n// }\n// export { msg };\nexport default messages;\n","import React from 'react';\nimport './switch-button.css';\n\ninterface Props {\n    enabled: boolean;\n    id: string;\n    onColor: string;\n    onChange: () => void;\n}\n\nconst SwitchButton = ({ enabled, id, onColor, onChange }: Props) => {\n    return (\n        <div className=\"react-switch-box\">\n            <input\n                checked={enabled}\n                onChange={onChange}\n                className=\"react-switch-checkbox\"\n                id={`react-switch-new-` + id}\n                type=\"checkbox\"\n            />\n            <label\n                style={{ background: enabled ? onColor : '' }}\n                className=\"react-switch-label\"\n                htmlFor={`react-switch-new-` + id}\n            >\n                <span className={`react-switch-button`} />\n            </label>\n        </div>\n    );\n};\n\nexport default SwitchButton;\n","import React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M4 10c0-1.294.416-2.49 1.115-3.471l8.356 8.356A5.961 5.961 0 0 1 10 16c-3.309 0-6-2.691-6-6zm12 0c0 1.294-.416 2.49-1.115 3.471L6.529 5.115A5.961 5.961 0 0 1 10 4c3.309 0 6 2.691 6 6zM2 10c0 4.411 3.589 8 8 8s8-3.589 8-8-3.589-8-8-8-8 3.589-8 8z\"\n});\n\nvar SvgCircleDisableMinor = function SvgCircleDisableMinor(props) {\n  return React.createElement(\"svg\", Object.assign({\n    viewBox: \"0 0 20 20\"\n  }, props), _ref);\n};\n\nexport { SvgCircleDisableMinor as S };\n","import React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M9.027 0a1 1 0 0 0-.99.859l-.37 2.598A6.993 6.993 0 0 0 5.742 4.57l-2.437-.98a1 1 0 0 0-1.239.428L.934 5.981a1 1 0 0 0 .248 1.287l2.066 1.621a7.06 7.06 0 0 0 0 2.222l-2.066 1.621a1 1 0 0 0-.248 1.287l1.132 1.962a1 1 0 0 0 1.239.428l2.438-.979a6.995 6.995 0 0 0 1.923 1.113l.372 2.598a1 1 0 0 0 .99.859h2.265a1 1 0 0 0 .99-.859l.371-2.598a6.995 6.995 0 0 0 1.924-1.112l2.438.978a1 1 0 0 0 1.238-.428l1.133-1.962a1 1 0 0 0-.249-1.287l-2.065-1.621a7.063 7.063 0 0 0 0-2.222l2.065-1.621a1 1 0 0 0 .249-1.287l-1.133-1.962a1 1 0 0 0-1.239-.428l-2.437.979a6.994 6.994 0 0 0-1.924-1.113L12.283.86a1 1 0 0 0-.99-.859H9.027zm1.133 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6z\"\n});\n\nvar SvgSettingsMajor = function SvgSettingsMajor(props) {\n  return React.createElement(\"svg\", Object.assign({\n    viewBox: \"0 0 20 20\"\n  }, props), _ref);\n};\n\nexport { SvgSettingsMajor as S };\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'preorderStatusBadge';\n\nexport const aloneMessages = defineMessages({\n    activatingOn: {\n        id: `${PREFIX}.activatingOn`,\n        defaultMessage: 'Activating on {time}',\n    },\n});\n\nconst messages = defineMessages({\n    active: {\n        id: `${PREFIX}.active`,\n        defaultMessage: 'Pre-order Active',\n    },\n    enabled: {\n        id: `${PREFIX}.enabled`,\n        defaultMessage: 'Pre-order Enabled',\n    },\n    disabled: {\n        id: `${PREFIX}.disabled`,\n        defaultMessage: 'Pre-order Disabled',\n    },\n    different: {\n        id: `${PREFIX}.different`,\n        defaultMessage: 'Different for Variants',\n    },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Badge, BadgeProps } from '@shopify/polaris';\nimport { PreorderStatus as Status, Product, Variant } from '@api/types';\nimport messages, { aloneMessages } from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport format from 'date-fns/esm/format';\nimport parseISO from 'date-fns/esm/parseISO';\n\ntype Props = { item: Product | Variant; different?: boolean };\n\nfunction PreorderStatusBadge({ item, different }: Props) {\n    let status: BadgeProps['status'];\n    let text = '';\n    const props = { status };\n\n    const { fmt, formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n\n    if (typeof different !== 'undefined' && different) {\n        text = msg.different;\n        props.status = 'warning';\n    } else if (!item.enabled) {\n        text = msg.disabled;\n    } else {\n        switch (item.preorder_status) {\n            case Status.Enabled:\n                if (item.preorder_activating_start_date) {\n                    props.status = 'attention';\n                    text = fmt(aloneMessages.activatingOn, {\n                        time: format(\n                            parseISO(item.preorder_activating_start_date),\n                            // 'MMM d, Y | H:mm a'\n                            'MMM d, Y'\n                        ),\n                    });\n                } else {\n                    text = msg.enabled;\n                    props.status = 'info';\n                }\n                break;\n            case Status.Activated:\n                // props.status = 'attention';\n                // if (item.preorder_activating_start_date) {\n                //     text = fmt(aloneMessages.activatingOn, {\n                //         time: format(\n                //             parseISO(item.preorder_activating_start_date),\n                //             'MMM d, Y | H:mm a'\n                //         ),\n                //     });\n                // } else {\n                //     text = msg.active;\n                //     props.status = 'success';\n                // }\n                text = msg.active;\n                props.status = 'success';\n                break;\n\n            default:\n                text = msg.disabled;\n                break;\n        }\n    }\n\n    return <Badge {...props}>{text}</Badge>;\n}\n\nexport default PreorderStatusBadge;\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.list.item';\n\nexport const aloneMessages = defineMessages({\n    productTitle: {\n        id: `${PREFIX}.productTitle`,\n        defaultMessage: ' Product \"{title}\" Pre-order Settings',\n    },\n    variantTitle: {\n        id: `${PREFIX}.variantTitle`,\n        defaultMessage: ' Variant \"{title}\" Pre-order Settings',\n    },\n});\n","import {\n    Button,\n    Popover,\n    ChoiceList,\n    Spinner,\n    ButtonProps,\n    ChoiceListProps,\n    TextField,\n    TextStyle,\n    TextStyleProps,\n} from '@shopify/polaris';\nimport React, { useCallback, useState, useEffect } from 'react';\n\ninterface Props<T> {\n    items: T[] | null;\n    callback: (item: string[]) => void;\n    valueField?: string;\n    labelField?: string;\n    disabled: boolean;\n    title: string;\n    disclosure: ButtonProps['disclosure'];\n    icon?: ButtonProps['icon'];\n}\n\nfunction PopoverWithActions<T>(props: Props<T>) {\n    const {\n        callback,\n        valueField = '',\n        labelField = '',\n        disabled,\n        title,\n        disclosure,\n        icon,\n    } = props;\n    const [selected, setSelected] = useState<string[]>([]);\n    useEffect(() => {\n        if (callback) {\n            callback(selected);\n        }\n    }, [selected]);\n    const [active, setActive] = useState(false);\n    const toggleActive = useCallback(() => {\n        setActive((active) => !active);\n    }, []);\n    const handleSelection = useCallback((selected: string[], name: string) => {\n        setSelected(selected);\n    }, []);\n    const items = props.items ? Object.values(props.items) : [];\n\n    const choices: ChoiceListProps['choices'] = items.map((item) => {\n        const result = {\n            value: (item[valueField ?? ''] || item['id']) as string,\n            label: (item[labelField ?? ''] || item['name']) as string,\n        };\n        return result;\n    });\n\n    let variation: TextStyleProps['variation'];\n    let text: string;\n    if (selected.length && items.length) {\n        const selectedItem = items.find(\n            (item) => item[valueField] === selected[0]\n        );\n        text = selectedItem ? (selectedItem[labelField] as string) : 'Error';\n    } else {\n        variation = 'subdued';\n        text = title;\n    }\n\n    const activator = (\n        <Button onClick={toggleActive} disclosure={disclosure} icon={icon}>\n            {text}\n        </Button>\n    );\n\n    return (\n        <Popover\n            active={!disabled && active}\n            activator={activator}\n            onClose={toggleActive}\n        >\n            <ChoiceList\n                title=\"\"\n                onChange={handleSelection}\n                choices={choices}\n                selected={selected}\n                disabled={disabled}\n            />\n        </Popover>\n    );\n}\nexport default PopoverWithActions;\n","import {\n    Button,\n    Popover,\n    ChoiceList,\n    Spinner,\n    ButtonProps,\n    ChoiceListProps,\n    TextField,\n    TextStyle,\n    TextStyleProps,\n    Tooltip,\n} from '@shopify/polaris';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport CustomPopover from '@components/utils/CustomPopover';\n\ninterface Props<T> {\n    items: T[] | null;\n    callback: (item: string[]) => void;\n    valueField?: string;\n    labelField?: string;\n    disabled: boolean;\n    title: string;\n    disclosure: ButtonProps['disclosure'];\n    icon?: ButtonProps['icon'];\n    renderAfter?: () => React.ReactNode;\n    selection?: string[];\n    buttonText?: string;\n    tooltipText?: string | null;\n}\n\nfunction PopoverWithChoiceList<T>(props: Props<T>) {\n    const {\n        callback,\n        valueField = 'id',\n        labelField = 'name',\n        disabled,\n        title,\n        disclosure,\n        icon,\n        renderAfter,\n        selection,\n        buttonText,\n        tooltipText,\n    } = props;\n    const [selected, setSelected] = useState<string[]>(selection ?? ['']);\n    useEffect(() => {\n        setSelected([...(selection ?? [])]);\n    }, [selection]);\n\n    // useEffect(() => {\n    //     if (callback) {\n    //         callback(selected);\n    //     }\n    // }, [selected]);\n    const [active, setActive] = useState(false);\n    const toggleActive = useCallback(\n        (e: Event) => {\n            e.stopPropagation();\n            setActive(!active);\n        },\n        [active]\n    );\n    const handlePopoverClose = useCallback(() => {\n        setActive(false);\n    }, [active]);\n    const handleSelection = useCallback(\n        (selected: string[], name: string) => {\n            setSelected(selected);\n            callback(selected);\n            handlePopoverClose();\n        },\n        [callback]\n    );\n    const items = props.items ? Object.values(props.items) : [];\n\n    const options: ChoiceListProps['choices'] = items.map((item) => {\n        const result = {\n            value: (item[valueField ?? ''] || item['id']) as string,\n            label: (item[labelField ?? ''] || item['name']) as string,\n        };\n        return result;\n    });\n\n    let variation: TextStyleProps['variation'];\n    let text: string;\n    if (selected.length && items.length) {\n        const selectedItem = items.find(\n            (item) => item[valueField] === selected[0]\n        );\n        text = selectedItem ? (selectedItem[labelField] as string) : 'Error';\n    } else {\n        variation = 'subdued';\n        text = title;\n    }\n\n    text = buttonText ?? text;\n    const tooltip = tooltipText ?? text;\n\n    const activator = useMemo(\n        () => (\n            <Tooltip content={tooltip} preferredPosition={'above'}>\n                <Button\n                    disabled={disabled}\n                    //@ts-ignore\n                    onClick={toggleActive}\n                    disclosure={disclosure}\n                    fullWidth\n                    icon={icon}\n                >\n                    {text}\n                </Button>\n            </Tooltip>\n        ),\n        [tooltip, disabled, toggleActive, disclosure, icon, text]\n    );\n\n    return (\n        <CustomPopover\n            active={active}\n            activator={activator}\n            onClose={handlePopoverClose}\n        >\n            <Popover.Section>\n                {items.length ? (\n                    <ChoiceList\n                        title=\"\"\n                        onChange={handleSelection}\n                        choices={options}\n                        selected={selected}\n                        disabled={disabled}\n                    />\n                ) : null}\n                {renderAfter && renderAfter()}\n            </Popover.Section>\n        </CustomPopover>\n    );\n}\nexport default PopoverWithChoiceList;\n","import React, { SyntheticEvent, useCallback, useMemo } from 'react';\nimport { Button, Popover } from '@shopify/polaris';\nimport { Product, Profile, Variant } from '@api/types';\nimport messages from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { PopoverWithChoiceList } from '@components/ui-kit';\nimport { profilesSelector } from '@redux/selectors/profiles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ModalCreateProfile from '@components/Profiles/ModalCreateProfile/ModalCreateProfile';\nimport { assignProfile, unassignProfile } from '@redux/reducers/products';\nimport { ModalSettingsProps } from '../ModalProductSettings/ModalProductSettingsParts';\n\ntype Props = {\n    disabled?: boolean;\n    item: Product | Variant;\n    isVariant?: boolean;\n    selected?: string;\n};\n\nfunction AssignProfile({ disabled, item, isVariant }: Props) {\n    const { formatDictionary } = useFormat();\n    const dispatch = useDispatch();\n    const profiles = useSelector(profilesSelector);\n    const { profile_id } = item;\n\n    const selection = useMemo(() => (profile_id ? [profile_id] : []), [item]);\n\n    const activatorCallback = React.useRef<() => void>();\n\n    const activator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            activatorCallback.current = onClick;\n            return null;\n        },\n        [activatorCallback]\n    );\n\n    const Activator: ModalSettingsProps['activator'] = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n            };\n            return (\n                //@ts-ignore\n                <Button plain onClick={handler}>\n                    Add Profile\n                </Button>\n            );\n        },\n        []\n    );\n\n    const createProfile = React.useMemo(\n        () => (\n            <div style={{ marginTop: '1rem' }}>\n                {/* <ModalCreateProfile activator={activator} /> */}\n                <Activator onClick={activatorCallback.current} />\n            </div>\n        ),\n        [activatorCallback.current]\n    );\n\n    const renderAfter = useCallback(() => createProfile, [createProfile]);\n\n    const handleProfileSelection = useCallback(\n        ([id]: string[]) => {\n            if (id === null) {\n                dispatch(unassignProfile({ id, item: item as Variant }));\n            } else {\n                dispatch(assignProfile({ id, item: item as Variant }));\n            }\n        },\n        [item]\n    );\n\n    const items = React.useMemo(\n        () =>\n            profile_id\n                ? [{ id: null, name: 'No Profile' }, ...profiles]\n                : profiles,\n        [profile_id, profiles]\n    );\n\n    let buttonText: string | undefined;\n\n    if (!isVariant) {\n        // const isDifferentProfile = Object.values(\n        //     (item as Product).variants\n        // ).reduce(\n        //     (acc, variant) => acc || variant.profile_id !== item.profile_id,\n        //     false\n        // );\n\n        // if (isDifferentProfile) {\n        if ((item as Product).differentProfile) {\n            buttonText = 'Different for variants';\n        }\n    }\n\n    let tooltipText: string | null = null;\n    if (disabled) {\n        tooltipText = 'Activate the pre-order first';\n    }\n\n    const popover = React.useMemo(\n        () => (\n            <div>\n                <PopoverWithChoiceList<Profile | { id: null }>\n                    items={items}\n                    selection={selection}\n                    disabled={Boolean(disabled)}\n                    callback={handleProfileSelection}\n                    title=\"No Profile\"\n                    buttonText={buttonText}\n                    tooltipText={tooltipText}\n                    disclosure\n                    renderAfter={renderAfter}\n                />\n                <ModalCreateProfile activator={activator} />\n            </div>\n        ),\n        [items, selection, disabled, tooltipText, renderAfter]\n    );\n\n    return popover;\n}\n\nexport default AssignProfile;\n","import React, {\n    useCallback,\n    SyntheticEvent,\n    useEffect,\n    CSSProperties,\n} from 'react';\nimport SwitchButton from '../../ui-kit/SwitchButton/SwitchButton';\nimport {\n    SettingsMajor,\n    CircleDisableMinor,\n    ChevronDownMinor,\n    ChevronUpMinor,\n} from '@shopify/polaris-icons';\nimport { TextStyle, Stack, Button, Icon } from '@shopify/polaris';\nimport {\n    PreorderStatus,\n    Product,\n    ProductInState,\n    ProductSettingsDTO,\n    Profile,\n    Variant,\n} from '@api/types';\nimport { profilesSelector } from '@redux/selectors/profiles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    setUnfolded,\n    setStatus,\n    fetchProductSettings,\n    openSettingsModal,\n    setSettings,\n} from '@redux/reducers/products';\nimport {\n    settingsModalSelector,\n    useItemSelector,\n    useUnfoldedSelector,\n} from '@redux/selectors/products';\nimport PreorderStatusBadge from '../PreorderStatusBadge/PreorderStatusBadge';\nimport './products-item-content.styles.scss';\nimport classNames from 'classnames';\nimport { PopoverWithChoiceList } from '@components/ui-kit';\nimport ModalProductSettings from '@components/Products/ModalProductSettings/ModalProductSettings';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { aloneMessages } from './messages';\nimport ModalCreateProfile from '@components/Profiles/ModalCreateProfile/ModalCreateProfile';\nimport AssignProfile from '../AssignProfile/AssignProfile';\nimport { getFormattedPriceString } from '@components/utils/functions';\n\ntype Props = {\n    // item: Product | Variant;\n    id: string;\n    isVariant?: boolean;\n    variantsExist?: boolean;\n};\n\nconst footerStyle: CSSProperties = {\n    color: 'red',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n};\n\nfunction ProductItemContent({ id, variantsExist, isVariant }: Props) {\n    const item = useItemSelector(id, Boolean(isVariant));\n    const { title, enabled, preorder_status } = item;\n    const { images, variants } = item as Product;\n    const defaultVariant =\n        !isVariant && !variantsExist && variants\n            ? Object.values(variants)[0]\n            : null;\n    const { price, price_shopify } = item as Variant;\n    const priceShopify = defaultVariant\n        ? defaultVariant.price_shopify\n        : price_shopify;\n    const profiles = useSelector(profilesSelector);\n    const productSettings = useSelector(settingsModalSelector);\n    const settings: typeof productSettings.data = { ...productSettings.data };\n    // if (settings && price_shopify) {\n    //     settings.price_shopify = price_shopify;\n    // }\n\n    const unfolded = useUnfoldedSelector(id);\n    const { fmt, getPriceString } = useFormat();\n\n    const dispatch = useDispatch();\n\n    const handlePropagation = useCallback((e: SyntheticEvent) => {\n        e.stopPropagation();\n    }, []);\n\n    const handleCollapse = useCallback(\n        (e: Event) => {\n            e.stopPropagation();\n            dispatch(setUnfolded({ id, unfolded: !unfolded }));\n        },\n        [id, unfolded, dispatch]\n    );\n\n    const statusDisabled = preorder_status === PreorderStatus.Disabled;\n\n    const handleToggle = useCallback(() => {\n        dispatch(setStatus({ id, enabled: !enabled, isVariant }));\n    }, [id, enabled, isVariant, dispatch]);\n\n    const handleCreateProfile = useCallback(() => {\n        dispatch(setStatus({ id, enabled: !enabled, isVariant }));\n    }, [id, enabled, isVariant, dispatch]);\n\n    const handleSaveSettings = useCallback(\n        (settings: ProductSettingsDTO) => {\n            dispatch(\n                setSettings({\n                    items: [\n                        {\n                            productId: isVariant\n                                ? (item as Variant).product_id\n                                : item.id,\n                            ...(isVariant ? { variantId: item.id } : null),\n                        },\n                    ],\n                    settings,\n                })\n            );\n        },\n        [id, enabled, isVariant, dispatch]\n    );\n\n    const handleSettingsActivator = useCallback(() => {\n        const variantId = isVariant\n            ? item.id\n            : defaultVariant\n            ? defaultVariant.id\n            : undefined;\n        const productId = isVariant ? (item as Variant).product_id : item.id;\n        dispatch(openSettingsModal(true));\n        dispatch(fetchProductSettings({ variantId, productId }));\n    }, [isVariant, item, defaultVariant, dispatch]);\n\n    const imageSrc =\n        images?.[0]?.src ?? process.env.PUBLIC_URL + '/img/no_image.jpg';\n    const image = imageSrc ? (\n        <img className=\"imageItem\" src={imageSrc} />\n    ) : (\n        <span className=\"imageItem\">\n            <Icon source={CircleDisableMinor} color=\"inkLight\" />\n        </span>\n    );\n\n    const priceClasses: string = classNames(\n        'flexItem',\n        'flexAlignEnd',\n        isVariant ? 'variantPrice' : 'price'\n    );\n\n    const profileClasses: string = classNames('profilesWrapper', {\n        'profilesWrapper--disabled': false,\n    });\n\n    const settingsActivator: React.FC<{\n        onClick?: () => void;\n    }> = React.useMemo(\n        () => ({ onClick }) => {\n            const handler = (e: SyntheticEvent) => {\n                e.stopPropagation();\n                onClick!();\n                handleSettingsActivator();\n            };\n            return (\n                <Button\n                    primary={id === '34663225786535'}\n                    icon={SettingsMajor}\n                    // disabled={!enabled}\n                    // @ts-ignore-next-line\n                    onClick={handler}\n                />\n            );\n        },\n        [enabled, isVariant, item, defaultVariant]\n    );\n\n    const profileModalTitle = fmt(\n        isVariant ? aloneMessages.variantTitle : aloneMessages.productTitle,\n        {\n            title: item.title,\n        }\n    );\n\n    return (\n        <>\n            <div className=\"flexContainer\">\n                <div className=\"flexItem propsWrapper\">\n                    <div className=\"flexItem image\">{image}</div>\n                    <div className=\"flexItem title\">\n                        <TextStyle variation=\"strong\">{title}</TextStyle>\n                    </div>\n                    <div className={priceClasses}>\n                        <TextStyle variation=\"strong\">\n                            {isVariant && !statusDisabled\n                                ? getPriceString(price)\n                                : null}\n                            {defaultVariant && !statusDisabled\n                                ? getPriceString(defaultVariant.price)\n                                : null}\n                        </TextStyle>\n                    </div>\n                </div>\n                <div className=\"flexItem actionsWrapper\">\n                    <div className=\"flexItem flexItem__chevrone flexWide flexAlignEnd\">\n                        {/* <Stack> */}\n                        {variantsExist ? (\n                            <Button\n                                //@ts-ignore\n                                onClick={handleCollapse}\n                                ariaExpanded={unfolded}\n                                ariaControls={'basic-collapsible' + id}\n                                icon={\n                                    !unfolded\n                                        ? ChevronDownMinor\n                                        : ChevronUpMinor\n                                }\n                            />\n                        ) : (\n                            <div className=\"collapsibleSpan\"></div>\n                        )}\n                    </div>\n                    <div className=\"flexItem flexItem__settings\">\n                        <div onClick={handlePropagation}>\n                            <ModalProductSettings\n                                forSettings\n                                title={profileModalTitle}\n                                footer={\n                                    <div style={footerStyle}>\n                                        Price will be automatically updated\n                                        whenever price is changed on shopify\n                                        store\n                                    </div>\n                                }\n                                activator={settingsActivator}\n                                onSubmit={handleSaveSettings}\n                                item={item}\n                                isVariant={Boolean(isVariant)}\n                                {...productSettings}\n                                settings={settings}\n                                priceShopify={priceShopify}\n                                preorderStatusFromList={preorder_status}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"flexItem flexItem__profilesWrapper\">\n                        <div\n                            className={profileClasses}\n                            onClick={handlePropagation}\n                        >\n                            <AssignProfile\n                                disabled={!enabled}\n                                item={item}\n                                isVariant={isVariant}\n                            />\n                        </div>\n                    </div>\n                    {/* </Stack> */}\n                    <div className=\"flexItem flexItem__badge flexWide\">\n                        <div>\n                            <PreorderStatusBadge\n                                item={item}\n                                different={(item as Product).different}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"flexItem flexItem__switcher\">\n                        <div onClick={handlePropagation}>\n                            <SwitchButton\n                                enabled={enabled}\n                                id={id}\n                                onChange={handleToggle}\n                                onColor=\"#5b69c2\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default ProductItemContent;\n","import {\n    Collapsible,\n    ResourceList,\n    ResourceItem,\n    ResourceListSelectedItems,\n} from '@shopify/polaris';\nimport React, { useState, useEffect, useCallback } from 'react';\n//import { handleSelectedProducts} from '../redux/actions';\nimport ProductItemContent from '@components/Products/ProductItemContent/ProductItemContent';\nimport { Variant } from '@api/types';\nimport {\n    useSelectedVariantSelectorCreator,\n    useUnfoldedSelector,\n} from '@redux/selectors/products';\nimport { useDispatch } from 'react-redux';\nimport { selectVariants } from '@redux/reducers/products';\nimport classNames from 'classnames';\nimport { getProductUrl } from '@components/utils/functions';\n\ntype Props = {\n    items: Record<string, Variant>;\n    productId: string;\n};\n\nconst transition = { duration: '20ms', timingFunction: 'ease' };\n\nfunction CollapsibleVariants(props: Props) {\n    const { items, productId } = props;\n    const variants = Object.values(items);\n    const unfolded = useUnfoldedSelector(productId);\n    const selectedVariants = useSelectedVariantSelectorCreator(productId);\n    const dispatch = useDispatch();\n\n    const handleSelect = useCallback(\n        (selected: string[]) => {\n            dispatch(selectVariants({ selected, productId }));\n        },\n        [productId]\n    );\n\n    const variantsContainerClasses = classNames('variantsContainer', {\n        unfolded: unfolded,\n    });\n\n    return (\n        <div className={variantsContainerClasses}>\n            <Collapsible\n                open={unfolded}\n                id={'basic-collapsible' + props.productId}\n                // transition={transition}\n            >\n                <ResourceList\n                    selectable\n                    selectedItems={selectedVariants}\n                    onSelectionChange={handleSelect}\n                    resourceName={{\n                        singular: 'product variant',\n                        plural: 'product variants',\n                    }}\n                    items={variants}\n                    renderItem={(item) => {\n                        const { id } = item;\n                        const url = getProductUrl(item, true);\n                        return (\n                            <ResourceItem id={id} url={url}>\n                                <ProductItemContent id={item.id} isVariant />\n                            </ResourceItem>\n                        );\n                    }}\n                />\n            </Collapsible>\n        </div>\n    );\n}\n\nexport default CollapsibleVariants;\n","import React, { useMemo } from 'react';\nimport CollapsibleVariants from '../ProductsList/CollapsebleVariants/CollapsebleVariants';\nimport { ResourceItem } from '@shopify/polaris';\nimport { Product } from '@api/types';\nimport ProductItemContent from '../ProductItemContent/ProductItemContent';\nimport { getProductUrl, isDefaultVariant } from '@components/utils/functions';\n\nfunction ProductItem(item: Product) {\n    const { id, title, variants } = item;\n\n    const firstVariant = Object.values(variants)[0];\n    // const regxp = new RegExp('(w*Default Title|testw*)', 'g');\n    // const if_vars = !regxp.test(prod_var.title);\n    const variantsExist = !isDefaultVariant(firstVariant);\n    const url = getProductUrl(item);\n\n    return (\n        <>\n            <ResourceItem\n                id={id}\n                url={url}\n                accessibilityLabel={`View details for ${title}`}\n            >\n                <ProductItemContent\n                    id={item.id}\n                    variantsExist={variantsExist}\n                />\n            </ResourceItem>\n            {variantsExist && (\n                <CollapsibleVariants items={variants} productId={id} />\n            )}\n        </>\n    );\n}\n\nexport default ProductItem;\n","/* eslint-disable */\nimport {\n    Button,\n    Filters,\n    ChoiceList,\n    AppliedFilterInterface,\n    ChoiceListProps,\n    Checkbox,\n} from '@shopify/polaris';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { FunctionComponent, useCallback, useState } from 'react';\nimport {\n    Filter,\n    FilterAvailiability,\n    FilterKey,\n    FilterStatus,\n    Product,\n    Profile,\n} from '@api/types';\nimport {\n    fetchProducts,\n    fetchProductsWithQuery,\n} from '@redux/reducers/products';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { filtersSelector } from '@redux/selectors/products';\nimport messages from '../messages';\nimport { PopoverWithChoiceList } from '@components/ui-kit';\n\nfunction isEmpty(value: unknown) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    } else {\n        return value === '' || value == null;\n    }\n}\n\ntype Props = {\n    items?: Product[];\n    profiles?: Profile[];\n};\n\n// const FilterControl: FunctionComponent<Props> = () => {\n\nconst FilterControl: FunctionComponent<Props> = () => {\n    const filtersValues = useSelector(filtersSelector);\n\n    const handleFilterChange = useCallback(\n        (filter: FilterKey, value: string) => {\n            const params = { filterValue: { filter, value } };\n            const fetch =\n                filter === Filter.Query\n                    ? fetchProductsWithQuery\n                    : fetchProducts;\n            dispatch(fetch(params));\n        },\n        []\n    );\n\n    const dispatch = useDispatch();\n    const { formatDictionary } = useFormat();\n\n    const msg = formatDictionary(messages);\n\n    const handleFilterAvailabilityRemove = useCallback(\n        () => handleFilterChange(Filter.Availiability, ''),\n        []\n    );\n\n    const handleFilterStatusRemove = useCallback(\n        () => handleFilterChange(Filter.Status, ''),\n        []\n    );\n\n    const handleQueryValueRemove = useCallback(\n        () => handleFilterChange(Filter.Query, ''),\n        []\n    );\n    const handleClearAll = useCallback(() => {\n        handleFilterAvailabilityRemove();\n        handleQueryValueRemove();\n    }, [handleQueryValueRemove, handleFilterAvailabilityRemove]);\n\n    type Choice = ChoiceListProps['choices'][number];\n\n    const statusChoices: Choice[] = [\n        {\n            label: msg.filterStatusActivated,\n            value: FilterStatus.Activated,\n        },\n        {\n            label: msg.filterStatusScheduled,\n            value: FilterStatus.Scheduled,\n        },\n    ];\n\n    const availabilityChoices: Choice[] = [\n        {\n            label: msg.filterAvailiabilityInStock,\n            value: FilterAvailiability.InStock,\n        },\n        {\n            label: msg.filterAvailiabilitySoldOut,\n            value: FilterAvailiability.SoldOut,\n        },\n        {\n            label: msg.filterPreordered,\n            value: FilterAvailiability.Preordered,\n        },\n    ];\n\n    //Setup Filters\n    const filters = [\n        // {\n        //     key: 'status',\n        //     label: msg.filterStatus,\n        //     filter: (\n        //         <ChoiceList\n        //             title={msg.filterStatus}\n        //             titleHidden\n        //             choices={statusChoices}\n        //             selected={[filtersValues.status]}\n        //             onChange={(value) => handleFilterChange('status', value[0])}\n        //         />\n        //     ),\n        //     shortcut: true,\n        // },\n        {\n            key: 'availiability',\n            label: msg.filterAvailiability,\n            filter: (\n                <ChoiceList\n                    title={msg.filterAvailiability}\n                    titleHidden\n                    choices={availabilityChoices}\n                    selected={[filtersValues.availiability]}\n                    onChange={(value) =>\n                        handleFilterChange('availiability', value[0])\n                    }\n                />\n            ),\n            shortcut: true,\n        },\n    ];\n\n    function disambiguateLabel(key: FilterKey, value: string) {\n        let getLabel = (choice: Choice[]) =>\n            choice.find((c) => c.value === value)?.label;\n        switch (key) {\n            case Filter.Status: {\n                return `${getLabel(statusChoices)}`;\n            }\n            case Filter.Availiability: {\n                return `${msg.filterAvailiability}: ${getLabel(\n                    availabilityChoices\n                )}`;\n            }\n            default:\n                return value;\n        }\n    }\n\n    const appliedFilters: AppliedFilterInterface[] = [];\n    if (!isEmpty(filtersValues.status)) {\n        appliedFilters.push({\n            key: Filter.Status,\n            label: disambiguateLabel(Filter.Status, filtersValues.status),\n            onRemove: handleFilterStatusRemove,\n        });\n    }\n    if (!isEmpty(filtersValues.availiability)) {\n        appliedFilters.push({\n            key: Filter.Availiability,\n            label: disambiguateLabel(\n                Filter.Availiability,\n                filtersValues.availiability\n            ),\n            onRemove: handleFilterAvailabilityRemove,\n        });\n    }\n\n    const filterControl = (\n        <Filters\n            queryValue={filtersValues.query}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={(value) => handleFilterChange(Filter.Query, value)}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n        >\n            {/* <div style={{ paddingLeft: '8px' }}>\n                <Button onClick={() => console.log('New filter saved')}>\n                    Save\n                </Button>\n            </div> */}\n        </Filters>\n    );\n    // const filterControl = (\n    //     // <ChoiceList\n    //     //     title={msg.filterAvailiability}\n    //     //     titleHidden\n    //     //     choices={availabilityChoices}\n    //     //     selected={[filtersValues.availiability]}\n    //     //     onChange={(value) => handleFilterChange('availiability', value[0])}\n    //     // />\n    //     //     <Filters\n    //     //         queryValue={filtersValues.query}\n    //     //         filters={filters}\n    //     //         appliedFilters={appliedFilters}\n    //     //         onQueryChange={(value) => handleFilterChange(Filter.Query, value)}\n    //     //         onQueryClear={handleQueryValueRemove}\n    //     //         onClearAll={handleClearAll}\n    //     //     >\n    //     //         {/* <div style={{ paddingLeft: '8px' }}>\n    //     //             <Button onClick={() => console.log('New filter saved')}>\n    //     //                 Save\n    //     //             </Button>\n    //     //         </div> */}\n    //     //     </Filters>\n\n    //     // <Filters\n    //     //     queryValue={filtersValues.query}\n    //     //     filters={[]}\n    //     //     appliedFilters={appliedFilters}\n    //     //     onQueryChange={(value) => handleFilterChange(Filter.Query, value)}\n    //     //     onQueryClear={handleQueryValueRemove}\n    //     //     onClearAll={handleClearAll}\n    //     // >\n    //     //     {/* <div style={{ paddingLeft: '8px' }}>\n    //     //                     <Button onClick={() => console.log('New filter saved')}>\n    //     //                         Save\n    //     //                     </Button>\n    //     //                 </div> */}\n    //     // </Filters>\n    // );\n\n    return filterControl;\n};\nexport const PopoverFilterControl: FunctionComponent<Props> = () => {\n    const filtersValues = useSelector(filtersSelector);\n\n    const handleFilterChange = useCallback(\n        (filter: FilterKey, value: string) => {\n            const params = { filterValue: { filter, value } };\n            const fetch =\n                filter === Filter.Query\n                    ? fetchProductsWithQuery\n                    : fetchProducts;\n            dispatch(fetch(params));\n        },\n        []\n    );\n\n    const dispatch = useDispatch();\n    const { formatDictionary } = useFormat();\n\n    const msg = formatDictionary(messages);\n\n    type Choice = ChoiceListProps['choices'][number];\n\n    const statusChoices: Choice[] = [\n        {\n            label: msg.filterStatusActivated,\n            value: FilterStatus.Activated,\n        },\n        {\n            label: msg.filterStatusScheduled,\n            value: FilterStatus.Scheduled,\n        },\n    ];\n\n    const availabilityChoices: Choice[] = [\n        {\n            label: msg.filterAvailiabilityInStock,\n            value: FilterAvailiability.InStock,\n        },\n        {\n            label: msg.filterAvailiabilitySoldOut,\n            value: FilterAvailiability.SoldOut,\n        },\n        {\n            label: msg.filterPreordered,\n            value: FilterAvailiability.Preordered,\n        },\n    ];\n\n    const selection = React.useMemo(\n        () =>\n            filtersValues.availiability ? [filtersValues.availiability] : [],\n        [filtersValues.availiability]\n    );\n\n    const filterControl = (\n        <>\n            <PopoverWithChoiceList<Choice>\n                items={availabilityChoices}\n                labelField=\"label\"\n                valueField=\"value\"\n                disabled={false}\n                callback={(value) =>\n                    handleFilterChange('availiability', value[0])\n                }\n                title={msg.filterAvailiability}\n                selection={selection}\n                disclosure\n            />\n            {/* <Checkbox \n                label={msg.filterPreordered}\n                checked={checked}\n                onChange={handleChange}/> */}\n        </>\n    );\n\n    return filterControl;\n};\n\nexport default FilterControl;\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.list.item';\n\nexport const aloneMessages = defineMessages({\n    assignProfileTitleToProduct: {\n        id: `${PREFIX}.assignProfileTitleToProduct`,\n        defaultMessage: 'Assign profile to product {title}',\n    },\n});\n\nexport const messages = defineMessages({\n    assignProfileTitle: {\n        id: `${PREFIX}.assignProfileTitle`,\n        defaultMessage: 'Multiple Products Settings',\n    },\n    saveAction: {\n        id: `${PREFIX}.action.save`,\n        defaultMessage: 'Assign',\n    },\n    cancelAction: {\n        id: `${PREFIX}.action.save`,\n        defaultMessage: 'Cancel',\n    },\n});\n","import React, { CSSProperties, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    assignProfile,\n    closeAssignProfileModal,\n} from '@redux/reducers/products';\nimport { profilesSelector } from '@redux/selectors/profiles';\nimport { aloneMessages, messages } from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport { assignProfileModalSelector } from '@redux/selectors/products';\nimport { Card, Modal, RadioButton, Stack } from '@shopify/polaris';\nimport ProfileItemContent from '@components/Profiles/ProfilesList/ProfileItemContent/ProfileItemContent';\nimport classNames from 'classnames';\nimport './modal-assign-profile.styles.scss';\n\ntype Props = {\n    productId?: string;\n    isVariant?: boolean;\n};\n\nexport default function ModalAssignProfile() {\n    const dispatch = useDispatch();\n    const { fmt, formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n    const { open, loading, data } = useSelector(assignProfileModalSelector);\n    const profiles = useSelector(profilesSelector);\n\n    const [selected, setSelected] = useState(data?.product?.id);\n\n    const handleSaveProfile = useCallback(() => {\n        setSelected('');\n        selected && dispatch(assignProfile({ id: selected }));\n    }, [selected]);\n    const handleClose = useCallback(() => {\n        setSelected('');\n        dispatch(closeAssignProfileModal());\n    }, []);\n    const handleChange = useCallback((_checked, newValue) => {\n        setSelected(newValue);\n    }, []);\n\n    const title = data\n        ? fmt(aloneMessages.assignProfileTitleToProduct, {\n              title: `\"${data.product?.title || 'Untitled'}\"`,\n          })\n        : msg.assignProfileTitle;\n\n    return (\n        <Modal\n            open={open}\n            loading={loading}\n            onClose={handleClose}\n            title={title}\n            primaryAction={{\n                content: msg.saveAction,\n                onAction: handleSaveProfile,\n                disabled: !selected || loading,\n            }}\n            secondaryActions={[\n                {\n                    content: msg.cancelAction,\n                    onAction: handleClose,\n                    disabled: loading,\n                },\n            ]}\n        >\n            <div className=\"assignProfileModal\">\n                <Card.Section>\n                    {profiles.map((profile) => {\n                        const checked = selected === profile.id;\n\n                        return (\n                            <div\n                                key={profile.id}\n                                className={classNames(\n                                    'radioSection__selectable',\n                                    {\n                                        'radioSection__selectable--checked': checked,\n                                    }\n                                )}\n                                onClick={() => handleChange(true, profile.id)}\n                            >\n                                <Modal.Section>\n                                    <Stack vertical spacing={'extraLoose'}>\n                                        <Stack.Item>\n                                            <label htmlFor={profile.id}>\n                                                <RadioButton\n                                                    label={''}\n                                                    checked={checked}\n                                                    id={profile.id}\n                                                    name=\"accounts\"\n                                                    // onChange={handleChange}\n                                                />\n                                                {profile.name}\n                                            </label>\n                                        </Stack.Item>\n                                        <Stack.Item>\n                                            <div style={{ marginLeft: '3rem' }}>\n                                                <ProfileItemContent\n                                                    noActions\n                                                    item={profile}\n                                                />\n                                            </div>\n                                        </Stack.Item>\n                                    </Stack>\n                                </Modal.Section>\n                            </div>\n                        );\n                    })}\n                </Card.Section>\n            </div>\n        </Modal>\n    );\n}\n","/* eslint-disable */\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    ResourceList,\n    Select,\n    Spinner,\n    Stack,\n} from '@shopify/polaris';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport {\n    PageDirection,\n    Product,\n    Profile,\n    SortDir,\n    SortField,\n} from '@api/types';\nimport {\n    openAssignProfileModal,\n    bulkEnable,\n    selectProducts,\n    setPage,\n    setSort,\n    fetchProducts,\n    unassignProfile,\n} from '@redux/reducers/products';\nimport messages from './messages';\nimport { useFormat } from '@contexts/LocaleContext';\nimport {\n    productsSelector,\n    isLoadingSelector,\n    sortSelector,\n    selectedProducts,\n    pageInfoSelector,\n} from '@redux/selectors/products';\nimport { profilesSelector } from '@redux/selectors/profiles';\nimport { ArrowLeftMinor, ArrowRightMinor } from '@shopify/polaris-icons';\nimport ProductItem from '../ProductItem/ProductItem';\nimport FilterControl, {\n    PopoverFilterControl,\n} from './FilterControl/FilterControl';\nimport { BulkActionsProps } from '@shopify/polaris/dist/types/latest/src/components/BulkActions/BulkActions';\nimport ModalAssignProfile from '../ModalAssignProfile/ModalAssignProfile';\n\ntype ReturnType<F> = F extends (...args: any[]) => infer R ? R : any;\ntype MSG = ReturnType<ReturnType<typeof useFormat>['formatDictionary']>;\n\nconst usePromotedBulkActions = (msg: MSG) => {\n    const dispatch = useDispatch();\n\n    const promotedBulkActions = useMemo(\n        () => [\n            {\n                content: msg.bulkActionsAssignProfile,\n                onAction: () => dispatch(openAssignProfileModal()),\n            },\n            {\n                content: msg.bulkActionsUnassignProfile,\n                onAction: () => dispatch(unassignProfile()),\n            },\n            {\n                content: msg.bulkActionsEnable,\n                onAction: () => dispatch(bulkEnable()),\n            },\n            {\n                content: msg.bulkActionsDisable,\n                onAction: () => dispatch(bulkEnable(false)),\n            },\n        ],\n        []\n    );\n\n    return promotedBulkActions;\n};\n// const bulkActions: BulkActionsProps['actions'] = [\n//     {\n//         items: [\n//             {\n//                 onAction: () => console.log('Todo: implement bulk edit'),\n//                 // prefix:\n//             },\n//         ],\n//     },\n//     // {\n//     //     content: 'Enable Pre-prder',\n//     //     onAction: () => console.log('Todo: implement bulk edit'),\n//     // },\n//     // {\n//     //     content: 'Disable Pre-Order',\n//     //     onAction: () => console.log('Todo: implement bulk edit'),\n//     // },\n// ];\n\ntype Props = {\n    items?: Product[];\n    profiles?: Profile[];\n};\n\nconst ProductsList: FunctionComponent<Props> = () => {\n    const handleSortChange = useCallback((selected: string) => {\n        dispatch(setSort(JSON.parse(selected)));\n    }, []);\n\n    const dispatch = useDispatch();\n    const { formatDictionary } = useFormat();\n\n    const msg = formatDictionary(messages);\n\n    const products = useSelector(productsSelector);\n    const profiles = useSelector(profilesSelector);\n\n    const selectedProds = useSelector(selectedProducts);\n    const isLoading = useSelector(isLoadingSelector);\n    const sortValue = useSelector(sortSelector);\n    const pageInfo = useSelector(pageInfoSelector);\n\n    const promotedBulkActions = usePromotedBulkActions(msg);\n\n    React.useEffect(() => {\n        dispatch(fetchProducts());\n    }, []);\n\n    const setSelectedProds = useCallback(\n        (productsIds) => {\n            dispatch(selectProducts({ productsIds, variantsIds: [] }));\n        },\n        [products]\n    );\n\n    const handlePaging = useCallback((direction: PageDirection) => {\n        dispatch(setPage(direction));\n    }, []);\n\n    const items = products;\n    // ? products.map((item) => {\n    //       return {\n    //           ...item,\n    //           //   ...profiles,\n    //       };\n    //   })\n    // : [];\n\n    const sortOptions = React.useRef([\n        {\n            label: msg.sortByName,\n            value: JSON.stringify({ field: SortField.Title, dir: SortDir.Asc }),\n        },\n        {\n            label: msg.inventoryLeftAscending,\n            value: JSON.stringify({\n                field: SortField.Inventory,\n                dir: SortDir.Asc,\n            }),\n        },\n    ]);\n\n    const paging = (\n        <Card.Section>\n            <Stack distribution=\"center\">\n                <ButtonGroup segmented>\n                    <Button\n                        disabled={!pageInfo.hasPreviousPage}\n                        icon={ArrowLeftMinor}\n                        onClick={() => handlePaging(PageDirection.Before)}\n                    />\n                    <Button\n                        disabled={!pageInfo.hasNextPage}\n                        icon={ArrowRightMinor}\n                        onClick={() => handlePaging(PageDirection.After)}\n                    />\n                </ButtonGroup>\n            </Stack>\n        </Card.Section>\n    );\n\n    const bulkActions: BulkActionsProps['actions'] = [\n        {\n            items: [\n                {\n                    onAction: () => console.log('Todo: implement bulk edit'),\n                    // prefix: <AssignProfile />,\n                },\n            ],\n        },\n        // {\n        //     content: 'Enable Pre-prder',\n        //     onAction: () => console.log('Todo: implement bulk edit'),\n        // },\n        // {\n        //     content: 'Disable Pre-Order',\n        //     onAction: () => console.log('Todo: implement bulk edit'),\n        // },\n    ];\n\n    const alternateTool = useMemo(\n        () => (\n            <>\n                <div style={{ marginRight: '1rem' }}>\n                    <Select\n                        label=\"Sort by\"\n                        labelInline\n                        options={sortOptions.current}\n                        value={JSON.stringify(sortValue)}\n                        onChange={handleSortChange}\n                    />\n                </div>\n                <PopoverFilterControl />\n            </>\n        ),\n        [sortOptions, sortValue]\n    );\n\n    const filter = useMemo(() => <FilterControl />, []);\n\n    const content = (\n        <Card>\n            <Card.Section>\n                <ResourceList\n                    // alternateTool={alternateTool}\n                    filterControl={filter}\n                    selectedItems={\n                        selectedProds.all\n                            ? 'All'\n                            : [\n                                  ...selectedProds.productsIds,\n                                  ...selectedProds.variantsIds,\n                              ]\n                    }\n                    onSelectionChange={setSelectedProds}\n                    selectable\n                    loading={isLoading}\n                    promotedBulkActions={promotedBulkActions}\n                    sortOptions={sortOptions.current}\n                    sortValue={JSON.stringify(sortValue)}\n                    onSortChange={handleSortChange}\n                    resourceName={{\n                        singular: msg.resourceNameSingular,\n                        plural: msg.resourceNamePlural,\n                    }}\n                    items={items}\n                    renderItem={ProductItem}\n                />\n            </Card.Section>\n            {items && items.length ? paging : null}\n        </Card>\n    );\n    return (\n        <div className=\"productsList__wrapper\">\n            {products.length || !isLoading ? (\n                <>\n                    {content}\n                    <ModalAssignProfile />\n                </>\n            ) : (\n                <div style={{ marginTop: '-2rem' }}>\n                    <Stack distribution=\"center\">\n                        <Spinner\n                            accessibilityLabel=\"Spinner example\"\n                            size=\"large\"\n                            color=\"teal\"\n                        />\n                    </Stack>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProductsList;\n"],"sourceRoot":""}