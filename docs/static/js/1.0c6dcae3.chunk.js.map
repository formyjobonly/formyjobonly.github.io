{"version":3,"sources":["redux/selectors/profiles.ts","redux/selectors/settings.ts","components/Products/ModalProductSettings/messages.ts","components/ui-kit/DatePickerPopover/DatePickerPopover.tsx","components/Products/ModalProductSettings/ModalProductSettingsParts.tsx","components/utils/IntlFormattedNumberField.tsx","components/utils/hooks.ts","components/common/validators.ts","components/Products/ModalProductSettings/productSettingsFormControllerHook.tsx","components/Products/ModalProductSettings/productSettingsFormHook.tsx","components/utils/CustomPopover.tsx"],"names":["selectProfiles","state","profiles","profilesSelector","createSelector","profilesById","profilesIds","map","id","profileModalSelector","sub","profileModal","isLoadingSelector","loading","selectedProfiles","filtersSelector","filters","availiability","status","query","sortSelector","sort","settingsSelector","settings","appSettingsSelector","app","designSettingsSelector","design","preorderDesignSettingsSelector","current","preorder","preorderSelectedDesignSettingsSelector","selected","checkoutDesignSettingsSelector","checkout","checkoutSelectedDesignSettingsSelector","PREFIX","messages","defineMessages","saveAction","defaultMessage","cancelAction","assignProfileLabel","nameLabel","applySettingsProductWarning","applySettingsVariantWarning","buttonTextLabel","buttonMessageLabel","priceSettingsLabel","priceSettingsKeepSameLabel","priceSettingsIncreaseLabel","priceSettingsDecreaseLabel","shopifyProductPriceLabel","shopifyVariantPriceLabel","preOrderPriceLabel","preorderLimitLabel","preorderNoLimitsLabel","activationDateLabel","activationDateActiveNowLabel","activationDateSetStartTimeLabel","activationDateSetStartTimeStartDateLabel","activationDateSetStartTimeEndDateLabel","availabilityDateLabel","availabilityDateAnytimeLabel","availabilityDateCustomLabel","dataPickerPopoverStyle","width","padding","height","getSelectedDates","start","end","getMonthFromDate","date","month","getMonth","year","getFullYear","DatePickerPopover","ActivationDateType","AvailablityDateMode","PriceSettingsType","props","onChange","disabled","disclosure","icon","label","disableDatesAfter","disableDatesBefore","allowRange","open","error","onOpenChange","toggleActive","useCallback","useState","Date","setMonth","useEffect","selectedDates","setSelectedDates","handleMonthChange","handleChange","range","onClose","activatorContainer","useRef","activator","ref","className","classNames","Button","onClick","format","Stack","vertical","Item","CustomPopover","active","style","DatePicker","onMonthChange","IntlFormattedNumberField","value","useFormat","formatCurrencyValue","getIntlOptions","wrapperRef","inputRef","currentValue","setCurrentValue","setCursorPosition","elementId","setElementId","setFormattedCurrentValue","newValue","options","formattedValue","inputEl","querySelector","selectionStart","handleBlur","locale","normalizedValue","NumberParser","tryParse","removeFormattingStuff","TextField","type","onBlur","useGetCorrectedTime","timezoneOffset","useSelector","timezoneOffsetSelector","getCorrectedTime","add","minutes","getTimezoneOffset","getDisableDatesBefore","daysShift","startValue","now","startOfDay","days","getTime","useHandleOnKeyDown","isInteger","e","regexp","ctrlKey","key","length","test","preventDefault","removeLeadingZero","replace","ActivationDatesSelector","fields","mode","setMode","msg","formatDictionary","setDatesAfter","setDatesBefore","startOpen","setStartOpen","endOpen","setEndOpen","today","datesFields","start_date","end_date","before","after","undefined","handleStart","handleEnd","Setted","allErrors","activationDatesSelector","isSelected","FormLayout","Group","subDays","handleOnChange","v","ChoiceList","title","choices","Now","renderChildren","AvailabilityDateSelector","isStartDateEnabled","openedPopover","setOpenedPopover","setDateOpen","availability_date","isEqual","max","Display","availabilityDatesSelector","NoDisplay","InventoryLimitSelector","field","inventory_limit","runValidation","handleOnKeyDown","inventoryLimitSelector","onKeyDown","min","Amount","None","PriceSettingsSelector","shopifyPrice","currencySymbol","currencySymbolSelector","priceFields","price_change_value","price_increase","price_decrease","PriceSettingsMode","Increase","Decrease","cursorPosition","price_type","handleTextFieldChange","selectionEnd","priceSettingsSelector","isValueMode","typeValue","getValue","Boolean","ButtonGroup","segmented","step","String","Select","Percent","forEach","f","reset","Value","getError","Same","ErrorMessage","Icon","source","AlertMinor","TitleNode","React","memo","anyError","withError","display","marginLeft","CircleAlertMajor","useIsTablet","useMedia","uniqueId","useComponentId","idRef","between","validator","Number","getInventoryMode","limit","getPriceMode","priceType","price","Unstated","PriceType","SpecificValue","getActivationMode","getAvailabilityMode","useGetField","validates","deps","useField","getDateFromInputData","isoString","validators","parseISO","getPriceTypeForOutputData","getStartOfDayUTC","useProductSettingsFormController","params","settingsParams","forSettings","forAppSettings","onSubmit","priceShopify","setSettings","data","setData","initModes","useMemo","inventory","activation","availability","outterError","setOutterError","inventoryLimitMode","setInventoryLimitMode","applyProfile","setApplyProfile","selectedProfile","setSelectedProfile","profilesOptions","p","name","priceMode","setPriceMode","activationMode","setActivationMode","availabilityMode","setAvailabilityMode","Math","abs","price_shopify","positive","positiveNumericString","match","message","skipOnEmpty","startDateNotEmpty","startDate","availabilityDateNotEmpty","availabilityDate","decreaseMaxAmount","input","isAmountError","Infinity","priceChangeValueLimit","toString","getPriceChangeDefaultValue","shopifyPriceNumber","getPriceTypeFromInputData","fieldsDic","notEmpty","lengthMoreThan","button_text","button_message","useForm","form","remoteErrors","errors","submit","dirty","handleApplyProfile","applied","newData","profile","find","handleSelectProfile","validationErrors","Object","keys","validationErrorKey","handleOnSubmit","reduceFields","acc","resetForm","useProductSettingsForm","isVariant","preorderStatusFromList","getPriceString","values","statusDisabled","PreorderStatus","Disabled","handlePropagation","stopPropagation","onTouchStart","onMouseDown","TextContainer","Heading","dispatch","useDispatch","openedPopoverSelector","openPopover","closePopover","activeValue","PopoverCloseSource","Click","data-preorder-popover-id","children","document","addEventListener","element","target","hasAttribute","matches","parentElement","store"],"mappings":"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","file":"static/js/1.0c6dcae3.chunk.js","sourcesContent":["import { Profile } from '@api/types';\nimport { RootState } from '@redux/reducers/rootReducer';\nimport { createSelector } from '@reduxjs/toolkit';\n\nconst selectProfiles = (state: RootState) => state.profiles;\n\nexport const profilesSelector = createSelector(\n    (state: RootState) => state.profiles.profilesById,\n    (state: RootState) => state.profiles.profilesIds,\n    (profilesById, profilesIds) => {\n        return profilesIds.map((id) => profilesById[id]);\n    }\n);\n\nexport const profileModalSelector = createSelector(\n    selectProfiles,\n    (sub) => sub.profileModal\n);\n\nexport const isLoadingSelector = createSelector(\n    selectProfiles,\n    (sub) => sub.loading\n);\n\nexport const selectedProfiles = createSelector(\n    selectProfiles,\n    (sub) => sub.selectedProfiles\n);\n\nexport const filtersSelector = createSelector(\n    (state: RootState) => state.profiles.filters.availiability,\n    (state: RootState) => state.profiles.filters.status,\n    (state: RootState) => state.profiles.filters.query,\n    (availiability, status, query) => ({ availiability, status, query })\n);\n\nexport const sortSelector = createSelector(selectProfiles, (sub) => sub.sort);\n","import { RootState } from '@redux/reducers/rootReducer';\nimport { createSelector } from '@reduxjs/toolkit';\n\nconst settingsSelector = (state: RootState) => state.settings;\n\nexport const appSettingsSelector = createSelector(\n    settingsSelector,\n    (sub) => sub.settings.app\n);\nexport const designSettingsSelector = createSelector(\n    settingsSelector,\n    (sub) => sub.settings.design\n);\nexport const preorderDesignSettingsSelector = createSelector(\n    designSettingsSelector,\n    (sub) => sub.state?.current.preorder\n);\nexport const preorderSelectedDesignSettingsSelector = createSelector(\n    designSettingsSelector,\n    (sub) => sub.selected.preorder\n);\nexport const checkoutDesignSettingsSelector = createSelector(\n    designSettingsSelector,\n    (sub) => sub.state?.current.checkout\n);\nexport const checkoutSelectedDesignSettingsSelector = createSelector(\n    designSettingsSelector,\n    (sub) => sub.selected.checkout\n);\nexport const isLoadingSettingsSelector = createSelector(\n    settingsSelector,\n    (sub) => sub.loading\n);\n","import { defineMessages } from 'react-intl';\n\nconst PREFIX = 'products.settings.modal';\n\nconst messages = defineMessages({\n    saveAction: {\n        id: `${PREFIX}.action.save`,\n        defaultMessage: 'Save',\n    },\n    cancelAction: {\n        id: `${PREFIX}.action.cancel`,\n        defaultMessage: 'Cancel',\n    },\n    assignProfileLabel: {\n        id: `${PREFIX}.assignProfileLabel`,\n        defaultMessage: 'Profile:',\n    },\n    nameLabel: {\n        id: `${PREFIX}.name.label`,\n        defaultMessage: 'Profile Name:',\n    },\n    applySettingsProductWarning: {\n        id: `${PREFIX}.applySettingsProductWarning`,\n        defaultMessage:\n            'The product (all its variants) will receive the following settings:',\n    },\n    applySettingsVariantWarning: {\n        id: `${PREFIX}.applySettingsVariantWarning`,\n        defaultMessage: 'The variant will receive the following settings:',\n    },\n    buttonTextLabel: {\n        id: `${PREFIX}.button.TextLabel`,\n        defaultMessage: 'Button Text:',\n    },\n    buttonMessageLabel: {\n        id: `${PREFIX}.button.MessageLabel`,\n        defaultMessage: 'Button Message:',\n    },\n    priceSettingsLabel: {\n        id: `${PREFIX}.PriceSettingsLabel`,\n        defaultMessage: 'Price settings:',\n    },\n    priceSettingsKeepSameLabel: {\n        id: `${PREFIX}.PriceSettingsKeepSameLabel`,\n        defaultMessage: 'Keep same',\n    },\n    priceSettingsIncreaseLabel: {\n        id: `${PREFIX}.PriceSettingsIncreaseLabel`,\n        defaultMessage: 'Increase',\n    },\n    priceSettingsDecreaseLabel: {\n        id: `${PREFIX}.PriceSettingsDecreaseLabel`,\n        defaultMessage: 'Decrease',\n    },\n    shopifyProductPriceLabel: {\n        id: `${PREFIX}.shopifyProductPriceLabel`,\n        defaultMessage: 'Original product price:',\n    },\n    shopifyVariantPriceLabel: {\n        id: `${PREFIX}.shopifyVariantPriceLabel`,\n        defaultMessage: 'Original variant price:',\n    },\n    preOrderPriceLabel: {\n        id: `${PREFIX}.preOrderPriceLabel`,\n        defaultMessage: 'Pre-order price:',\n    },\n    preorderLimitLabel: {\n        id: `${PREFIX}.PreorderLimitLabel`,\n        defaultMessage: 'Pre-order quantity limit:',\n    },\n    preorderNoLimitsLabel: {\n        id: `${PREFIX}.PreorderNoLimitsLabel`,\n        defaultMessage: 'No Limit',\n    },\n    activationDateLabel: {\n        id: `${PREFIX}.ActivationDateLabel`,\n        defaultMessage: 'Pre-order is active:',\n    },\n    activationDateActiveNowLabel: {\n        id: `${PREFIX}.ActivationDateActiveNowLabel`,\n        defaultMessage: 'Active now',\n    },\n    activationDateSetStartTimeLabel: {\n        id: `${PREFIX}.ActivationDateSetStartTimeLabel`,\n        defaultMessage: 'Set Future Start Time',\n    },\n    activationDateSetStartTimeStartDateLabel: {\n        id: `${PREFIX}.ActivationDateSetStartTimeStartDateLabel`,\n        defaultMessage: 'Start Date',\n    },\n    activationDateSetStartTimeEndDateLabel: {\n        id: `${PREFIX}.ActivationDateSetStartTimeEndDateLabel`,\n        defaultMessage: 'End Date',\n    },\n    availabilityDateLabel: {\n        id: `${PREFIX}.availabilityDateLabel`,\n        defaultMessage: 'Display Estimated Availability Date:',\n    },\n    availabilityDateAnytimeLabel: {\n        id: `${PREFIX}.availabilityDateAnytimeLabel`,\n        defaultMessage: 'Do not display',\n    },\n    availabilityDateCustomLabel: {\n        id: `${PREFIX}.availabilityDateCustomLabel`,\n        defaultMessage: 'Display:',\n    },\n});\n\nexport default messages;\n","import {\n    Button,\n    ButtonProps,\n    DatePicker,\n    Stack,\n    Range,\n} from '@shopify/polaris';\nimport React, {\n    useCallback,\n    useState,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\nimport format from 'date-fns/esm/format';\nimport classNames from 'classnames';\nimport CustomPopover from '@components/utils/CustomPopover';\n\nconst dataPickerPopoverStyle = {\n    width: 'min-content',\n    padding: '1rem',\n    height: '99%',\n};\n\ninterface Props {\n    onChange: (range: Range) => void;\n    disabled?: boolean;\n    disableDatesAfter?: Date;\n    disableDatesBefore?: Date;\n    disclosure?: ButtonProps['disclosure'];\n    icon?: ButtonProps['icon'];\n    label?: string;\n    allowRange?: boolean;\n    start?: Date;\n    end?: Date;\n    open: boolean;\n    error?: string | null;\n    onOpenChange: (open: boolean) => void;\n}\n\nfunction getSelectedDates({ start, end }: { start?: Date; end?: Date }) {\n    return {\n        start: start,\n        end: end ?? start,\n    };\n}\n\nfunction getMonthFromDate(date: Date) {\n    return {\n        month: date.getMonth(),\n        year: date.getFullYear(),\n    };\n}\n\nfunction DatePickerPopover(props: Props) {\n    const {\n        onChange,\n        disabled,\n        disclosure,\n        icon,\n        label,\n        disableDatesAfter,\n        disableDatesBefore,\n        start,\n        end,\n        allowRange,\n        open,\n        error = null,\n        onOpenChange,\n    } = props;\n\n    const toggleActive = useCallback(() => {\n        onOpenChange(!open);\n    }, [open, onOpenChange]);\n\n    const date = start; //useMemo(() => start ?? new Date(), [start]);\n\n    const [{ month, year }, setMonth] = useState(\n        getMonthFromDate(date ?? new Date())\n    );\n    useEffect(() => {\n        setMonth(getMonthFromDate(date ?? new Date()));\n    }, [date]);\n\n    const [selectedDates, setSelectedDates] = useState(\n        getSelectedDates({ start: date, end })\n    );\n    useEffect(() => {\n        setSelectedDates(getSelectedDates({ start: date, end }));\n    }, [date, end]);\n\n    const handleMonthChange = useCallback(\n        (month: number, year: number) => setMonth({ month, year }),\n        []\n    );\n    const handleChange = useCallback(\n        (range: Range) => {\n            setSelectedDates(range);\n            onChange(range);\n            // onOpenChange(false);\n        },\n        [onChange]\n    );\n    const onClose = useCallback(() => {\n        onOpenChange(false);\n    }, [onOpenChange]);\n\n    const activatorContainer = useRef<HTMLElement>(null);\n\n    const activator = (\n        <span\n            ref={activatorContainer}\n            className={classNames('DataPicker__Activator', {\n                'DataPicker__Activator--error': error,\n            })}\n        >\n            <Button\n                onClick={toggleActive}\n                disabled={disabled}\n                disclosure={disclosure}\n                icon={icon}\n            >\n                {date ? format(date, 'MMM d, Y') : 'Select date...'}\n            </Button>\n        </span>\n    );\n\n    return (\n        <Stack vertical>\n            <Stack.Item>{label}</Stack.Item>\n            <Stack.Item>\n                <CustomPopover\n                    active={!disabled && open}\n                    activator={activator}\n                    onClose={onClose}\n                >\n                    <div\n                        className=\"DataPicker-Popover_Wrapper\"\n                        style={dataPickerPopoverStyle}\n                    >\n                        <DatePicker\n                            month={month}\n                            year={year}\n                            onChange={handleChange}\n                            onMonthChange={handleMonthChange}\n                            selected={\n                                selectedDates.start && (selectedDates as Range)\n                            }\n                            disableDatesBefore={disableDatesBefore}\n                            disableDatesAfter={disableDatesAfter}\n                            allowRange={allowRange}\n                        />\n                    </div>\n                </CustomPopover>\n            </Stack.Item>\n        </Stack>\n    );\n}\nexport default DatePickerPopover;\n","import {\n    PreorderStatus,\n    PriceSettingsMode,\n    PriceType,\n    Product,\n    Profile,\n    Variant,\n} from '@api/types';\nimport DatePickerPopover from '@components/ui-kit/DatePickerPopover/DatePickerPopover';\nimport { NumberParser, useFormat } from '@contexts/LocaleContext';\nimport { StateWithLoadingAndError } from '@redux/reducers/common/reducers';\nimport {\n    Button,\n    ButtonGroup,\n    ChoiceList,\n    FormLayout,\n    Select,\n    TextField,\n    Range,\n    Icon,\n    ChoiceListProps,\n} from '@shopify/polaris';\nimport { AlertMinor, CircleAlertMajor } from '@shopify/polaris-icons';\nimport { Field } from '@shopify/react-form';\nimport classNames from 'classnames';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport messages from './messages';\nimport subDays from 'date-fns/esm/subDays';\nimport startOfDay from 'date-fns/esm/startOfDay';\nimport max from 'date-fns/esm/max';\nimport isEqual from 'date-fns/esm/isEqual';\nimport startOfToday from 'date-fns/esm/startOfToday';\nimport add from 'date-fns/esm/add';\nimport { getTimezoneOffset } from 'date-fns-tz';\nimport {\n    currencySymbolSelector,\n    timezoneOffsetSelector,\n} from '@redux/selectors/app';\nimport { useSelector } from 'react-redux';\nimport { useProductSettingsFormController } from './productSettingsFormControllerHook';\nimport IntlFormattedNumberField from '@components/utils/IntlFormattedNumberField';\n\nexport interface ProductSettingsFormProps<T = any> {\n    settings: Partial<Profile> | null;\n    error?: StateWithLoadingAndError['error'];\n    forSettings?: boolean;\n    forAppSettings?: boolean;\n    onSubmit?: (settings: T) => void;\n    onChange?: (settings: T) => void;\n    isVariant?: boolean;\n    priceShopify?: string | null;\n    preorderStatusFromList?: PreorderStatus;\n}\n\nexport interface ModalSettingsProps extends ProductSettingsFormProps {\n    activator: React.FC<{ onClick?: () => void }>;\n    item?: Product | Variant;\n    open: boolean;\n    loading: boolean;\n    title: string;\n    footer?: React.ReactNode;\n}\n\nexport enum ActivationDateType {\n    Now = 'now',\n    Setted = 'setted',\n}\nexport enum AvailablityDateMode {\n    NoDisplay = 'noDisplay',\n    Display = 'display',\n}\n\nexport enum PriceSettingsType {\n    Amount = 'amount',\n    Percent = 'percent',\n    None = 'none',\n}\n\ntype Fields = {\n    button_text: Field<string>;\n    button_message: Field<string>;\n    price_change_value: Field<string>;\n    price_increase: Field<string>;\n    price_decrease: Field<string>;\n    price_type: Field<string>;\n    inventory_limit: Field<string>;\n    start_date: Field<Date | undefined>;\n    end_date: Field<Date | undefined>;\n    availability_date: Field<Date | undefined>;\n};\n\n// const getDisableDatesBefore = (disableDatesBefore: Date | undefined) => {\n//     const today = startOfDay(new Date());\n//     // const today = startOfDay(subDays(new Date(), 1));\n//     return (disableDatesBefore ?? today).getTime() <= today.getTime()\n//         ? today\n//         : disableDatesBefore;\n// };\n\n// const getDisableDatesAfter = (\n//     disableDatesAfter: Date | undefined,\n//     start = new Date()\n// ) => {\n//     start = startOfDay(start);\n//     // const today = startOfDay(subDays(new Date(), 1));\n//     return (disableDatesAfter ?? start).getTime() <= start.getTime()\n//         ? undefined\n//         : disableDatesAfter;\n// };\n\nconst useGetCorrectedTime = () => {\n    const timezoneOffset = useSelector(timezoneOffsetSelector);\n\n    const getCorrectedTime = useCallback(\n        (date: Date) =>\n            add(date, {\n                minutes:\n                    date.getTimezoneOffset() +\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                    getTimezoneOffset(timezoneOffset) / (1000 * 60),\n            }),\n        [timezoneOffset]\n    );\n\n    const getDisableDatesBefore = useCallback(\n        (\n            disableDatesAfter: Date | undefined,\n            daysShift: number,\n            startValue?: Date\n        ) => {\n            const now = getCorrectedTime(new Date());\n            const start = startOfDay(startValue ?? now);\n            disableDatesAfter =\n                disableDatesAfter &&\n                add(disableDatesAfter, { days: daysShift });\n            // const today = startOfDay(subDays(new Date(), 1));\n            return (disableDatesAfter ?? start).getTime() <= start.getTime()\n                ? start\n                : startOfDay(disableDatesAfter ?? now);\n        },\n        [getCorrectedTime]\n    );\n\n    return {\n        getCorrectedTime,\n        getDisableDatesBefore,\n    };\n};\n\nconst useHandleOnKeyDown = (isInteger: boolean = false) =>\n    useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n        let regexp = /\\d|,|\\./;\n        if (isInteger) {\n            regexp = /\\d/;\n        }\n        if (!e.ctrlKey && e.key.length === 1 && !regexp.test(e.key)) {\n            e.preventDefault();\n            return false;\n        }\n    }, []);\n\nconst removeLeadingZero = (value: string) => value.replace(/^0+/, '');\n\nexport const ActivationDatesSelector = ({\n    fields,\n    mode,\n    setMode,\n}: {\n    fields: Fields;\n    mode: ActivationDateType;\n    setMode: (mode: ActivationDateType) => void;\n}) => {\n    const { formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n    const [disableDatesAfter, setDatesAfter] = useState<Date | undefined>();\n    const [disableDatesBefore, setDatesBefore] = useState<Date | undefined>();\n\n    const [startOpen, setStartOpen] = useState(false);\n    const [endOpen, setEndOpen] = useState(false);\n\n    const { getCorrectedTime, getDisableDatesBefore } = useGetCorrectedTime();\n\n    const today = getCorrectedTime(new Date());\n    const datesFields = [fields.start_date, fields.end_date];\n\n    useEffect(() => {\n        // const before = getDisableDatesBefore(\n        //     fields.start_date.value && add(fields.start_date.value, { days: 1 })\n        // );\n        const before = getDisableDatesBefore(fields.start_date.value, 1);\n\n        setDatesBefore(before);\n        const after = fields.end_date.value\n            ? getDisableDatesBefore(fields.end_date.value, -1)\n            : undefined;\n        // if (after?.getTime() === before?.getTime()) {\n        //     after = undefined;\n        // }\n        setDatesAfter(after);\n    }, [...datesFields]);\n\n    const handleStart = useCallback(\n        ({ start }: Range) => {\n            fields.start_date.onChange(start);\n            setDatesBefore(getDisableDatesBefore(start, 1));\n            setStartOpen(false);\n        },\n        [fields.start_date]\n    );\n\n    const handleEnd = useCallback(({ start }: Range) => {\n        fields.end_date.onChange(start);\n        setDatesAfter(getDisableDatesBefore(start, -1));\n        setEndOpen(false);\n    }, []);\n\n    let error: string | undefined;\n    if (mode === ActivationDateType.Setted) {\n        error = fields.start_date.allErrors?.[0];\n    } else {\n        fields.start_date.error = '';\n    }\n\n    const activationDatesSelector = useCallback(\n        (isSelected) => {\n            const disabled = !isSelected;\n\n            return (\n                <FormLayout.Group>\n                    <DatePickerPopover\n                        label={msg.activationDateSetStartTimeStartDateLabel}\n                        start={fields.start_date.value}\n                        disclosure\n                        disableDatesBefore={subDays(today, 1)}\n                        error={error}\n                        disableDatesAfter={disableDatesAfter}\n                        disabled={disabled}\n                        open={startOpen}\n                        onChange={handleStart}\n                        onOpenChange={setStartOpen}\n                    />\n                    <DatePickerPopover\n                        label={msg.activationDateSetStartTimeEndDateLabel}\n                        start={fields.end_date.value}\n                        disclosure\n                        disableDatesBefore={disableDatesBefore}\n                        {...fields.end_date}\n                        disabled={disabled}\n                        open={endOpen}\n                        onChange={handleEnd}\n                        onOpenChange={setEndOpen}\n                    />\n                </FormLayout.Group>\n            );\n        },\n        [fields, startOpen, endOpen, error]\n    );\n\n    const handleOnChange: ChoiceListProps['onChange'] = useCallback(\n        (v: string[]) => {\n            const mode = v[0];\n\n            // if (mode === ActivationDateType.Now) {\n            //     datesFields.forEach((f) => {\n            //         f.allErrors = [];\n            //         f.error = '';\n            //     });\n            // }\n            setMode(mode as ActivationDateType);\n        },\n        [setMode, datesFields]\n    );\n\n    return (\n        <div>\n            <ChoiceList\n                title=\"\"\n                choices={[\n                    {\n                        label: msg.activationDateActiveNowLabel,\n                        value: ActivationDateType.Now,\n                    },\n                    {\n                        label: msg.activationDateSetStartTimeLabel,\n                        value: ActivationDateType.Setted,\n                        renderChildren: activationDatesSelector,\n                    },\n                ]}\n                selected={[mode]}\n                onChange={handleOnChange}\n            />\n            {!error ? null : <ErrorMessage error={error} />}\n        </div>\n    );\n};\n\nexport const AvailabilityDateSelector = ({\n    fields,\n    isStartDateEnabled,\n    mode,\n    setMode,\n    openedPopover,\n    setOpenedPopover,\n}: {\n    fields: Fields;\n    isStartDateEnabled: boolean;\n    mode: AvailablityDateMode;\n    setMode: (mode: AvailablityDateMode) => void;\n    openedPopover: string | null;\n    setOpenedPopover: ReturnType<\n        typeof useProductSettingsFormController\n    >['setOpenedPopover'];\n}) => {\n    const { formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n\n    // const [dateOpen, setDateOpen] = useState(false);\n    // const dateOpen = ;\n    // const [dateOpen, setDateOpen] = useState(false);\n\n    const { getCorrectedTime, getDisableDatesBefore } = useGetCorrectedTime();\n    const setDateOpen = useCallback((open: boolean) => {\n        setOpenedPopover(open ? 'AvailabilityDateSelector' : null);\n    }, []);\n\n    const handleStart = useCallback(({ start }: Partial<Range>) => {\n        fields.availability_date.onChange(start);\n        setDateOpen(false);\n    }, []);\n\n    useEffect(() => {\n        if (\n            fields.start_date.value &&\n            fields.availability_date.value &&\n            isEqual(\n                max([fields.availability_date.value, fields.start_date.value]),\n                fields.start_date.value\n            )\n        ) {\n            handleStart({ start: fields.start_date.value, end: new Date() });\n        }\n        // handleStart({});\n    }, [fields.start_date]);\n\n    let disableDatesBefore = getDisableDatesBefore(\n        fields.start_date.value,\n        0,\n        isStartDateEnabled ? fields.start_date.value : undefined\n    );\n\n    const today = startOfDay(getCorrectedTime(new Date()));\n    if (\n        disableDatesBefore &&\n        isEqual(max([disableDatesBefore, today]), today)\n    ) {\n        disableDatesBefore = today;\n    }\n    // const disableDatesBefore = React.useMemo(\n    //     () =>\n    //         getDisableDatesBefore(\n    //             fields.availability_date.value,\n    //             fields.start_date.value\n    //         ),\n    //     [fields.availability_date.value, fields.start_date.value]\n    // );\n\n    let error: string | undefined;\n    if (mode === AvailablityDateMode.Display) {\n        error = fields.availability_date.allErrors?.[0];\n    } else {\n        fields.availability_date.error = '';\n    }\n\n    const availabilityDatesSelector = useCallback(\n        (isSelected) => {\n            const disabled = !isSelected;\n\n            return (\n                <FormLayout.Group>\n                    <DatePickerPopover\n                        start={fields.availability_date.value}\n                        disableDatesBefore={disableDatesBefore}\n                        error={error}\n                        disclosure\n                        disabled={disabled}\n                        open={openedPopover === 'AvailabilityDateSelector'}\n                        onChange={handleStart}\n                        onOpenChange={setDateOpen}\n                    />\n                </FormLayout.Group>\n            );\n        },\n        [fields, openedPopover, disableDatesBefore]\n    );\n\n    return (\n        <div>\n            <ChoiceList\n                title=\"\"\n                choices={[\n                    {\n                        label: msg.availabilityDateAnytimeLabel,\n                        value: AvailablityDateMode.NoDisplay,\n                    },\n                    {\n                        label: msg.availabilityDateCustomLabel,\n                        value: AvailablityDateMode.Display,\n                        renderChildren: availabilityDatesSelector,\n                    },\n                ]}\n                selected={[mode]}\n                onChange={(v) => setMode(v[0] as AvailablityDateMode)}\n            />\n            {!error ? null : <ErrorMessage error={error} />}\n        </div>\n    );\n};\n\nexport const InventoryLimitSelector = ({\n    fields,\n    mode,\n    setMode,\n}: {\n    fields: Fields;\n    mode: PriceSettingsType;\n    setMode: (mode: PriceSettingsType) => void;\n}) => {\n    const { formatDictionary } = useFormat();\n    const msg = formatDictionary(messages);\n\n    const handleChange = useCallback(\n        (value: string) => {\n            const field = fields.inventory_limit;\n\n            field.onChange(removeLeadingZero(value));\n            field.runValidation();\n        },\n        [fields.inventory_limit]\n    );\n    const handleOnKeyDown = useHandleOnKeyDown(true);\n\n    const inventoryLimitSelector = useCallback(\n        (isSelected) => {\n            const disabled = !isSelected;\n            if (disabled) {\n                fields.inventory_limit.error = '';\n            }\n\n            return (\n                <div onKeyDown={handleOnKeyDown}>\n                    <TextField\n                        disabled={disabled}\n                        label=\"\"\n                        min=\"1\"\n                        type=\"number\"\n                        {...fields.inventory_limit}\n                        onChange={handleChange}\n                    />\n                </div>\n            );\n        },\n        [fields.inventory_limit]\n    );\n\n    let error: string | undefined;\n    if (mode === PriceSettingsType.Amount) {\n        error = fields.inventory_limit.allErrors?.[0];\n    }\n\n    return (\n        <div className=\"InventoryLimit-Selector\">\n            <ChoiceList\n                title=\"\"\n                choices={[\n                    {\n                        label: msg.preorderNoLimitsLabel,\n                        value: PriceSettingsType.None,\n                    },\n                    {\n                        label: '',\n                        value: PriceSettingsType.Amount,\n                        renderChildren: inventoryLimitSelector,\n                    },\n                ]}\n                selected={[mode]}\n                onChange={(v) => setMode(v[0] as PriceSettingsType)}\n            />\n            {!error ? null : <ErrorMessage error={error} />}\n        </div>\n    );\n};\n\nexport const PriceSettingsSelector = ({\n    shopifyPrice,\n    fields,\n    mode,\n    setMode,\n}: {\n    shopifyPrice: number | string | null | undefined;\n    fields: Fields;\n    mode: PriceSettingsMode;\n    setMode: (mode: PriceSettingsMode) => void;\n}) => {\n    const {\n        formatDictionary,\n        formatCurrencyValue,\n        getIntlOptions,\n    } = useFormat();\n    const currencySymbol = useSelector(currencySymbolSelector);\n    const msg = formatDictionary(messages);\n    const priceFields = [\n        fields.price_change_value,\n        fields.price_increase,\n        fields.price_decrease,\n    ];\n\n    let field = fields.price_change_value;\n    if (mode === PriceSettingsMode.Increase) {\n        field = fields.price_increase;\n    }\n    if (mode === PriceSettingsMode.Decrease) {\n        field = fields.price_decrease;\n    }\n\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement | null | undefined>(null);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n\n    useEffect(() => {\n        field.runValidation(field.value);\n    }, [field.value, fields.price_type.value]);\n    const handleChange = useCallback(\n        (newValue: string, id: string) => {\n            // const inputEl = (inputRef.current = wrapperRef.current?.querySelector<\n            //     HTMLInputElement\n            // >('#' + id));\n            // if (inputEl) {\n            //     setCursorPosition(inputEl.selectionStart);\n            // }\n\n            // const { locale } = getIntlOptions();\n            // const normalizedValue = removeFormattingStuff(value, locale);\n\n            // if (normalizedValue !== field.value) {\n            //     field.onChange(normalizedValue);\n            //     field.runValidation(normalizedValue);\n            // }\n\n            field.onChange(newValue);\n            field.runValidation(newValue);\n        },\n        [field]\n    );\n\n    const handleTextFieldChange = useCallback(\n        (value: string) => {\n            const normalizedValue = removeLeadingZero(value);\n            field.onChange(normalizedValue);\n            field.runValidation(normalizedValue);\n        },\n        [field]\n    );\n\n    useEffect(() => {\n        if (inputRef.current && cursorPosition) {\n            inputRef.current.selectionStart = cursorPosition;\n            inputRef.current.selectionEnd = cursorPosition;\n        }\n    }, [cursorPosition]);\n\n    const handleOnKeyDown = useHandleOnKeyDown();\n\n    const priceSettingsSelector = useCallback(\n        (error: string, isValueMode?: boolean) => (isSelected) => {\n            const disabled = !isSelected;\n            const typeValue = fields.price_type.value;\n            // if (isValueMode) {\n            //     fields.price_type.onChange = PriceSettingsType.Amount;\n            // }\n\n            let field = fields.price_change_value;\n\n            const getValue = (field: Field<string>) =>\n                isSelected ? field.value : '';\n            let value = getValue(fields.price_change_value);\n            if (mode === PriceSettingsMode.Increase) {\n                field = fields.price_increase;\n                value = getValue(fields.price_increase);\n            }\n            if (mode === PriceSettingsMode.Decrease) {\n                field = fields.price_decrease;\n                value = getValue(fields.price_decrease);\n            }\n            // const error = field.error;\n\n            if (disabled) {\n                field.error = '';\n            }\n\n            const handleBlur = () => field.runValidation(value);\n\n            return (\n                <div\n                    ref={wrapperRef}\n                    className={classNames('priceSettings', {\n                        'priceSettings--error': !disabled && Boolean(error),\n                    })}\n                >\n                    <ButtonGroup segmented>\n                        {typeValue === PriceSettingsType.Amount ||\n                        isValueMode ? (\n                            <div>\n                                <IntlFormattedNumberField\n                                    disabled={disabled}\n                                    label=\"\"\n                                    type=\"text\"\n                                    min=\"0\"\n                                    step={1}\n                                    {...field}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    error=\"\"\n                                    value={value}\n                                />\n                            </div>\n                        ) : (\n                            <div onKeyDown={handleOnKeyDown}>\n                                <TextField\n                                    disabled={disabled}\n                                    label=\"\"\n                                    type=\"number\"\n                                    min=\"0\"\n                                    step={1}\n                                    {...field}\n                                    error=\"\"\n                                    onChange={handleTextFieldChange}\n                                    onBlur={handleBlur}\n                                    value={String(value)}\n                                />\n                            </div>\n                        )}\n                        {isValueMode ? (\n                            <Button disabled={disabled}>\n                                {currencySymbol}\n                            </Button>\n                        ) : (\n                            <Select\n                                label=\"\"\n                                disabled={disabled}\n                                options={[\n                                    {\n                                        label: currencySymbol,\n                                        value: PriceSettingsType.Amount,\n                                    },\n                                    {\n                                        label: '%',\n                                        value: PriceSettingsType.Percent,\n                                    },\n                                ]}\n                                {...fields.price_type}\n                                value={typeValue}\n                            />\n                        )}\n                        {/* <span className=\"Polaris-TextField__Backdrop\"></span> */}\n                    </ButtonGroup>\n                </div>\n            );\n        },\n        [\n            ...priceFields,\n            fields.price_type,\n            fields.price_type.value,\n            mode,\n            currencySymbol,\n        ]\n    );\n\n    const handleOnChange: ChoiceListProps['onChange'] = useCallback(\n        (v: string[]) => {\n            priceFields.forEach((f) => f.reset());\n            setMode(v[0] as PriceSettingsMode);\n        },\n        [setMode]\n    );\n\n    let error: string | undefined;\n    if (mode === PriceSettingsMode.Value) {\n        error = fields.price_change_value.allErrors?.[0];\n    }\n    if (mode === PriceSettingsMode.Increase) {\n        error = fields.price_increase.allErrors?.[0];\n    }\n    if (mode === PriceSettingsMode.Decrease) {\n        error = fields.price_decrease.allErrors?.[0];\n\n        // const amountError =\n        //     'you cannot reduce the price less than the original price';\n        // let isAmountError = false;\n        // const value = Number(fields.price_decrease.value);\n        // if (fields.price_type.value === PriceSettingsType.Percent) {\n        //     if (value > 100) {\n        //         isAmountError = true;\n        //     }\n        // } else if (Number(value) > (shopifyPrice ?? Infinity)) {\n        //     isAmountError = true;\n        // }\n\n        // if (isAmountError) {\n        //     error = amountError;\n        //     if (!fields.price_decrease.allErrors) {\n        //         fields.price_decrease.allErrors = [];\n        //     }\n        //     fields.price_decrease.allErrors.push(amountError);\n        // }\n    }\n    // error = error ?? '';\n\n    const getError = (field: Field<string>) => error ?? ''; //field.allErrors?.[0] ?? '';\n\n    return (\n        <div>\n            <ChoiceList\n                title=\"\"\n                choices={[\n                    {\n                        label: msg.priceSettingsKeepSameLabel,\n                        value: PriceSettingsMode.Same,\n                    },\n                    {\n                        label: '',\n                        value: PriceSettingsMode.Value,\n                        renderChildren: priceSettingsSelector(\n                            getError(fields.price_change_value),\n                            true\n                        ),\n                    },\n                    {\n                        label: msg.priceSettingsIncreaseLabel,\n                        value: PriceSettingsMode.Increase,\n                        renderChildren: priceSettingsSelector(\n                            getError(fields.price_increase)\n                        ),\n                    },\n                    {\n                        label: msg.priceSettingsDecreaseLabel,\n                        value: PriceSettingsMode.Decrease,\n                        renderChildren: priceSettingsSelector(\n                            getError(fields.price_decrease)\n                        ),\n                    },\n                ]}\n                selected={[mode]}\n                onChange={handleOnChange}\n            />\n            {!error ? null : <ErrorMessage error={error} />}\n        </div>\n    );\n};\n\nexport const ErrorMessage = ({ error }: { error: string }) => (\n    <div className=\"Polaris-Labelled__Error\">\n        <div className=\"Polaris-InlineError\">\n            <div className=\"Polaris-InlineError__Icon\">\n                <Icon source={AlertMinor} />\n            </div>\n            {error}\n        </div>\n    </div>\n);\n\nexport const TitleNode = React.memo(\n    ({ title, withError: anyError }: { title: string; withError: boolean }) => (\n        <span style={{ display: 'flex' }}>\n            {title}\n            {anyError ? (\n                <span\n                    className=\"Polaris-InlineError\"\n                    style={{ marginLeft: '0.5rem' }}\n                >\n                    <Icon source={CircleAlertMajor} />\n                </span>\n            ) : null}\n        </span>\n    )\n);\n\nexport const FooterNode = React.memo(\n    ({\n        title,\n        withError: anyError,\n    }: {\n        title?: string;\n        withError?: boolean;\n    }) => <span style={{ display: 'flex' }}>xxx</span>\n);\n","import { NumberParser, useFormat } from '@contexts/LocaleContext';\nimport { closePopover, openPopover } from '@redux/reducers/app';\nimport { openedPopoverSelector } from '@redux/selectors/app';\nimport store from '@redux/store';\nimport {\n    Popover as PopoverFromPolaris,\n    PopoverCloseSource,\n    PopoverProps,\n    TextField,\n    TextFieldProps,\n} from '@shopify/polaris';\nimport { Field } from '@shopify/react-form';\nimport React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useComponentId, useForceUpdate } from './hooks';\n\ninterface NumberFieldProps {\n    // field: Field<string>;\n}\n\nexport const removeFormattingStuff = (value: string, locale: string) => {\n    // value = value.replace(/,|`| /, '');\n    const numberParser = new NumberParser(locale);\n    const parsedValue = numberParser.tryParse(value);\n    // const result = removeLeadingZero(parsedValue);\n\n    return parsedValue;\n};\n\nexport default function IntlFormattedNumberField(\n    props: NumberFieldProps & TextFieldProps\n) {\n    const { value, disabled, onChange } = props;\n    const { formatCurrencyValue, getIntlOptions } = useFormat();\n    const wrapperRef = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement | null | undefined>(null);\n\n    const [currentValue, setCurrentValue] = useState<string | undefined>(value);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n    const [elementId, setElementId] = useState<string | null>(null);\n\n    const setFormattedCurrentValue = useCallback(\n        (newValue: string | undefined) => {\n            const { options } = getIntlOptions();\n            const formattedValue = formatCurrencyValue(newValue ?? '', options);\n\n            setCurrentValue(formattedValue);\n        },\n        [formatCurrencyValue, setCurrentValue]\n    );\n\n    useEffect(() => setFormattedCurrentValue(value), [\n        value,\n        formatCurrencyValue,\n    ]);\n\n    const handleChange = useCallback(\n        (newValue: string, id: string) => {\n            const inputEl = (inputRef.current = wrapperRef.current?.querySelector<\n                HTMLInputElement\n            >('#' + id));\n            if (inputEl) {\n                setCursorPosition(inputEl.selectionStart);\n                setElementId(id);\n            }\n\n            setCurrentValue(newValue);\n        },\n        [onChange, wrapperRef.current]\n    );\n\n    const handleBlur = useCallback(() => {\n        const { locale } = getIntlOptions();\n        const normalizedValue = removeFormattingStuff(\n            currentValue ?? '',\n            locale\n        );\n\n        if (normalizedValue !== false) {\n            onChange && onChange(normalizedValue, elementId ?? '');\n        } else {\n            setFormattedCurrentValue(value);\n        }\n    }, [onChange, currentValue, value, elementId, setCurrentValue]);\n\n    // useEffect(() => {\n    //     if (inputRef.current && cursorPosition) {\n    //         inputRef.current.selectionStart = cursorPosition;\n    //         inputRef.current.selectionEnd = cursorPosition;\n    //     }\n    // }, [cursorPosition]);\n\n    return (\n        <div ref={wrapperRef}>\n            <TextField\n                {...props}\n                type=\"text\"\n                label=\"\"\n                error=\"\"\n                // value={disabled ? '' : currentValue}\n                value={currentValue}\n                onChange={handleChange}\n                onBlur={handleBlur}\n            />\n        </div>\n    );\n}\n","import { useCallback, useReducer, useRef } from 'react';\nimport { useMedia } from 'react-use';\n\nexport const useIsTablet = () => useMedia('(max-width: 768px)');\n\nlet uniqueId = 0;\nconst getUniqueId = () => uniqueId++;\n\nexport const useComponentId = () => {\n    const idRef = useRef<number | null>(null);\n    if (idRef.current === null) {\n        idRef.current = getUniqueId();\n    }\n    return idRef.current;\n};\nexport const useForceUpdate = () => {\n    const [_, forceUpdate] = useReducer<(x: number) => number>((x) => x + 1, 0);\n    return forceUpdate;\n};\n","import { validator } from '@shopify/react-form';\n\nexport const between = (start: number, end: number, error: string) =>\n    validator<string>(\n        (value) => Number(value) >= start && Number(value) <= end\n    )(error);\n","/*eslint-disable*/\nimport { PriceSettingsMode, PriceType, ProfileDTO } from '@api/types';\nimport { between } from '@components/common/validators';\nimport { profilesSelector } from '@redux/selectors/profiles';\nimport {\n    positiveIntegerString,\n    notEmpty,\n    lengthMoreThan,\n    useForm,\n    reduceFields,\n    useField,\n    Validates,\n    positiveNumericString,\n    validator,\n} from '@shopify/react-form';\nimport { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    ActivationDateType,\n    AvailablityDateMode,\n    PriceSettingsType,\n    ProductSettingsFormProps,\n} from './ModalProductSettingsParts';\nimport format from 'date-fns/esm/format';\nimport parseISO from 'date-fns/esm/parseISO';\nimport messages from '../PreorderStatusBadge/messages';\nimport { useFormat } from '@contexts/LocaleContext';\n\nconst getInventoryMode = (limit?: number | null) => {\n    switch (limit) {\n        case 0:\n        case null:\n        case undefined:\n            return PriceSettingsType.None;\n\n        default:\n            return PriceSettingsType.Amount;\n    }\n};\n\nconst getPriceMode = (\n    priceType: ProfileDTO['price_type'] | '',\n    price?: string | null\n): PriceSettingsMode => {\n    if (price === null && priceType === null) {\n        return PriceSettingsMode.Unstated;\n    }\n\n    if (\n        price === null ||\n        price === undefined ||\n        priceType === PriceSettingsMode.Same ||\n        priceType === ''\n    ) {\n        return PriceSettingsMode.Same;\n    }\n\n    if (priceType === PriceType.SpecificValue) {\n        return PriceSettingsMode.Value;\n    }\n\n    if (1 / Number(price) < 0) {\n        return PriceSettingsMode.Decrease;\n    } else if (1 / Number(price) > 0) {\n        return PriceSettingsMode.Increase;\n    }\n\n    return PriceSettingsMode.Same;\n};\n\nconst getActivationMode = (date?: string | null) => {\n    switch (date) {\n        case '':\n        case null:\n        case undefined:\n            return ActivationDateType.Now;\n\n        default:\n            return ActivationDateType.Setted;\n    }\n};\n\nconst getAvailabilityMode = (date?: string | null) => {\n    switch (date) {\n        case '':\n        case null:\n        case undefined:\n            return AvailablityDateMode.NoDisplay;\n\n        default:\n            return AvailablityDateMode.Display;\n    }\n};\n\nfunction useGetField(\n    value: string = '',\n    validates: Validates<string> = [],\n    deps: any[] = []\n) {\n    return useField<string>(\n        {\n            value,\n            validates,\n        },\n        deps\n    );\n}\nconst getPriceTypeFromInputData = (priceType: ProfileDTO['price_type']) => {\n    switch (priceType) {\n        case PriceType.SpecificValue:\n            return PriceSettingsMode.Value;\n        case PriceType.Amount:\n            return PriceSettingsType.Amount;\n        case PriceType.Percent:\n            return PriceSettingsType.Percent;\n\n        default:\n            return PriceSettingsType.Amount;\n    }\n};\n\nconst getDateFromInputData = (\n    isoString: string | undefined | null | '',\n    validators: any[] = [],\n    deps: any[] = []\n) => {\n    let value: Date | undefined = undefined;\n\n    if (isoString) {\n        value = parseISO(isoString);\n    }\n\n    return useField(\n        {\n            value,\n            validates: validators,\n        },\n        deps\n    );\n};\n\nfunction getPriceTypeForOutputData(\n    mode: PriceSettingsMode,\n    type: PriceSettingsType\n): ProfileDTO['price_type'] {\n    switch (mode) {\n        case PriceSettingsMode.Increase:\n        case PriceSettingsMode.Decrease:\n            return type == PriceSettingsType.Amount\n                ? PriceType.Amount\n                : PriceType.Percent;\n        case PriceSettingsMode.Value:\n            return PriceType.SpecificValue;\n\n        default:\n            return PriceType.Same;\n    }\n}\n\nconst getStartOfDayUTC = (date: Date) =>\n    format(date, 'yyyy-MM-dd') + 'T00:00:00Z';\n\n// export const useOpenedPopover = useCallback((open: boolean) => {\n//     setOpenedPopover(open ? 'AvailabilityDateSelector' : null);\n// }, []);\n\nexport const useProductSettingsFormController = (\n    params: ProductSettingsFormProps\n) => {\n    const {\n        settings: settingsParams,\n        error,\n        forSettings,\n        forAppSettings,\n        onSubmit,\n        onChange,\n        priceShopify,\n    } = params;\n\n    const [openedPopover, setOpenedPopover] = useState<string | null>(null);\n\n    const [settings, setSettings] = useState(settingsParams);\n    const [data, setData] = useState(settingsParams);\n    const initModes = useMemo(\n        () => ({\n            inventory: getInventoryMode(data?.inventory_limit),\n            price: getPriceMode(data?.price_type, data?.price_change_value),\n            activation: getActivationMode(data?.start_date),\n            availability: getAvailabilityMode(data?.availability_date),\n        }),\n        [data]\n    );\n\n    type Filter<T, R> = T extends R ? never : T;\n    const [outterError, setOutterError] = useState<\n        Partial<Filter<typeof error, null | string | undefined>['data'] | null>\n    >(null);\n    useEffect(() => {\n        if (error && typeof error !== 'string' && error.data) {\n            setOutterError({ ...error.data });\n        } else {\n            setOutterError(null);\n        }\n    }, [error]);\n\n    const [inventoryLimitMode, setInventoryLimitMode] = useState(\n        initModes.inventory\n    );\n    const [applyProfile, setApplyProfile] = useState<'true' | 'false'>('false');\n    const profiles = useSelector(profilesSelector);\n    const [selectedProfile, setSelectedProfile] = useState(\n        String(profiles[0]?.id)\n    );\n\n    const profilesOptions = useMemo(\n        () =>\n            profiles.map((p) => ({ label: p.name ?? '', value: String(p.id) })),\n        [profiles]\n    );\n    const [priceMode, setPriceMode] = useState(initModes.price);\n    const [activationMode, setActivationMode] = useState(initModes.activation);\n    const [availabilityMode, setAvailabilityMode] = useState(\n        initModes.availability\n    );\n    const price = settings?.price && Math.abs(Number(settings.price));\n    const shopifyPrice =\n        (settings?.price_shopify && Math.abs(Number(settings.price_shopify))) ??\n        priceShopify;\n\n    useEffect(() => {\n        setPriceMode(getPriceMode(data?.price_type, data?.price_change_value));\n        setInventoryLimitMode(getInventoryMode(data?.inventory_limit));\n        setActivationMode(getActivationMode(data?.start_date));\n        setAvailabilityMode(getAvailabilityMode(data?.availability_date));\n    }, [data]);\n    useEffect(() => {\n        setData(settings);\n    }, [settings]);\n    useEffect(() => {\n        if (selectedProfile === 'undefined') {\n            setSelectedProfile(String(profiles[0]?.id));\n        }\n    }, [profiles]);\n    useEffect(() => {\n        if (inventoryLimitMode !== PriceSettingsType.Amount) {\n            fields.inventory_limit.reset();\n        }\n    }, [inventoryLimitMode]);\n\n    const { formatCurrencyValue, getIntlOptions } = useFormat();\n\n    const positive = positiveNumericString('Must be a positive number');\n    const match = (regexp: RegExp, message: string) =>\n        validator<string>((value) => regexp.test(value), {\n            skipOnEmpty: false,\n        })(message);\n    const startDateNotEmpty = validator<string>(\n        (startDate) => {\n            return (\n                activationMode === ActivationDateType.Now || Boolean(startDate)\n            );\n        },\n        {\n            skipOnEmpty: false,\n        }\n    )('Start date is required');\n    const availabilityDateNotEmpty = validator<string>(\n        (availabilityDate) => {\n            //TODO remove after onchange fix\n            return true;\n            return (\n                availabilityMode === AvailablityDateMode.NoDisplay ||\n                Boolean(availabilityDate)\n            );\n        },\n        {\n            skipOnEmpty: false,\n        }\n    )('Availability date is required');\n\n    const decreaseMaxAmount = validator<string>(\n        (input) => {\n            let isAmountError = false;\n            const value = Number(input);\n            if (fields.price_type.value === PriceSettingsType.Percent) {\n                if (value > 100) {\n                    isAmountError = true;\n                }\n            } else if (value > (shopifyPrice ?? Infinity)) {\n                isAmountError = true;\n            }\n\n            return !isAmountError;\n        },\n        {\n            skipOnEmpty: false,\n        }\n    )('You cannot reduce the price less than the original price');\n\n    const priceLimit = 1e9;\n    const priceChangeValueLimit = between(\n        0,\n        priceLimit,\n        `Set it to any value between 0 and ${formatCurrencyValue(\n            priceLimit.toString()\n        )}`\n    );\n\n    const increaseMaxAmount = validator<string>(\n        (input) => {\n            let isAmountError = false;\n            const value = Number(input);\n            const shopifyPriceNumber = Number(shopifyPrice ?? 0);\n            if (fields.price_type.value === PriceSettingsType.Percent) {\n                if (\n                    shopifyPriceNumber + (value * shopifyPriceNumber) / 100 >\n                    priceLimit\n                ) {\n                    isAmountError = true;\n                }\n            } else if (value + shopifyPriceNumber > priceLimit) {\n                isAmountError = true;\n            }\n\n            return !isAmountError;\n        },\n        {\n            skipOnEmpty: false,\n        }\n    )(\n        `You cannot increase the price more than ${formatCurrencyValue(\n            priceLimit.toString()\n        )}`\n    );\n\n    const getPriceChangeDefaultValue = useCallback(\n        (mode?: PriceSettingsMode) => {\n            const result = Math.abs(\n                +String(\n                    initModes.price === (mode ?? initModes.price)\n                        ? data?.price_change_value ?? 0\n                        : 0\n                )\n            ).toString();\n\n            return result;\n        },\n        [data]\n    );\n\n    const price_type = useGetField(getPriceTypeFromInputData(data?.price_type));\n\n    const fieldsDic = {\n        name: useGetField(data?.name, [\n            notEmpty('Profile Name is required'),\n            lengthMoreThan(2, 'Profile Name must be at least 3 characters'),\n        ]),\n        button_text: useGetField(data?.button_text, [\n            notEmpty('Button Text is required'),\n            match(\n                /^[a-zA-Z0-9-\\s]+$/,\n                'Button Text should only be letters, numbers, hyphens or spaces.'\n            ),\n        ]),\n        button_message: useGetField(data?.button_message, [\n            notEmpty('Button Message is required'),\n            match(\n                /^[a-zA-Z0-9-\\s]+$/,\n                'Button Message should only be letters, numbers, hyphens or spaces.'\n            ),\n        ]),\n        price_change_value: useGetField(getPriceChangeDefaultValue(), [\n            positive,\n            priceChangeValueLimit,\n        ]),\n        price_increase: useGetField(\n            getPriceChangeDefaultValue(PriceSettingsMode.Increase),\n            [positive, priceChangeValueLimit],\n            [price_type.value, shopifyPrice]\n        ),\n        price_decrease: useGetField(\n            getPriceChangeDefaultValue(PriceSettingsMode.Decrease),\n            [positive, decreaseMaxAmount, priceChangeValueLimit],\n            [price_type.value, shopifyPrice]\n        ),\n        price_type,\n        inventory_limit: useGetField(\n            data?.inventory_limit ? String(data?.inventory_limit) : '1',\n            [\n                between(\n                    1,\n                    999,\n                    'Set Quantity limit to any value between 1 and 999'\n                ),\n            ]\n        ),\n        start_date: getDateFromInputData(\n            data?.start_date,\n            [startDateNotEmpty],\n            [activationMode]\n        ),\n        end_date: getDateFromInputData(data?.end_date),\n        availability_date: getDateFromInputData(\n            data?.availability_date,\n            [availabilityDateNotEmpty],\n            [availabilityMode]\n        ),\n    };\n\n    if (forSettings) {\n        // @ts-ignore-next-line\n        delete fieldsDic.name;\n    } else if (forAppSettings) {\n        // @ts-ignore\n        delete fieldsDic.name; // @ts-ignore\n        delete fieldsDic.start_date; // @ts-ignore\n        delete fieldsDic.end_date; // @ts-ignore\n        delete fieldsDic.availability_date; // @ts-ignore\n    } else {\n        // @ts-ignore-next-line\n        delete fieldsDic.availability_date;\n    }\n\n    const { fields, submit, reset, dirty } = useForm({\n        fields: fieldsDic,\n        async onSubmit(form) {\n            const {\n                price_increase,\n                price_decrease,\n                ...settings\n            }: {\n                [K in keyof typeof form]:\n                    | string\n                    | null\n                    | undefined\n                    | Date\n                    | number;\n            } = { ...form };\n            settings.price_type = getPriceTypeForOutputData(\n                priceMode,\n                form.price_type as PriceSettingsType\n            );\n\n            if (priceMode === PriceSettingsMode.Increase) {\n                settings.price_change_value = price_increase;\n            }\n\n            if (priceMode === PriceSettingsMode.Decrease) {\n                settings.price_change_value = '-' + price_decrease;\n            }\n\n            if (priceMode === PriceSettingsMode.Same) {\n                settings.price_change_value = '';\n                // settings.price_type = '';\n            }\n\n            if (inventoryLimitMode === PriceSettingsType.None) {\n                settings.inventory_limit = '';\n            } else if (form.inventory_limit === undefined) {\n                settings.inventory_limit = '0';\n            }\n\n            if (activationMode === ActivationDateType.Now) {\n                settings.start_date = '';\n                settings.end_date = '';\n            } else {\n                settings.start_date =\n                    // form.start_date && form.start_date.toISOString();\n                    form.start_date && getStartOfDayUTC(form.start_date);\n                settings.end_date =\n                    form.end_date && getStartOfDayUTC(form.end_date);\n            }\n\n            if ('availability_date' in settings) {\n                if (availabilityMode === AvailablityDateMode.NoDisplay) {\n                    settings.availability_date = '';\n                } else {\n                    settings.availability_date =\n                        form.availability_date &&\n                        getStartOfDayUTC(form.availability_date);\n                }\n            }\n\n            settings.start_date = settings.start_date ?? '';\n            settings.end_date = settings.end_date ?? '';\n            settings.availability_date = settings.availability_date ?? '';\n\n            if (onChange) {\n                onChange(settings);\n            } else {\n                onSubmit && onSubmit(settings);\n            }\n\n            const remoteErrors = []; // your API call goes here\n            if (remoteErrors.length > 0) {\n                return { status: 'fail', errors: remoteErrors };\n            }\n\n            return { status: 'success' };\n        },\n    });\n\n    // useEffect(() => {\n    //     if (priceMode === PriceSettingsMode.Value) {\n    //         fields.price_type.value = PriceSettingsType.Amount;\n    //     }\n    // }, [priceMode]);\n\n    useEffect(() => {\n        if (\n            priceMode === PriceSettingsMode.Increase ||\n            priceMode === PriceSettingsMode.Decrease\n        ) {\n            if (\n                fields.price_type.value !== PriceSettingsType.Amount &&\n                fields.price_type.value !== PriceSettingsType.Percent\n            ) {\n                fields.price_type.value = PriceSettingsType.Amount;\n            }\n        }\n    }, [priceMode, fields.price_type.value]);\n\n    const handleApplyProfile = useCallback(\n        ([selected]: (string | undefined)[]) => {\n            // // when false it`s applied\n            const applied = selected === 'true';\n            setApplyProfile(applied ? 'true' : 'false');\n\n            let newData = data;\n\n            if (applied) {\n                const profile = profiles.find(\n                    (p) => String(p.id) === selectedProfile\n                );\n                if (profile) {\n                    // const { price, ...rest } = profile;\n                    // newData = { ...newData, ...rest };\n                    newData = profile;\n                }\n            } else {\n                newData = settings;\n            }\n\n            setData(newData);\n        },\n        [settings, profiles, data]\n    );\n\n    const handleSelectProfile = useCallback(\n        (selected: string) => {\n            const profile = profiles.find((p) => String(p.id) === selected);\n\n            if (profile) {\n                setSelectedProfile(selected);\n                setData(profile);\n            }\n        },\n        [settings, profiles, data]\n    );\n\n    const resetForm = () => {\n        reset();\n        setInventoryLimitMode(initModes.inventory);\n        setPriceMode(initModes.price);\n        setActivationMode(initModes.activation);\n        setApplyProfile('false');\n    };\n\n    if (dirty && outterError) {\n        // makeCleanFields(fields);\n        setOutterError(null);\n    } else if (outterError && typeof outterError !== 'string') {\n        const validationErrors = outterError.errors;\n        if (validationErrors) {\n            Object.keys(validationErrors).forEach((validationErrorKey) => {\n                if (validationErrorKey in fields) {\n                    fields[validationErrorKey as keyof typeof fields].error =\n                        validationErrors[validationErrorKey][0];\n                }\n            });\n            fields.price_type.error = '';\n        }\n    }\n\n    const handleOnSubmit = useCallback(() => {\n        // if (inventoryLimitMode !== PriceSettingsType.Amount) {\n        //     fields.inventory_limit.reset();\n        // }\n        submit();\n    }, [fields]);\n\n    const anyError = reduceFields(\n        fields,\n        (acc, field) => Boolean(field.allErrors?.length) || acc,\n        false\n    );\n\n    return {\n        fields,\n        setSettings,\n        price,\n        shopifyPrice,\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        applyProfile,\n        handleApplyProfile,\n        profilesOptions,\n        handleSelectProfile,\n        selectedProfile,\n        priceMode,\n        setPriceMode,\n        inventoryLimitMode,\n        setInventoryLimitMode,\n        activationMode,\n        setActivationMode,\n        availabilityMode,\n        setAvailabilityMode,\n        openedPopover,\n        setOpenedPopover,\n    };\n};\n","/*eslint-disable*/\nimport React from 'react';\nimport {\n    FormLayout,\n    TextContainer,\n    TextField,\n    Heading,\n    ChoiceList,\n    Select,\n} from '@shopify/polaris';\nimport { useFormat } from '@contexts/LocaleContext';\nimport messages from './messages';\nimport './modal-product-settings.styles.scss';\nimport {\n    ActivationDatesSelector,\n    ActivationDateType,\n    AvailabilityDateSelector,\n    InventoryLimitSelector,\n    PriceSettingsSelector,\n    ProductSettingsFormProps,\n} from './ModalProductSettingsParts';\nimport { useProductSettingsFormController } from './productSettingsFormControllerHook';\nimport { getFormattedPriceString } from '@components/utils/functions';\nimport { settings } from 'cluster';\nimport { PreorderStatus } from '@api/types';\n\nexport default function useProductSettingsForm(\n    params: ProductSettingsFormProps\n) {\n    const {\n        forSettings,\n        forAppSettings,\n        onChange,\n        isVariant,\n        // priceShopify: priceShopifyFromList,\n        preorderStatusFromList,\n    } = params;\n\n    const { formatDictionary, getPriceString } = useFormat();\n    const msg = formatDictionary(messages);\n\n    const {\n        fields,\n        setSettings,\n        price,\n        shopifyPrice,\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        applyProfile,\n        handleApplyProfile,\n        profilesOptions,\n        handleSelectProfile,\n        selectedProfile,\n        priceMode,\n        setPriceMode,\n        inventoryLimitMode,\n        setInventoryLimitMode,\n        activationMode,\n        setActivationMode,\n        availabilityMode,\n        setAvailabilityMode,\n        openedPopover,\n        setOpenedPopover,\n    } = useProductSettingsFormController(params);\n\n    React.useEffect(() => {\n        onChange && handleOnSubmit();\n    }, [\n        ...Object.values(fields).map((f) => f.value),\n        priceMode,\n        inventoryLimitMode,\n        activationMode,\n        availabilityMode,\n    ]);\n\n    // const shopifyPrice = priceShopify ?? priceShopifyFromList;\n    const statusDisabled =\n        !preorderStatusFromList ||\n        preorderStatusFromList === PreorderStatus.Disabled;\n\n    const handlePropagation = React.useCallback((e: React.SyntheticEvent) => {\n        e.stopPropagation();\n    }, []);\n\n    const form = (\n        <FormLayout>\n            <div\n                className=\"form--modal\"\n                onTouchStart={handlePropagation}\n                onMouseDown={handlePropagation}\n            >\n                {!forSettings ? null : (\n                    <div className=\"modalForm apllyProfile\">\n                        <FormLayout.Group>\n                            <TextContainer>\n                                <div className=\"flex-top\">\n                                    <Heading>{msg.assignProfileLabel}</Heading>\n                                </div>\n                            </TextContainer>\n                            <ChoiceList\n                                title=\"\"\n                                selected={[applyProfile]}\n                                onChange={handleApplyProfile}\n                                choices={[\n                                    {\n                                        label: '',\n                                        value: 'true',\n                                        renderChildren: (isSelected) => {\n                                            return (\n                                                <Select\n                                                    label=\"\"\n                                                    disabled={!isSelected}\n                                                    options={profilesOptions}\n                                                    onChange={\n                                                        handleSelectProfile\n                                                    }\n                                                    value={selectedProfile}\n                                                />\n                                            );\n                                        },\n                                    },\n                                    {\n                                        label: 'Set custom settings',\n                                        value: 'false',\n                                    },\n                                ]}\n                            />\n                        </FormLayout.Group>\n                        <div className=\"topWarning\">\n                            <TextContainer>\n                                {isVariant\n                                    ? msg.applySettingsVariantWarning\n                                    : msg.applySettingsProductWarning}\n                            </TextContainer>\n                        </div>\n                    </div>\n                )}\n                <div className=\"disableBox\">\n                    {applyProfile === 'false' ? null : (\n                        <div className=\"disableBox__overlay\"></div>\n                    )}\n                    <div className=\"modalForm\">\n                        {forSettings || forAppSettings ? null : (\n                            <FormLayout.Group>\n                                <TextContainer>\n                                    <div className=\"flex-top\">\n                                        <Heading>{msg.nameLabel}</Heading>\n                                    </div>\n                                </TextContainer>\n                                <div className=\"flex-top\">\n                                    <TextField\n                                        label=\"\"\n                                        type=\"text\"\n                                        {...fields.name}\n                                    />\n                                </div>\n                            </FormLayout.Group>\n                        )}\n                        <FormLayout.Group>\n                            <TextContainer>\n                                <div className=\"flex-top\">\n                                    <Heading>{msg.buttonTextLabel}</Heading>\n                                </div>\n                            </TextContainer>\n                            <div className=\"flex-top\">\n                                <TextField\n                                    label=\"\"\n                                    type=\"text\"\n                                    {...fields.button_text}\n                                />\n                            </div>\n                        </FormLayout.Group>\n                        <FormLayout.Group>\n                            <TextContainer>\n                                <div className=\"flex-top\">\n                                    <Heading>{msg.buttonMessageLabel}</Heading>\n                                </div>\n                            </TextContainer>\n                            <div className=\"flex-top\">\n                                <TextField\n                                    label=\"\"\n                                    type=\"text\"\n                                    {...fields.button_message}\n                                />\n                            </div>\n                        </FormLayout.Group>\n                        {!forSettings ? null : (\n                            <>\n                                {shopifyPrice == null ? null : (\n                                    <FormLayout.Group>\n                                        <TextContainer>\n                                            <div className=\"flex-top\">\n                                                <Heading>\n                                                    {isVariant\n                                                        ? msg.shopifyVariantPriceLabel\n                                                        : msg.shopifyProductPriceLabel}\n                                                </Heading>\n                                            </div>\n                                        </TextContainer>\n                                        <TextContainer>\n                                            <div className=\"flex-top\">\n                                                <Heading>\n                                                    {getPriceString(\n                                                        shopifyPrice\n                                                    )}\n                                                </Heading>\n                                            </div>\n                                        </TextContainer>\n                                    </FormLayout.Group>\n                                )}\n                                {applyProfile === 'true' ||\n                                statusDisabled ||\n                                price == null ? null : (\n                                    <FormLayout.Group>\n                                        <TextContainer>\n                                            <div className=\"flex-top\">\n                                                <Heading>\n                                                    {msg.preOrderPriceLabel}\n                                                </Heading>\n                                            </div>\n                                        </TextContainer>\n                                        <TextContainer>\n                                            <div className=\"flex-top\">\n                                                <Heading>\n                                                    {getPriceString(price)}\n                                                </Heading>\n                                            </div>\n                                        </TextContainer>\n                                    </FormLayout.Group>\n                                )}\n                            </>\n                        )}\n                        <FormLayout.Group>\n                            <TextContainer>\n                                <div className=\"flex-top\">\n                                    <Heading>{msg.priceSettingsLabel}</Heading>\n                                </div>\n                            </TextContainer>\n                            <PriceSettingsSelector\n                                shopifyPrice={shopifyPrice}\n                                fields={fields}\n                                mode={priceMode}\n                                setMode={setPriceMode}\n                            />\n                        </FormLayout.Group>\n                        <FormLayout.Group>\n                            <TextContainer>\n                                <div className=\"flex-top\">\n                                    <Heading>{msg.preorderLimitLabel}</Heading>\n                                </div>\n                            </TextContainer>\n                            <InventoryLimitSelector\n                                fields={fields}\n                                mode={inventoryLimitMode}\n                                setMode={setInventoryLimitMode}\n                            />\n                        </FormLayout.Group>\n                    </div>\n                    {forAppSettings ? null : (\n                        <div className=\"modalForm modalForm__Columned\">\n                            <FormLayout.Group>\n                                <TextContainer>\n                                    <div className=\"flex-top\">\n                                        <Heading>\n                                            {msg.activationDateLabel}\n                                        </Heading>\n                                    </div>\n                                </TextContainer>\n                                <ActivationDatesSelector\n                                    fields={fields}\n                                    mode={activationMode}\n                                    setMode={setActivationMode}\n                                />\n                            </FormLayout.Group>\n                        </div>\n                    )}\n                    {!forSettings || forAppSettings ? null : (\n                        <div className=\"modalForm modalForm__Columned\">\n                            <FormLayout.Group>\n                                <TextContainer>\n                                    <div className=\"flex-top\">\n                                        <Heading>\n                                            {msg.availabilityDateLabel}\n                                        </Heading>\n                                    </div>\n                                </TextContainer>\n                                <AvailabilityDateSelector\n                                    fields={fields}\n                                    isStartDateEnabled={\n                                        activationMode ===\n                                        ActivationDateType.Setted\n                                    }\n                                    mode={availabilityMode}\n                                    setMode={setAvailabilityMode}\n                                    openedPopover={openedPopover}\n                                    setOpenedPopover={setOpenedPopover}\n                                />\n                            </FormLayout.Group>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </FormLayout>\n    );\n\n    return {\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        form,\n        setSettings,\n    };\n}\n","import { closePopover, openPopover } from '@redux/reducers/app';\nimport { openedPopoverSelector } from '@redux/selectors/app';\nimport store from '@redux/store';\nimport {\n    Popover as PopoverFromPolaris,\n    PopoverCloseSource,\n    PopoverProps,\n} from '@shopify/polaris';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useComponentId, useForceUpdate } from './hooks';\n\n// let openedPopover: HTMLDivElement | null = null;\n\n// export const useOpenedPopover = () => {\n//     // const [openedPopover, setOpenedPopover] = useState<string | null>(null);\n\n//    const setOpenedPopover = useCallback((open: boolean) => {\n//         setOpenedPopover(open ? 'AvailabilityDateSelector' : null);\n//     }, []);\n// };\n\nconst wrapperClass = 'preorder-popover-activator-wrapper';\n\ndocument.addEventListener('click', (e: MouseEvent) => {\n    let element: HTMLElement | null = e.target as HTMLElement;\n\n    while (true) {\n        if (\n            element.hasAttribute('data-preorder-popover-id') ||\n            element.matches('.' + wrapperClass)\n        ) {\n            break;\n        }\n\n        element = element.parentElement;\n\n        if (!element) {\n            store.dispatch(openPopover(null));\n            break;\n        }\n    }\n});\n\nexport default function CustomPopover(props: PopoverProps) {\n    const { active, onClose } = props;\n    let activator = props.activator;\n    // const ref = React.useRef(null);\n    // const forceUpdate = useForceUpdate();\n    const dispatch = useDispatch();\n    const id = useComponentId();\n    const openedPopover = useSelector(openedPopoverSelector);\n\n    activator = React.useMemo(\n        () => <div className={wrapperClass}>{activator}</div>,\n        [activator]\n    );\n\n    React.useEffect(() => {\n        if (active) {\n            dispatch(openPopover(id));\n        } else {\n            dispatch(closePopover(id));\n        }\n    }, [active, id, dispatch]);\n\n    let activeValue = false;\n    if (openedPopover === id && openedPopover !== null) {\n        activeValue = true;\n    }\n\n    React.useEffect(() => {\n        if (!activeValue) {\n            onClose(PopoverCloseSource.Click);\n        }\n    }, [activeValue]);\n\n    return (\n        // <div ref={ref}>\n        <PopoverFromPolaris\n            {...props}\n            active={activeValue}\n            activator={activator}\n        >\n            <div data-preorder-popover-id={id}>{props.children}</div>\n        </PopoverFromPolaris>\n        // </div>\n    );\n}\n"],"sourceRoot":""}