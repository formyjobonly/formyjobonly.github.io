{"version":3,"sources":["components/AppSettings/DefaultProfileSettings/DefaultProfileSettings.tsx","../libs/utils/design-settings/design-settings.ts","../libs/utils/design-settings/types.ts","components/ui-kit/ColorPicker/ColorPicker.tsx","components/AppSettings/StyleToolbar/images/Fill.svg","components/ui-kit/Checkbox/Checkbox.tsx","components/AppSettings/StyleToolbar/StyleToolbar.tsx","components/AppSettings/DesignSettings/ButtonConfigurator/ButtonConfigurator.tsx","components/AppSettings/DesignSettings/DesignSettings.tsx","components/AppSettings/AppSettings.tsx"],"names":["DefaultProfileSettings","settings","useSelector","appSettingsSelector","dispatch","useDispatch","getRefinedSettings","useCallback","inventory_limit","onChange","form","patchAppSettings","useProductSettingsForm","forAppSettings","setSettings","resetForm","handleOnSubmit","anyError","React","useEffect","className","DisplayText","size","fontRange","validateFont","value","Number","isNaN","toString","getStylesString","color","background_color","result","border_color","font_family","font_size","font_weight","text_decoration","font_style","border_radius","border_width","Object","keys","forEach","keyFromState","key","replace","slice","fonts","label","ColorPicker","enabled","inputColor","children","useState","open","setOpen","setColor","handleClick","handleChange","colorResult","alpha","Math","floor","rgb","a","hex","length","activator","onClick","style","backgroundColor","Popover","active","onClose","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","transform","stroke","d","_ref","svgRef","title","props","width","height","viewBox","preserveAspectRatio","ref","ForwardRef","forwardRef","Checkbox","handleOnChange","e","type","checked","StyleToolbar","handleColorChange","handleBackgroundColorChange","handleFontChange","fontSize","onChangeFontSize","decreaseFontSize","increaseFontSize","handleFontSizeChange","handleFontSizeBlur","handleFontWeightChange","handleFontStyleChange","handleTextDecorationChange","Stack","Item","Icon","EditMajor","Select","options","ButtonGroup","segmented","Button","icon","MinusMinor","disabled","TextField","onBlur","MobilePlusMajor","ButtonConfigurator","selected","area","buttonText","buttonMessage","handleSetSelected","part","setSelected","handleStyleChange","patchAreaDesignSettingsInState","handleReset","resetDesignSettings","refButton","useRef","current","setAttribute","button","refHover","hover","refButtonHover","Card","Section","fullWidth","vertical","classNames","plain","DesignSettings","appSettings","preorderSettings","preorderDesignSettingsSelector","preorderSettingsTarget","preorderSelectedDesignSettingsSelector","checkoutDesignSettingsSelector","checkoutSelectedDesignSettingsSelector","preorder_button","button_text","button_message","AppSettings","handleSave","updateSettings","getSettings","resetSettings","primary"],"mappings":"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","file":"static/js/7.fce8975c.chunk.js","sourcesContent":["import { Profile } from '@api/types';\nimport useProductSettingsForm from '@components/Products/ModalProductSettings/productSettingsFormHook';\nimport { patchAppSettings } from '@redux/reducers/settings';\nimport { appSettingsSelector } from '@redux/selectors/settings';\nimport { DisplayText } from '@shopify/polaris';\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './default-profile-settings.scss';\n\ninterface Props {\n    onChange: Parameters<typeof useProductSettingsForm>[0]['onChange'];\n}\n\nexport default function DefaultProfileSettings() {\n    const settings = useSelector(appSettingsSelector);\n    const dispatch = useDispatch();\n\n    const getRefinedSettings = useCallback(\n        () => ({\n            ...settings,\n            inventory_limit: +settings!.inventory_limit,\n        }),\n        [settings]\n    );\n\n    const onChange = useCallback((form) => {\n        dispatch(patchAppSettings(form));\n    }, []);\n\n    const {\n        resetForm,\n        handleOnSubmit,\n        anyError,\n        setSettings,\n        form,\n    } = useProductSettingsForm({\n        onChange,\n        settings: getRefinedSettings(),\n        forAppSettings: true,\n    });\n\n    React.useEffect(() => {\n        setSettings(getRefinedSettings());\n    }, [settings, setSettings]);\n\n    return (\n        <div className=\"defaultProfileSetttings\">\n            <DisplayText size=\"large\">New Profile Create Settings</DisplayText>\n            <div className=\"defaultProfileSetttings__form\">{form}</div>\n        </div>\n    );\n}\n","import { CommonDesignSettingsDTO } from './types';\n\nexport const fontRange = {\n    min: 10,\n    max: 50,\n} as const;\n\nexport const validateFont = (size: string) => {\n    let value = Number(size);\n    if (isNaN(value)) {\n        value = fontRange.min;\n    } else if (value < fontRange.min) {\n        value = fontRange.min;\n    } else if (value > fontRange.max) {\n        value = fontRange.max;\n    }\n\n    return value.toString();\n};\n\nexport const getStylesString = (settings?: CommonDesignSettingsDTO) => {\n    if (!settings) {\n        return '';\n    }\n\n    const {\n        color,\n        background_color,\n        border_color,\n        font_family,\n        font_size,\n        font_weight,\n        text_decoration,\n        font_style,\n        border_radius,\n        border_width,\n    } = settings;\n\n    let result = '';\n\n    type Keys = keyof typeof settings;\n\n    Object.keys(settings).forEach((keyFromState) => {\n        const key = keyFromState.replace('_', '-');\n        let value = settings[keyFromState as Keys];\n        if (key === 'font-size') {\n            value = validateFont(settings.font_size.slice(0, -2)) + 'px';\n        }\n\n        result += `${key}: ${value}; `;\n    });\n    // result += `padding: 12px 30px;`;\n    result += `border-color: ${background_color}`;\n\n    // result += `background-color: ${background_color}; `;\n    // result += `border-radius: ${background_color}; `;\n\n    return result;\n    // ` border-radius: 1px; border-color: rgba(4, 120, 205, 0.5); border-width: 1px; color: rgb(255, 255, 255); font-size: 18px; font-family: inherit; font-style: normal; font-weight: bold; text-decoration: underline;`;\n    // `background-color: rgba(122, 125, 158, 0.5); padding: 23px 30px; border-radius: 1px; border-color: rgba(4, 120, 205, 0.5); border-width: 1px; color: rgb(255, 255, 255); font-size: 18px; font-family: inherit; font-style: normal; font-weight: bold; text-decoration: underline;`;\n};\n","import { Nullable } from '@libs/common/types';\n\nexport const fontsValues = [\n    { label: 'Theme Default', value: 'inherit' },\n    { label: 'Arial', value: 'Arial, sans-serif' },\n    { label: 'Geneva', value: 'Geneva, Tahoma, sans-serif' },\n    { label: 'Georgia', value: 'Georgia, serif' },\n    { label: 'Times', value: 'Times, Times New Roman, serif' },\n    { label: 'Verdana', value: 'Verdana, sans-serif' },\n] as const;\n\nexport const fonts = (fontsValues as unknown) as {\n    label: string;\n    value: string;\n}[];\n\nexport type FontsValues = typeof fontsValues[number]['value'];\n\nexport interface BaseDesignSettingsDTO {\n    color: string;\n    background_color: string;\n    border_color: string;\n    font_family: FontsValues;\n    font_size: string;\n    font_weight: 'bold' | 'normal';\n    text_decoration: 'underline' | 'none';\n    font_style: 'italic' | 'normal';\n    border_radius: string;\n    border_width: string;\n    padding_top: string;\n    padding_bottom: string;\n    padding_right: string;\n    padding_left: string;\n}\n\ninterface AuxDesignSettingsDTO {\n    // user_id: string;\n    // created_at: string;\n    // updated_at: string;\n}\n\nexport type CommonDesignSettingsDTO = BaseDesignSettingsDTO &\n    AuxDesignSettingsDTO;\n\nconst area = ['preorder', 'checkout'] as const;\nexport type Area = typeof area[number];\n\nconst buttonParts = ['button', 'hover', 'message'] as const;\nexport type ButtonPart = typeof buttonParts[number];\n\nconst designStates = ['current', 'default'] as const;\ntype DesignStates = typeof designStates[number];\n\nexport type ButtonPartSettings = Record<ButtonPart, CommonDesignSettingsDTO>;\ntype AreaSettings = Record<Area, ButtonPartSettings>;\n\ntype DesignValuesDTO = {\n    [K in DesignStates]: AreaSettings;\n};\n\nexport interface DesignSettingsDTO extends DesignValuesDTO {\n    // user_id: string;\n    // created_at: string;\n    // updated_at: string;\n}\n\nexport interface AppDefaultSettingsDTO {\n    price?: string;\n    price_change_value: string;\n    price_type: 'specific' | 'relative_percent' | 'relative_amount' | 'same';\n    start_date: string;\n    end_date: string;\n    inventory_limit: string;\n    button_text: string;\n    button_message: string;\n\n    user_id: string;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface AppSettingsDTO {\n    design_settings: DesignSettingsDTO;\n    app_settings: AppDefaultSettingsDTO;\n}\nexport type AppSettingsParam = Nullable<\n    Omit<AppSettingsDTO, 'design_settings'> & {\n        design_settings: { current: AreaSettings | null };\n    }\n>;\n\nexport type AppSettingsInState = {\n    settings: {\n        design: DesignSettingsInState;\n        app: AppDefaultSettingsDTO | null;\n    };\n};\nexport interface DesignSettingsInState {\n    selected: Record<Area, ButtonPart>;\n    state: DesignSettingsDTO | null;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './color-picker.scss';\nimport { ChromePicker, ColorChangeHandler } from 'react-color';\nimport { Popover } from '@shopify/polaris';\n\ninterface Props {\n    enabled?: boolean;\n    color: string;\n    onChange: (color: string) => void;\n}\n\nconst ColorPicker: React.FC<Props> = ({\n    enabled,\n    color: inputColor,\n    onChange,\n    children,\n}) => {\n    const [open, setOpen] = useState(false);\n    const [color, setColor] = useState(inputColor);\n    useEffect(() => {\n        setColor(inputColor);\n    }, [inputColor]);\n\n    const handleClick = useCallback(() => {\n        setOpen(!open);\n    }, [open]);\n    const handleChange: ColorChangeHandler = useCallback(\n        (colorResult) => {\n            const alpha = Math.floor(255 * colorResult.rgb.a!).toString(16);\n            const hex =\n                colorResult.hex + (alpha.length === 1 ? `0${alpha}` : alpha);\n\n            setColor(hex);\n            onChange(hex);\n        },\n        [open]\n    );\n    const handleClose = useCallback(\n        (color) => {\n            // setColor(color.hex);\n            // onChange(color.hex);\n        },\n        [open]\n    );\n    const activator = (\n        <div className=\"colorPicker__opener\" onClick={handleClick}>\n            {children}\n            <div\n                className=\"colorPicker__colorBox\"\n                style={{ backgroundColor: color }}\n            ></div>\n        </div>\n    );\n\n    return (\n        <div className=\"colorPicker\">\n            <Popover active={open} activator={activator} onClose={handleClick}>\n                <ChromePicker\n                    // disableAlpha={false}\n                    color={color}\n                    onChange={handleChange}\n                />\n            </Popover>\n        </div>\n    );\n};\n\nexport default ColorPicker;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(-5.000000,21.000000) scale(0.09,-0.09)\",\n  stroke: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M104 203 c4 -10 -3 -27 -21 -45 l-27 -28 37 -38 37 -37 37 38 37 37 -44 45 c-46 46 -67 57 -56 28z m49 -51 c15 -16 14 -17 -23 -17 -37 0 -38 1 -23 17 9 10 19 18 23 18 4 0 14 -8 23 -18z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M206 103 c-12 -12 -6 -43 9 -43 8 0 15 9 15 19 0 21 -13 34 -24 24z\"\n}));\n\nvar SvgFill = function SvgFill(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"20pt\",\n    height: \"20pt\",\n    viewBox: \"0 0 20 20\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgFill, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/Fill.8cf8079e.svg\";\nexport { ForwardRef as ReactComponent };","import React, { ChangeEventHandler, useCallback, useState } from 'react';\nimport './checkbox.scss';\nimport { ChromePicker, ColorChangeHandler } from 'react-color';\nimport { Popover } from '@shopify/polaris';\n\ninterface Props {\n    enabled?: boolean;\n    value: boolean;\n    onChange: (result: boolean) => void;\n    fontSize?: string;\n}\n\nconst Checkbox: React.FC<Props> = ({ enabled, value, onChange, children }) => {\n    const handleOnChange: ChangeEventHandler<any> = useCallback(\n        (e) => {\n            onChange(!value);\n        },\n        [value, onChange]\n    );\n\n    return (\n        <label className=\"custom-checkbox\">\n            <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={handleOnChange}\n            ></input>\n            <div className=\"custom-checkbox__content\">{children}</div>\n        </label>\n    );\n};\n\nexport default Checkbox;\n","import ColorPicker from '@components/ui-kit/ColorPicker/ColorPicker';\nimport {\n    Button,\n    ButtonGroup,\n    Icon,\n    Select,\n    Stack,\n    TextField,\n} from '@shopify/polaris';\nimport { EditMajor, MobilePlusMajor, MinusMinor } from '@shopify/polaris-icons';\nimport './style-toolbar.scss';\nimport React, { useCallback, useState } from 'react';\nimport { ReactComponent as Fill } from './images/Fill.svg';\nimport Checkbox from '@components/ui-kit/Checkbox/Checkbox';\nimport { BaseDesignSettingsDTO, fonts } from '@api/types/settings';\nimport { fontRange, validateFont } from '@libs/utils/design-settings';\n\ninterface Props {\n    enabled?: boolean;\n    settings: BaseDesignSettingsDTO;\n    onChange: (style: Partial<BaseDesignSettingsDTO>) => void;\n}\n\nexport default function StyleToolbar({ enabled, settings, onChange }: Props) {\n    const handleColorChange = useCallback(\n        (color: string) => onChange({ color }),\n        []\n    );\n    const handleBackgroundColorChange = useCallback(\n        (background_color: string) => onChange({ background_color }),\n        []\n    );\n    const handleFontChange = useCallback(\n        (font_family: BaseDesignSettingsDTO['font_family']) =>\n            onChange({ font_family }),\n        []\n    );\n\n    const fontSize = settings.font_size.slice(0, -2);\n\n    const onChangeFontSize = useCallback(\n        (size: string) => {\n            const font_size = validateFont(size) + 'px';\n            onChange({ font_size });\n        },\n        [onChange]\n    );\n    const decreaseFontSize = useCallback(() => {\n        const font_size = `${Number(fontSize) - 1}`;\n        onChangeFontSize(font_size);\n    }, [fontSize]);\n\n    const increaseFontSize = useCallback(() => {\n        const font_size = `${Number(fontSize) + 1}`;\n        onChangeFontSize(font_size);\n    }, [fontSize]);\n\n    const handleFontSizeChange = useCallback(\n        (e: string) => {\n            const font_size = e + 'px';\n            onChange({ font_size });\n        },\n        [fontSize]\n    );\n\n    const handleFontSizeBlur = useCallback(() => {\n        const font_size = validateFont(fontSize) + 'px';\n        onChange({ font_size });\n    }, [fontSize]);\n\n    const handleFontWeightChange = useCallback(() => {\n        const font_weight = settings.font_weight === 'bold' ? 'normal' : 'bold';\n        onChange({ font_weight });\n    }, [settings.font_weight, onChange]);\n\n    const handleFontStyleChange = useCallback(() => {\n        const font_style =\n            settings.font_style === 'italic' ? 'normal' : 'italic';\n        onChange({ font_style });\n    }, [settings.font_style, onChange]);\n\n    const handleTextDecorationChange = useCallback(() => {\n        const text_decoration =\n            settings.text_decoration === 'underline' ? 'none' : 'underline';\n        onChange({ text_decoration });\n    }, [settings.text_decoration, onChange]);\n\n    return (\n        <div className=\"styleToolbar\">\n            <Stack>\n                <Stack.Item>\n                    <Stack>\n                        <div className=\"styleToolbar__colorPicker\">\n                            <ColorPicker\n                                color={settings.color}\n                                // color={settings.color}\n                                onChange={handleColorChange}\n                            >\n                                <Icon color=\"inkLighter\" source={EditMajor} />\n                            </ColorPicker>\n                        </div>\n                        <div className=\"styleToolbar__colorPicker\">\n                            <ColorPicker\n                                color={settings.background_color}\n                                onChange={handleBackgroundColorChange}\n                            >\n                                <div className=\"styleToolbar__backgroundIcon\">\n                                    <Fill />\n                                </div>\n                            </ColorPicker>\n                        </div>\n                        <div className=\"styleToolbar__fontSelector\">\n                            <Select\n                                label=\"\"\n                                options={fonts}\n                                onChange={handleFontChange}\n                                value={settings.font_family}\n                            ></Select>\n                        </div>\n                        <div className=\"styleToolbar__fontSize\">\n                            <ButtonGroup segmented>\n                                <Button\n                                    icon={\n                                        <Icon\n                                            color=\"inkLighter\"\n                                            source={MinusMinor}\n                                        />\n                                    }\n                                    onClick={decreaseFontSize}\n                                    disabled={\n                                        Number(fontSize) === fontRange.min\n                                    }\n                                ></Button>\n                                <TextField\n                                    label=\"\"\n                                    onChange={handleFontSizeChange}\n                                    onBlur={handleFontSizeBlur}\n                                    value={fontSize}\n                                ></TextField>\n                                <Button\n                                    disabled={\n                                        Number(fontSize) === fontRange.max\n                                    }\n                                    icon={\n                                        <Icon\n                                            color=\"inkLighter\"\n                                            source={MobilePlusMajor}\n                                        />\n                                    }\n                                    onClick={increaseFontSize}\n                                ></Button>\n                            </ButtonGroup>\n                        </div>\n                    </Stack>\n                </Stack.Item>\n                <Stack.Item>\n                    <Stack>\n                        <div className=\"styleToolbar__fontStyleGroup\">\n                            <div className=\"styleToolbar__fontWeight\">\n                                <Checkbox\n                                    value={settings.font_weight === 'bold'}\n                                    onChange={handleFontWeightChange}\n                                >\n                                    <span className=\"styleToolbar__fontWeightContent\">\n                                        B\n                                    </span>\n                                </Checkbox>\n                            </div>\n                            <div className=\"styleToolbar__fontStyle\">\n                                <Checkbox\n                                    value={settings.font_style === 'italic'}\n                                    onChange={handleFontStyleChange}\n                                >\n                                    <span className=\"styleToolbar__fontStyleContent\">\n                                        I\n                                    </span>\n                                </Checkbox>\n                            </div>\n                            <div className=\"styleToolbar__textDecoration\">\n                                <Checkbox\n                                    value={\n                                        settings.text_decoration === 'underline'\n                                    }\n                                    onChange={handleTextDecorationChange}\n                                >\n                                    <span className=\"styleToolbar__textDecorationContent\">\n                                        U\n                                    </span>\n                                </Checkbox>\n                            </div>\n                        </div>\n                    </Stack>\n                </Stack.Item>\n            </Stack>\n        </div>\n    );\n}\n","import { Button, Card, DisplayText, Layout, Stack } from '@shopify/polaris';\nimport './ButtonConfigurator.scss';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport StyleToolbar from '../../StyleToolbar/StyleToolbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    checkoutDesignSettingsSelector,\n    preorderDesignSettingsSelector,\n} from '@redux/selectors/settings';\nimport {\n    patchAreaDesignSettingsInState,\n    resetDesignSettings,\n    setSelected,\n} from '@redux/reducers/settings';\nimport {\n    Area,\n    ButtonPart,\n    ButtonPartSettings,\n    CommonDesignSettingsDTO,\n    getStylesString,\n    validateFont,\n} from '@libs/utils';\nimport classNames from 'classnames';\n\ntype Props = {\n    settings: ButtonPartSettings;\n    selected: ButtonPart;\n    title: string;\n    buttonText: string;\n    buttonMessage: string;\n    area: Area;\n};\n\nexport default function ButtonConfigurator({\n    settings,\n    selected,\n    title,\n    area,\n    buttonText,\n    buttonMessage,\n}: Props) {\n    const modified = true;\n    const dispatch = useDispatch();\n\n    const handleSetSelected = useCallback(\n        (part: ButtonPart) => {\n            dispatch(setSelected({ area, part }));\n        },\n        [area]\n    );\n\n    const handleStyleChange: Parameters<\n        typeof StyleToolbar\n    >[0]['onChange'] = useCallback(\n        (style) => {\n            dispatch(patchAreaDesignSettingsInState({ style, area }));\n        },\n        [area]\n    );\n\n    const handleReset = useCallback(() => {\n        dispatch(resetDesignSettings(area));\n    }, [area]);\n\n    const refButton = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n        refButton.current!.setAttribute(\n            'style',\n            getStylesString(settings.button)\n        );\n    }, [settings.button]);\n\n    const refHover = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n        refHover.current!.setAttribute(\n            'style',\n            getStylesString(settings.hover)\n        );\n    }, [settings.hover]);\n\n    const refButtonHover = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n        refButtonHover.current!.setAttribute(\n            'style',\n            getStylesString(settings.hover)\n        );\n    }, [settings.hover]);\n\n    return (\n        <div className=\"buttonConfigurator\">\n            <Card title={<DisplayText size=\"small\">{title}</DisplayText>}>\n                <Card.Section fullWidth>\n                    <div className=\"buttonConfigurator__content\">\n                        <Stack vertical>\n                            <Stack.Item>\n                                <div className=\"buttonConfigurator__toolbar\">\n                                    <StyleToolbar\n                                        settings={settings[selected]}\n                                        onChange={handleStyleChange}\n                                    />\n                                </div>\n                            </Stack.Item>\n                            <Stack.Item>\n                                <div className=\"buttonConfigurator__buttons\">\n                                    <div className=\"buttonConfigurator__button buttonConfigurator__button-Self\">\n                                        <div className=\"pre-order-button-box pre-order-button-box__hover pre-order-button-box__top\">\n                                            <button\n                                                type=\"submit\"\n                                                onClick={() =>\n                                                    handleSetSelected('button')\n                                                }\n                                            >\n                                                <span\n                                                    className=\"pre-order-button__self\"\n                                                    ref={refButton}\n                                                >\n                                                    {buttonText}\n                                                </span>\n                                                <span\n                                                    className=\"pre-order-button__hover\"\n                                                    ref={refButtonHover}\n                                                >\n                                                    {buttonText}\n                                                </span>\n                                            </button>\n                                            <span className=\"pre-order-button__message\">\n                                                {buttonMessage}\n                                            </span>\n                                        </div>\n                                        {/* <button\n                                            ref={refButton}\n                                            onClick={() =>\n                                                handleSetSelected('button')\n                                            }\n                                        >\n                                            {buttonText}\n                                        </button> */}\n                                    </div>\n                                    <p>Hover view:</p>\n                                    <div className=\"buttonConfigurator__button buttonConfigurator__button-Hover\">\n                                        <button\n                                            ref={refHover}\n                                            onClick={() =>\n                                                handleSetSelected('hover')\n                                            }\n                                        >\n                                            {buttonText}\n                                        </button>\n                                    </div>\n                                    <div\n                                        className={classNames(\n                                            'buttonConfigurator__button-Default',\n                                            {\n                                                'buttonConfigurator__button-Default--hidden': !modified,\n                                            }\n                                        )}\n                                    >\n                                        <Button plain onClick={handleReset}>\n                                            Reset template to default\n                                        </Button>\n                                    </div>\n                                </div>\n                            </Stack.Item>\n                        </Stack>\n                    </div>\n                </Card.Section>\n            </Card>\n        </div>\n    );\n}\n","import { Card, DisplayText, Layout, Stack } from '@shopify/polaris';\nimport './design-settings.scss';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport StyleToolbar from '../StyleToolbar/StyleToolbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    appSettingsSelector,\n    checkoutDesignSettingsSelector,\n    checkoutSelectedDesignSettingsSelector,\n    preorderDesignSettingsSelector,\n    preorderSelectedDesignSettingsSelector,\n} from '@redux/selectors/settings';\nimport { patchAreaDesignSettingsInState } from '@redux/reducers/settings';\nimport { CommonDesignSettingsDTO, validateFont } from '@api/types/settings';\nimport ButtonConfigurator from './ButtonConfigurator/ButtonConfigurator';\n\nconst getStylesString = (settings: CommonDesignSettingsDTO) => {\n    const {\n        color,\n        background_color,\n        border_color,\n        font_family,\n        font_size,\n        font_weight,\n        text_decoration,\n        font_style,\n        border_radius,\n        border_width,\n    } = settings;\n\n    let result = '';\n\n    type Keys = keyof typeof settings;\n\n    Object.keys(settings).forEach((keyFromState) => {\n        const key = keyFromState.replace('_', '-');\n        let value = settings[keyFromState as Keys];\n        if (key === 'font-size') {\n            value = validateFont(settings.font_size.slice(0, -2)) + 'px';\n        }\n\n        result += `${key}: ${value}; `;\n    });\n    // result += `padding: 12px 30px;`;\n    result += `border-color: ${background_color}`;\n\n    // result += `background-color: ${background_color}; `;\n    // result += `border-radius: ${background_color}; `;\n\n    return result;\n    // ` border-radius: 1px; border-color: rgba(4, 120, 205, 0.5); border-width: 1px; color: rgb(255, 255, 255); font-size: 18px; font-family: inherit; font-style: normal; font-weight: bold; text-decoration: underline;`;\n    // `background-color: rgba(122, 125, 158, 0.5); padding: 23px 30px; border-radius: 1px; border-color: rgba(4, 120, 205, 0.5); border-width: 1px; color: rgb(255, 255, 255); font-size: 18px; font-family: inherit; font-style: normal; font-weight: bold; text-decoration: underline;`;\n};\n\nexport default function DesignSettings() {\n    const dispatch = useDispatch();\n\n    const appSettings = useSelector(appSettingsSelector);\n\n    const preorderSettings = useSelector(preorderDesignSettingsSelector)!;\n    const preorderSettingsTarget = useSelector(\n        preorderSelectedDesignSettingsSelector\n    );\n\n    const checkoutSettings = useSelector(checkoutDesignSettingsSelector)!;\n    const checkouSettingsTarget = useSelector(\n        checkoutSelectedDesignSettingsSelector\n    );\n\n    const handlePreorderChange = useCallback((preorder_button) => {\n        dispatch(patchAreaDesignSettingsInState(preorder_button));\n    }, []);\n\n    return (\n        <div className=\"designSettings\">\n            <DisplayText size=\"large\">Design</DisplayText>\n            <Stack>\n                <Stack.Item>\n                    <ButtonConfigurator\n                        title=\"Pre-order Experience Configurator\"\n                        area=\"preorder\"\n                        settings={preorderSettings}\n                        selected={preorderSettingsTarget}\n                        buttonText={appSettings?.button_text ?? 'Pre-order'}\n                        buttonMessage={\n                            appSettings?.button_message ?? 'Pre-order'\n                        }\n                    />\n                </Stack.Item>\n                {/* <Stack.Item>\n                    <ButtonConfigurator\n                        title=\"Checkout Button Configurator\"\n                        area=\"checkout\"\n                        settings={checkoutSettings}\n                        selected={checkouSettingsTarget}\n                        buttonText={appSettings?.button_text ?? 'Pre-order'}\n                        buttonMessage={\n                            appSettings?.button_message ?? 'Pre-order'\n                        }\n                    />\n                </Stack.Item> */}\n            </Stack>\n        </div>\n    );\n}\n","import { Button } from '@shopify/polaris';\nimport React, { FunctionComponent, useCallback } from 'react';\nimport DefaultProfileSettings from './DefaultProfileSettings/DefaultProfileSettings';\nimport DesignSettings from './DesignSettings/DesignSettings';\nimport './app-settings.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    getSettings,\n    updateSettings,\n    resetSettings,\n} from '@redux/reducers/settings';\nimport { appSettingsSelector } from '@redux/selectors/settings';\n\ntype Props = {};\n\nconst AppSettings: FunctionComponent<Props> = () => {\n    const dispatch = useDispatch();\n    const appSettings = useSelector(appSettingsSelector);\n\n    const handleSave = useCallback(() => {\n        dispatch(updateSettings());\n    }, []);\n\n    React.useEffect(() => {\n        dispatch(getSettings());\n\n        return () => {\n            dispatch(resetSettings());\n        };\n    }, []);\n\n    return !appSettings ? null : (\n        <div className=\"appSettings\">\n            <div className=\"appSettings__section\">\n                <DesignSettings />\n            </div>\n            <div className=\"appSettings__section\">\n                <DefaultProfileSettings />\n            </div>\n            <div className=\"appSettings__section\">\n                <Button primary onClick={handleSave}>\n                    Save\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default AppSettings;\n"],"sourceRoot":""}